<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Osx | neutrofoton]]></title>
  <link href="http://neutrofoton.github.io/blog/categories/osx/atom.xml" rel="self"/>
  <link href="http://neutrofoton.github.io/"/>
  <updated>2016-03-14T19:28:41+08:00</updated>
  <id>http://neutrofoton.github.io/</id>
  <author>
    <name><![CDATA[neutro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create iOS Ipa for In-House Distribution]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/03/09/create-ios-ipa-for-in-house-distribution/"/>
    <updated>2016-03-09T00:10:44+08:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/03/09/create-ios-ipa-for-in-house-distribution</id>
    <content type="html"><![CDATA[<p>Couple of month ago in the era of iphone 6, the company I work for was officially migrate official mobile device from BlackBerry to iphone 6. By the time of migration, development team also got initiative request from users to create an app for android. On the other hand, we also want to anticipate another request for ios platform. To simplify the porting to another platform, we use <a href="https://en.wikipedia.org/wiki/HTML5">HTML5</a>, <a href="http://www.telerik.com/kendo-ui"/>Kendo UI</a> and <a href="https://cordova.apache.org/">Apache Cordova</a> to build the app. The app just consumes data from REST services. The other requirement is the app will not be published to App Store. We have internal mobile device management (MDM) called <a href="https://www.mobileiron.com/"/>MobileIron</a>.</p>

<p>In this post, I will not write about how to build the app with Apache Cordova, I just want to focus on how to create ipa distribution package for in house enterprise distribution. The steps should be the same for app that is created with native. I also will not discuss about how to deploy to MDM.</p>

<p>The first requirement is we have to be a member of <a href="https://developer.apple.com/programs/enterprise/">iOS Developer Enterprise Program</a> which costs $299. The steps how to register is clearly explained in apple developer site.</p>

<p>At the time of write this post, my development environment :</p>

<ol type="1">
<li> OS X El Capitan (10.11.3)</li>
<li>Xcode (7.2)</li>
<li>iphone 6 (iOS 9.2)</li>
</ol>


<p>Before we start create ipa package, ensure our code runs well as expected on iphone simulator.</p>

<p>The steps of creating ipa package for distribution basically similar to deploying to real device for development as explained on <a href="/blog/2016/03/08/deploying-ios-app-to-real-device/">my previous post</a>.
In this post, I will only capture the things that are difference between them.</p>

<h2>Certificate</h2>


<p>While creating certificate preparation in <a href="https://developer.apple.com/account/ios/certificate/create">Apple Developer</a> portal, showed its slightly difference from <a href="/blog/2016/03/08/deploying-ios-app-to-real-device/">my previous post</a>
<img class="center" src="/images/post/2016-03-09-pic01.png"></p>

<p>In this case, I choose <code>In-House and Ad Hoc </code> distribution option instead of <code>iOS App Development</code>, since we plan to create ipa package for In House distribution. If we notice upon the above screenshot, in the <code>Production</code> section has option for <code>In-House and Ad Hoc </code> distribution. Meanwhile on <a href="/blog/2016/03/08/deploying-ios-app-to-real-device/">my previous post</a> has <code>App Store and Ad Hoc</code>. The difference because of the apple id I used on this post is enrolled as an <a href="https://developer.apple.com/programs/enterprise/">iOS Developer Enterprise Program</a>, and on <a href="/blog/2016/03/08/deploying-ios-app-to-real-device/">my previous post</a> uses Individual Apple Developer Program. The detail difference between them and other developer license schema can found <a href="https://developer.apple.com/support/compare-memberships/">here</a>.</p>

<p>The rest of preparing certificate installation for production is the same as <a href="/blog/2016/03/08/deploying-ios-app-to-real-device/">certificate installation for development</a>.</p>

<h2>App IDs</h2>


<p>The step of registering app <code>Bundle ID</code> is the same as <a href="/blog/2016/03/08/deploying-ios-app-to-real-device/">the previous post</a>. If we already registered for development, we should not do it again.</p>

<h2>Provisioning Profiles</h2>


<p>Creating provisioning also similar to the creation Provisioning for Development. Except at the wizard option we need to choose one of in the <code>Distribution</code> group instead of <code>Development</code> group. In this sample I select <code>In House</code>, since the ipa package we created will be deployed via MDM.</p>

<p><img class="center" src="/images/post/2016-03-09-pic02.png"></p>

<p>The next step is opening Xcode and add apple id via Xcode <code>Proferences > Accounts</code> as I did on <a href="/blog/2016/03/08/deploying-ios-app-to-real-device/">previous post</a>.
Now we should get the similar picture as follow.</p>

<p><img class="center" src="/images/post/2016-03-09-pic03.png"></p>

<p>Ensure <code>distribution profile</code> already downloaded. If not we can click download button on the list above of picture.</p>

<p>The next thing is opening iOS project with Xcode and ensuring we select <code>Distribution Profile</code> we installed on <code>Code signing</code> section group both on <code>Project</code> and <code>Target</code>.</p>

<p><img class="center" src="/images/post/2016-03-09-pic04.png">
<img class="center" src="/images/post/2016-03-09-pic05.png"></p>

<p>The next step is select <code>Product</code> menu > <code>Archive</code>, then follow the wizard.</p>

<p><img class="center" src="/images/post/2016-03-09-pic06.png">
<img class="center" src="/images/post/2016-03-09-pic07.png">
<img class="center" src="/images/post/2016-03-09-pic08.png">
<img class="center" src="/images/post/2016-03-09-pic09.png">
<img class="center" src="/images/post/2016-03-09-pic10.png"></p>

<p>When the wizard finish, by default Xcode will create ipa package for us on desktop.</p>

<p>That&rsquo;s all my share and thanks for reading :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying iOS App to Real Device]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/03/08/deploying-ios-app-to-real-device/"/>
    <updated>2016-03-08T13:35:31+08:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/03/08/deploying-ios-app-to-real-device</id>
    <content type="html"><![CDATA[<p>While developing ios app, sometime we don&rsquo;t just testing run the app on ios simulator we also need to test the app on real device though. The are couple of things that we need to prepare to make our app be able to run on real devices.</p>

<h2>Certificate</h2>


<p>Development certificate basically tells us that we are apple developers. To be it, our apple id has to be enrolled as an apple developer. Information about apple developer enrollment can be found at <a href="https://developer.apple.com/programs/enroll/">Apple Developer site</a>.</p>

<p>Once our apple id enrolled as an apple developer, there are couple of steps for preparing development certificate. App need to be signed to be able to deployed to real devices. To do that:</p>

<ol type="1">

<li>Go to <code>Launchpad</code> or <code>Spotlight Search</code>, type <code>Keychain Access</code> then open the app.
</li>

<li>At top menu, click <code>Keychain Access</code> > <code>Certificate Assistance</code> > <code>Request a Certificate from a Certificate Authority</code>

<img class="center" src="/images/post/2016-03-08-pic01.png">

Fill the <code>Email</code> and <code>Common Name</code>. The email should be <code>apple id email</code> then select <code>save to disk</code> and checked <code>Let me specify key pair information</code>. When we click continue, we should get save dialog

<img class="center" src="/images/post/2016-03-08-pic02.png">

Select Key Size <code>2048 bits</code> and <code>RSA</code> algorithm, click continue then done.
<img class="center" src="/images/post/2016-03-08-pic03.png">

The certificate request that we create just saved to disk (desktop in my case).

</li>

<li>
Open <a href="https://developer.apple.com/membercenter/index.action">apple developer portal</a>, login using apple id that already enrolled as apple developer.
<img class="center" src="/images/post/2016-03-08-pic04.png">

click <code>Certificates, Identifiers and Profiles</code>

</li>
<li>
Select <code>Sertificates</code> group > <code>All</code>
<img class="center" src="/images/post/2016-03-08-pic05.png">

On the right pane, select <code>add (+)</code> button, select type of certificate that we want to create. At this post we will create for development only. Not for production such as for deploy our app in app store nor internal store (in-house) like mobile device management.
<img class="center" src="/images/post/2016-03-08-pic06.png">

If everything already done on this page, scroll down > click <code>continue</code>

We may notice a information message that we have to ensure on our OS X development machine keychain installed <code>
Worldwide Developer Relations Certificate Authority</code>

<img class="center" src="/images/post/2016-03-08-pic07.png">

</li>
<li>
Follow the wizard, till we're asked to upload our certificate request that we already created on previous step.

<img class="center" src="/images/post/2016-03-08-pic08.png">

</li>
<li>
After completed the wizard, we should be able to download the generated certificate and ready to install on development machine.
<img class="center" src="/images/post/2016-03-08-pic09.png">

</li>
<li>
Download the <code>development certificate</code> > double click. The certificate should be installed on our <code>Keychain Access</code>
<img class="center" src="/images/post/2016-03-08-pic10.png">

<code>
NOTE :
Please ignore the distribution certificate on my screenshot. It just another certificate for distribution which is out of scope of this post.
</code>
</li>
</ol>




<h2>Devices</h2>


<p>This part informs to the xcode that the device is belongs to me. So let me run my app on it. To register our devices, select <code>Devices</code> on the apple developer portal as we did for certificate section above.</p>

<p><img class="center" src="/images/post/2016-03-08-pic11.png"></p>

<p>Click <code>add (+)</code>
<img class="center" src="/images/post/2016-03-08-pic12.png"></p>

<p>Enter <code>Name</code> and <code>UUID</code>. To get <code>UUID</code>, plug idevice to computer, itune will display it. If itune display <code>Serial Number</code> or <code>ECID</code> or <code>Product Type</code>,  click the label till <code>UUID</code> displayed. Just copy it and paste in the <code>UUID</code> text box above.</p>

<p><img class="center" src="/images/post/2016-03-08-pic13.png"></p>

<p>Follow the wizard till finish. We should be able to get our idevices listed on the device list.
<img class="center" src="/images/post/2016-03-08-pic14.png"></p>

<h2>App IDs</h2>


<p>On Apple developer portal mentioned that an <code>App ID</code> is a string that defines both a keychain identity and a set of apps you are developing. Its primary use is as part of a provisioning profile, it specifies which apps are authorized by the profile to be signed and launched.</p>

<p>To register <code>App ID</code>, click <code>Add (+)</code>. Fill <code>Name</code> and <code>Bundle ID</code>.</p>

<p><img class="center" src="/images/post/2016-03-08-pic15.png"></p>

<p>In this sample, my application <code>Name</code> is <code>HelloWorld</code> and <code>Bundle ID</code> is <code>com.neutrofoton.helloworld</code></p>

<p>Click continue till the wizard dialog finished.
We can get list all of <code>App IDs</code> that we registered by clicking  the <code>App IDs</code> on the left menu panel</p>

<p><img class="center" src="/images/post/2016-03-08-pic16.png"></p>

<h2>Provisioning Profiles</h2>


<p>On Apple Developer portal Provisioning Profiles defined that it allows us to install apps onto our iOS devices. A provisioning profile includes signing certificates, device identifiers, and an App ID. Development provisioning profiles are used to build and install versions of our app during the development cycle, while distribution provisioning profiles are used to submit our apps to the App Store and distribute them to beta testers.</p>

<p>To start create provisioning, click <code>add (+)</code> select <code>iOS App Development</code>. In this case I will create provisioning for test. For distribution we select on distribution group option as our need.</p>

<p><img class="center" src="/images/post/2016-03-08-pic17.png"></p>

<p>Follow the wizard by selecting <code>App ID</code>, <code>Devices</code>, and <code>Certificates</code> that will be applied to the <code>Provisioning Profile</code></p>

<p><img class="center" src="/images/post/2016-03-08-pic18.png">
<img class="center" src="/images/post/2016-03-08-pic19.png">
<img class="center" src="/images/post/2016-03-08-pic20.png">
<img class="center" src="/images/post/2016-03-08-pic21.png">
<img class="center" src="/images/post/2016-03-08-pic22.png"></p>

<p>Now open <code>Xcode > Preferences </code> select <code>Accounts</code> tab. Add apple id that we use for login to apple developer portal.</p>

<p>Select the apple id on the left pane > click <code>View Details</code> button.
We should get the similar picture as below.</p>

<p><img class="center" src="/images/post/2016-03-08-pic23.png"></p>

<p>If the profiles are not downloaded yet, we can click <code>Download</code> button that make Xcode do for us.</p>

<p>To test provisioning we created, let&rsquo;s create simple application. At the time of write this post, my development environment :</p>

<ol type="1">
<li> OS X El Capitan (10.11.3)</li>
<li>Xcode (7.2)</li>
<li>iphone 4s iOS 9.1</li>
</ol>


<p><img class="center" src="/images/post/2016-03-08-pic24.png">
<img class="center" src="/images/post/2016-03-08-pic25.png"></p>

<p>Ensure we have the same <code>Bundle Identifier</code> as we registered on <code>Provisioning Profile</code>. At this sample app, I just create a simple lable <code>Hello World Application</code> on storyboard.</p>

<p>Now run the application by selecting <code>Device</code> instead of <code>Simulator</code>. We may get the following message while running on real device, just click <code>Allow</code></p>

<p><img class="center" src="/images/post/2016-03-08-pic26.png"></p>

<p><img class="center" src="/images/post/2016-03-08-pic27.png"></p>

<p>The above picture shows that the Hello World app can be run on real device.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode Failed to Download Use the Purchases Page to Try Again]]></title>
    <link href="http://neutrofoton.github.io/blog/2013/09/24/xcode-failed-to-download-use-the-purchases-page-to-try-again/"/>
    <updated>2013-09-24T15:56:27+08:00</updated>
    <id>http://neutrofoton.github.io/blog/2013/09/24/xcode-failed-to-download-use-the-purchases-page-to-try-again</id>
    <content type="html"><![CDATA[<p>The following day after the release of iOS 7, I started update my iphone 4s to get to know how exactly the ios 7 is. My iphone successfully updated even though it was quite annoying with slow internet connection :( .</p>

<p>The next thing is updating my Xcode, since I got a notification to update my xcode from version 4.6.3 to version 5.0 via app store of version 1.2.2. My OSX version is 10.8.5.
While updatig process, several times I got error message <code>Xcode failed to download use the purchases page to try again</code>, and my download prosess suddenly stopped. Googling on internet and asking forum got many different suggestion and solution. Thankfully one of them success that is by clearing appstore download cache.</p>

<p>The steps to get things to work are quite simple.</p>

<ol>
<li>
Keep the AppStore App open. Open terminal and type
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /private/var/folders/
</span></code></pre></td></tr></table></div></figure>

Once there, search for com.apple.appstore
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . <span class="p">|</span> grep com.apple.appstore
</span></code></pre></td></tr></table></div></figure>
You will find folder structure like this <code>./40/lhn22jn901zdw2bpf82hkggw0000gn/C/com.apple.appstore</code>

</li>

<li>
Once inside the folder, open it in finder
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>open .
</span></code></pre></td></tr></table></div></figure>
</li>
<li>
While keeping AppStore open, remove this folder
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rm -rf *
</span></code></pre></td></tr></table></div></figure>
</li>
<li>
Now, go back to AppStore and click on Download again.
</li>
<li>
If download/update disappear, close the appstore then reopen it.
 </li>
</ol>


<p>That steps worked well to me. Good luck and have a nice day.</p>

<h4>References</h4>


<ol type="1">
  <li>http://apple.stackexchange.com/questions/61646/xcode-failed-to-download-use-the-purchases-page-to-try-again/71202#71202</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono on OS X 10.8 Mountain Lion]]></title>
    <link href="http://neutrofoton.github.io/blog/2012/09/19/mono-on-os-x-10-dot-8-mountain-lion/"/>
    <updated>2012-09-19T13:54:14+08:00</updated>
    <id>http://neutrofoton.github.io/blog/2012/09/19/mono-on-os-x-10-dot-8-mountain-lion</id>
    <content type="html"><![CDATA[<p>In this post I will write about setup and configure mono on OS X. I need mono on my Mac since C# is one of my favorite programming language ;)</p>

<p>First of all let’s download <a href="http://www.go-mono.com/mono-downloads/download.html">Mono SDK and MonoDevelop</a>. The order installation is Mono SDK first then MonoDevelop. The installation of Mono SDK and MonoDevelop should be easy by following the installation wizard.</p>

<p>When the installation finish, open terminal :</p>

<pre><code class="bash mono version">mono -V
</code></pre>

<p>We should get info about the version of mono installed in our machine.</p>

<p><img class="center" src="/images/post/2012-09-19-pic0.png"></p>

<p>Try to create an ASP.NET Web Application project by selecting menu :
<code>File > New > Solution</code>. Select <code>C# > ASP.NET > Web Application</code></p>

<p><img class="center" src="/images/post/2012-09-19-pic1.png"></p>

<p>Click <code>Run > Run With > Mono Soft Debugger for ASP.NET</code></p>

<p><img class="center" src="/images/post/2012-09-19-pic2.png"></p>

<h2>ASP.NET on Apache Web Server</h2>


<p>To run ASP.Net on Apache web server, we need <a href="http://www.mono-project.com/Mod_mono">Mod mono</a> module. It is an Apache 2.0/2.2 module that provides ASP.Net support for Apache web server. The steps installation are :</p>

<ol type="1">
<li>Install Apache web server. The steps for OS X Mountain Lion can be found in my previous post
</li>

<li>Install Xcode, OS X development tool. It’s free and can be downloaded via App Store. We need it to compile mod mono installation source
</li>

<li>Download Mod mono source installation here. At the time of write this article I use <code>mod_mono-2.10.tar.bz2</code>
</li>

<li>Install mod mono module. Open terminal

<figure class='code'><figcaption><span>mod mono installation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir ~/modmono
</span><span class='line'>cp ~/Downloads/mod_mono-2.10.tar.bz2 ~/modmono
</span><span class='line'><span class="nb">cd</span> ~/modmono
</span><span class='line'>tar xzf mod_mono-2.10.tar.bz2
</span><span class='line'><span class="nb">cd </span>mod_mono-2.10
</span><span class='line'>./configure
</span><span class='line'>make
</span><span class='line'>sudo make install
</span><span class='line'>sudo cp /etc/apache2/mod_mono.conf /etc/apache2/other
</span></code></pre></td></tr></table></div></figure>
</li>

<li>Add <code>mod_mono.conf</code> reference in <code>httpd.conf</code>
<figure class='code'><figcaption><span>edit httpd.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vi /etc/apache2/httpd.conf
</span></code></pre></td></tr></table></div></figure>
Add the following code at the end of <code>httpd.conf</code>
<figure class='code'><figcaption><span>httpd.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Include /etc/apache2/mod_mono.conf
</span></code></pre></td></tr></table></div></figure>
</li>

<li>Create a web directory with the path<code> ~/Projects/Mono/TestMonoApache/TestMonoApache/ </code>

In that directory create an <code>index.aspx</code> file
<figure class='code'><figcaption><span>index.aspx</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='aspx-cs'><span class='line'><span class="nt">&lt;center&gt;</span>mod_mono is working:<span class="nt">&lt;%=</span><span class="n">System</span><span class="p">.</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span><span class="nt">%&gt;&lt;/center&gt;</span>
</span></code></pre></td></tr></table></div></figure>
</li>
<li>Add an Apache configuration file for mono.
<figure class='code'><figcaption><span>edit mod_mono.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vi /etc/apache2/mod_mono.conf
</span></code></pre></td></tr></table></div></figure>
Add the following line at the end of <code>mod_mono.conf</code>
<figure class='code'><figcaption><span>mod_mono.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>Alias /testmono &quot;/Users/username/Projects/Mono/TestMonoApache/TestMonoApache/&quot;
</span><span class='line'><span class="nt">&lt;Directory</span> <span class="err">&quot;/Users/username/Projects/Mono/TestMonoApache/TestMonoApache/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    Options Indexes FollowSymLinks MultiViews
</span><span class='line'>    AllowOverride None
</span><span class='line'>
</span><span class='line'>    Order allow,deny
</span><span class='line'>    Allow from all
</span><span class='line'><span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>AddMonoApplications default &quot;/testmonoapache:/Users/username/Projects/Mono/TestMonoApache/TestMonoApache/&quot;
</span><span class='line'><span class="nt">&lt;Location</span> <span class="err">/testmonoapache</span><span class="nt">&gt;</span>
</span><span class='line'> SetHandler mono
</span><span class='line'><span class="nt">&lt;/Location&gt;</span>
</span></code></pre></td></tr></table></div></figure>
</li>

<li>Restart apache server with command :
<figure class='code'><figcaption><span>restart apache</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /usr/sbin/apachectl restart
</span></code></pre></td></tr></table></div></figure>
</li>

<li> Open browser and hit <code>http://localhost/testmonoapache/index.aspx</code>
<img class="center" src="/images/post/2012-09-19-pic3.png">
</li>

</ol>


<p>Cool, now our apache web server can receive request for asp.net page. Thanks for reading and see you in the next post :)</p>

<h4>References</h4>


<ol type="1">
  <li>http://www.mono-project.com/Mod_mono</li>
  <li>http://blog.coultard.com/2012/04/developing-using-c-and-mono-on-mac.html</li>
  <li>http://www.ienablemuch.com/2010/10/aspnet-on-mac-os-x-snow-leopard-at-one.html</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Tomcat in OS X 10.8 Mountain Lion]]></title>
    <link href="http://neutrofoton.github.io/blog/2012/09/14/install-tomcat-in-os-x-10-dot-8-mountain-lion/"/>
    <updated>2012-09-14T13:36:00+08:00</updated>
    <id>http://neutrofoton.github.io/blog/2012/09/14/install-tomcat-in-os-x-10-dot-8-mountain-lion</id>
    <content type="html"><![CDATA[<p>In this blog post will show us about step installing Apache Tomcat on OS X Mountain Lion. I assume we already have Java installed on our machine. The first step is downloading Tomcat binary distribution in <a href="http://tomcat.apache.org/">Tomcat website</a>. In this case I use version 7.0.30.</p>

<p>Extract the downloaded binary distribution onto <code>~/Download/apache-tomcat-7.0.30</code>.
Create directory in <code>/usr/local</code> if we don’t have it yet.</p>

<pre><code class="bash tomcat installation">sudo mkdir /usr/local
</code></pre>

<p>Move <code>~/Download/apache-tomcat-7.0.30 </code> to <code>/usr/local</code></p>

<pre><code class="bash tomcat installation">sudo mv ~/Downloads/apache-tomcat-7.0.30 /usr/local
</code></pre>

<p>To make it easy to replace this release with future releases, we are going to create a symbolic link that we are going to use when referring to Tomcat. Then we also will change owner and make script executable</p>

<pre><code class="bash tomcat installation">sudo ln -s /usr/local/apache-tomcat-7.0.30/ /Library/Tomcat
sudo chown -R neutrocode /Library/Tomcat
sudo chmod +x /Library/Tomcat/bin/*.sh
</code></pre>

<p>The next step is creating user for tomcat admin by editing <code>tomcat-user.xml</code>
<code>bash tomcat installation
vi /Library/Tomcat/conf/tomcat-users.xml
</code></p>

<pre><code class="xml tomcat-users.xml">&lt;role rolename="admin-gui"/&gt;
&lt;role rolename="admin-script"/&gt;
&lt;role rolename="manager-gui"/&gt;
&lt;role rolename="manager-script"/&gt;
&lt;role rolename="manager-jmx"/&gt;
&lt;role rolename="manager-status"/&gt;

&lt;user username="admin" password="password" roles="admin-gui,admin-script" /&gt;
&lt;user username="manager" password="password" roles="manager-gui,manager-script,manager-jmx,manager-status" /&gt;
</code></pre>

<p>Add the following text in current user profile .bash_profile
<figure class='code'><figcaption><span>.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">CATALINA_HOME</span><span class="o">=</span>/Library/Tomcat
</span><span class='line'><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;export <span class="nv">PATH</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Start the server with the following command :
<code>bash start tomcat
$CATALINA_HOME/bin/catalina.sh start
</code>
or</p>

<pre><code class="bash start tomcat">$CATALINA_HOME/bin/startup.sh
</code></pre>

<p><img class="center" src="/images/post/2012-09-14-tomcat.png"></p>

<p>Stop the server with the following command :
<code>bash start tomcat
$CATALINA_HOME/bin/catalina.sh stop
</code>
or</p>

<pre><code class="bash start tomcat">$CATALINA_HOME/bin/shutdown.sh
</code></pre>
]]></content>
  </entry>
  
</feed>
