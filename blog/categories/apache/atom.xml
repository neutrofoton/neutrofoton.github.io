<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Apache | neutrofoton]]></title>
  <link href="http://neutrofoton.github.io/blog/categories/apache/atom.xml" rel="self"/>
  <link href="http://neutrofoton.github.io/"/>
  <updated>2017-03-27T13:25:19+07:00</updated>
  <id>http://neutrofoton.github.io/</id>
  <author>
    <name><![CDATA[neutro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mono Multiple Application on a Virtual Host]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/09/19/mono-multiple-application-on-a-virtual-host/"/>
    <updated>2016-09-19T22:06:13+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/09/19/mono-multiple-application-on-a-virtual-host</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/logo/mono.png">
On my previous post I wrote how to configure application virtual host. We can have multiple application in a virtual host like multiple application in a web site on IIS. To do that, the steps are the same as I did on my previous post. Let&rsquo;s say we have a scenario, having a site config as the sample on previous article, an application port 99, default document root <code>/var/www/vhosts/defaultsite/root</code>. The detail virtual host config as follow</p>

<pre><code class="xml">
&lt;VirtualHost *:99&gt;
    ServerAdmin admin@test.com
    ServerName  neutro.local
    ServerAlias neutrofoton.com *.neutrofoton.com

    MonoServerPath neutro.local "/usr/bin/mod-mono-server4"
    MonoDebug neutro.local true
    MonoSetEnv neutro.local MONO_IOMAP=all
    MonoApplications neutro.local "/:/var/www/vhosts/defaultsite/root"

    MonoAutoApplication disabled
    AddHandler  mono    .aspx .ascx .asax .ashx .config .cs .asmx .axd

    DocumentRoot    /var/www/vhosts/defaultsite/root
    DirectoryIndex  Default.aspx index.aspx index.html

    &lt;Location "/"&gt;
      Allow from all
      Order allow,deny
    MonoSetServerAlias neutro.local
      SetHandler mono
      SetOutputFilter DEFLATE
      SetEnvIfNoCase Request_URI "\.(?:gif|jpe?g|png)$" no-gzip dont-vary
    &lt;/Location&gt;

    &lt;IfModule mod_deflate.c&gt;
      AddOutputFilterByType DEFLATE text/html text/plain text/xml text/javascript
    &lt;/IfModule&gt;

    LogLevel    debug

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
&lt;/VirtualHost&gt;
</code></pre>

<p>The steps to enable site config is the same as privious post. To make virtual host have multiple applications, we have to modify the site config file as follow. In this sample, we are going to add 2 applications to this virtual host</p>

<pre><code class="xml">
&lt;VirtualHost *:99&gt;
    ServerAdmin admin@test.com
    ServerName  neutro.local
    ServerAlias neutrofoton.com *.neutrofoton.com

    MonoServerPath neutro.local "/usr/bin/mod-mono-server4"
    MonoDebug neutro.local true
    MonoSetEnv neutro.local MONO_IOMAP=all
    MonoApplications neutro.local "/:/var/www/vhosts/defaultsite/root"

    MonoAutoApplication disabled
    AddHandler  mono    .aspx .ascx .asax .ashx .config .cs .asmx .axd

    DocumentRoot    /var/www/vhosts/defaultsite/root
    DirectoryIndex  Default.aspx index.aspx index.html

    &lt;Location "/"&gt;
      Allow from all
      Order allow,deny
    MonoSetServerAlias neutro.local
      SetHandler mono
      SetOutputFilter DEFLATE
      SetEnvIfNoCase Request_URI "\.(?:gif|jpe?g|png)$" no-gzip dont-vary
    &lt;/Location&gt;

    Alias   /project1  "/home/neutro/Workspace/dotnet/project1"
    MonoApplications project1 "/project1:/home/neutro/Workspace/dotnet/project1"
    MonoServerPath project1 "/usr/bin/mod-mono-server4"
    &lt;Location "/project1"&gt;
      Allow from all
      Order allow,deny
      MonoSetServerAlias project1
      SetHandler mono
      SetOutputFilter DEFLATE
      SetEnvIfNoCase Request_URI "\.(?:gif|jpe?g|png)$" no-gzip dont-vary
      Require all granted
    &lt;/Location&gt;

    Alias   /project2  "/home/neutro/Workspace/dotnet/project2"
    MonoApplications project2 "/project2:/home/neutro/Workspace/dotnet/project2"
    MonoServerPath project2 "/usr/bin/mod-mono-server4"
    &lt;Location "/project2"&gt;
      Allow from all
      Order allow,deny
      MonoSetServerAlias project2
      SetHandler mono
      SetOutputFilter DEFLATE
      SetEnvIfNoCase Request_URI "\.(?:gif|jpe?g|png)$" no-gzip dont-vary
      Require all granted
    &lt;/Location&gt;

    &lt;IfModule mod_deflate.c&gt;
      AddOutputFilterByType DEFLATE text/html text/plain text/xml text/javascript
    &lt;/IfModule&gt;

    LogLevel    debug

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
&lt;/VirtualHost&gt;
</code></pre>

<p>In the new virtual host configuration we have:</p>

<ol>
<li><code>/project1</code>, with physical application&rsquo;s files in <code>/home/neutro/Workspace/dotnet/project1</code></li>
<li><code>/project2</code>, with physical application&rsquo;s files in <code>/home/neutro/Workspace/dotnet/project2</code></li>
</ol>


<p>Let&rsquo;s assume we have a simple <code>index.aspx</code> file in <code>/home/neutro/Workspace/dotnet/project1</code> and <code>/home/neutro/Workspace/dotnet/project2</code></p>

<p>We need to give access to both folders and theirs file contents</p>

<pre><code class="bash">$ find project1 -type d -exec chmod 755 {} \;
$ find project1 -type f -exec chmod 644 {} \;

$ find project2 -type d -exec chmod 755 {} \;
$ find project2 -type f -exec chmod 644 {} \;
</code></pre>

<p>After modifying the config file and give access to the application directories, we need to register the applications in <code>/etc/mono-server4/debian.webapp</code></p>

<pre><code class="xml">&lt;apps&gt;
   &lt;web-application&gt;
        &lt;name&gt;project1&lt;/name&gt;
        &lt;vpath&gt;/project1&lt;/vpath&gt;
        &lt;path&gt;/home/neutro/Workspace/dotnet/project1&lt;/path&gt;
        &lt;vhost&gt;neutro.local&lt;/vhost&gt;
    &lt;/web-application&gt;
    &lt;web-application&gt;
        &lt;name&gt;project2&lt;/name&gt;
        &lt;vpath&gt;/project2&lt;/vpath&gt;
        &lt;path&gt;/home/neutro/Workspace/dotnet/project2&lt;/path&gt;
        &lt;vhost&gt;neutro.local&lt;/vhost&gt;
    &lt;/web-application&gt;
&lt;/apps&gt;
</code></pre>

<p>The final step is restart apache, and now we should be able to open in browser <a href="http://localhost:99/project1">http://localhost:99/project1</a> or <a href="http://localhost:99/project2.">http://localhost:99/project2.</a></p>

<h2>References</h2>

<ol>
<li><a href="http://stackoverflow.com/questions/19279286/fail-to-start-a-mono-site-with-apache2-404-error-with-mod-mono">http://stackoverflow.com/questions/19279286/fail-to-start-a-mono-site-with-apache2-404-error-with-mod-mono</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono Mod_mono Apache2 on Ubuntu]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/09/18/mono-mod-mono-apache2-on-ubuntu/"/>
    <updated>2016-09-18T08:34:23+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/09/18/mono-mod-mono-apache2-on-ubuntu</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/logo/mono.png">
I used to write a post about install and configure Mono on OS X Mountain Lion. On this post I want to summary what I did the similar things on Ubuntu.</p>

<p>The details environment I use :</p>

<ol>
<li>Ubuntu 14.04 LTS</li>
<li>Mono JIT compiler version 4.4.2</li>
<li>Apache 2.4.7</li>
</ol>


<h2>Install Mono, Apache 2, Mod Mono</h2>

<p>To install Mono, the first step is add package repository to our system.</p>

<pre><code class="bash">$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF

$ echo "deb http://download.mono-project.com/repo/debian wheezy main" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list

$ sudo apt-get update
</code></pre>

<p>To enable mod_mono installation on Ubuntu 13.10 or later, and Debian 8.0 and later (and their derivatives), we need to add a second repository to our system, in addition to the generic Debian/Ubuntu repository above (if you donâ€™t use sudo, be sure to switch to root):</p>

<pre><code class="bash">
$ echo "deb http://download.mono-project.com/repo/debian wheezy-apache24-compat main" | sudo tee -a /etc/apt/sources.list.d/mono-xamarin.list
</code></pre>

<p>Then run package update to update and a package upgrade to upgrade existing packages to the latest available.</p>

<pre><code class="bash">$ sudo apt-get update
$ sudo apt-get upgrade
</code></pre>

<p>To install mono, run the following command</p>

<pre><code class="bash install mono">$ sudo apt-get install mono-complete
</code></pre>

<p>If we do not have Apache 2 on our system, we need to install it first. Or we can check the existing version <code>apache2 -v</code></p>

<pre><code class="bash install apache2">$ sudo apt-get install apache2
</code></pre>

<p>To be able to host ASP.NET application on apache, we need to install <code>mod_mono</code>. <code>mod_mono</code> is a module for the Apache HTTP Server that allows us to host ASP.NET pages and other assemblies on multiple platforms by using Mono.</p>

<p>To install Mod Mono and its dependencies run the following command</p>

<pre><code class="bash install mod_mono">$ sudo apt-get update &amp;&amp; sudo apt-get install libapache2-mod-mono
$ apt-get install mono-apache-server4
</code></pre>

<p>Before going through the next step, the things than we can verify are :</p>

<ol>
<li><p>Ensuring Apache 2 running well at least by checking its version or start stop its service.</p>

<pre><code class="` bash apache version"> $ apache2 -v
</code></pre>

<pre><code class="` bash start apache"> $ service apache2 start
</code></pre>

<pre><code class="` bash stop apache"> $ service apache2 stop
</code></pre></li>
<li><p>Checking mono version</p>

<pre><code class="bash mono version">$ mono --version
</code></pre></li>
<li>Ensuring we have <code>/usr/bin/mod-mono-server4</code></li>
</ol>


<h2>Configuring Application Virtual Host</h2>

<p>To configure virtual host application, the steps are</p>

<ol>
<li><p>Create a directory where the application physical files reside.
In this sample I put my  application files in <code>/var/www/hellodotnet</code></p>

<p>We needed to grant permissions to the login user so that the user could copy or create files to the <code>hellodotnet</code> directory.  For our purposes we made the current user the owner of the directory</p>

<pre><code class="` bash application directory"> $ chown -R -v your_user_name /var/www/
</code></pre></li>
<li><p>Lets create a simple <code>/var/www/hellodotnet/index.aspx</code> file.</p>

<pre><code class="` html index.aspx"> &lt;center&gt;mod_mono is working:&lt;%=System.DateTime.Now.ToString()%&gt;&lt;/center&gt;
</code></pre></li>
<li><p>Create a site configuration <code>/etc/apache2/sites-available/hellodotnet.conf</code></p>

<pre><code class="` xml site configuration">    &lt;VirtualHost *:81&gt;
       ServerName hellodotnet
       ServerAdmin hello@test-apache-config.com
       DocumentRoot /var/www/hellodotnet
       MonoServerPath hellodotnet "/usr/bin/mod-mono-server4"
       MonoDebug hellodotnet true
       MonoSetEnv hellodotnet MONO_IOMAP=all
       MonoApplications hellodotnet "/:/var/www/hellodotnet"

       ErrorLog ${APACHE_LOG_DIR}/error.log
       CustomLog ${APACHE_LOG_DIR}/access.log combined

       AddHandler  mono    .aspx .ascx .asax .ashx .config .cs .asmx .axd
       &lt;Location "/"&gt;
         Allow from all
         Order allow,deny
         MonoSetServerAlias hellodotnet
         SetHandler mono
         SetOutputFilter DEFLATE
         SetEnvIfNoCase Request_URI "\.(?:gif|jpe?g|png)$" no-gzip dont-vary
       &lt;/Location&gt;
       &lt;IfModule mod_deflate.c&gt;
         AddOutputFilterByType DEFLATE text/html text/plain text/xml text/javascript
       &lt;/IfModule&gt;
     &lt;/VirtualHost&gt;
</code></pre>

<p>In this site I use port 81 instead of default 80.</p></li>
<li><p>Since we use port 81, we need to register port 81 in <code>/etc/apache2/ports.conf</code> by simply add the following code</p>

<pre><code class="` bash"> Listen 81
</code></pre></li>
<li><p>Enabling the site by running the following command from terminal</p>

<pre><code class="` bash"> $ sudo a2ensite hellodotnet.conf
</code></pre></li>
<li>Restart apache</li>
<li>Hit from browser : <a href="http://localhost:81">http://localhost:81</a>
We should have the page displayed current date time.</li>
</ol>


<h2>Tips</h2>

<ol>
<li><p>If we get the page not displayed, we can see the message on the page displayed, HTML error code, or any clue on apache logs located in <code>/var/log/apache2</code></p></li>
<li><p>If we get message access denied cannot access bin, simply change permission of the application site.</p>

<pre><code class="` bash"> $ find hellodotnet -type d -exec chmod 755 {} \;
 $ find hellodotnet -type f -exec chmod 644 {} \;
</code></pre></li>
<li><p>If getting message could not find <code>/etc/mono/registry</code>, simply create the directory.</p>

<pre><code class="` bash"> $ sudo mkdir /etc/mono/registry
</code></pre></li>
<li><p>If getting <code>System.UnauthorizedAccessException</code> access to the path <code>/etc/mono/registry</code>, give access to it as its need, for example</p>

<pre><code class="`` bash">  $ chmod uog+rw /etc/mono/registry
</code></pre></li>
</ol>


<h2>References</h2>

<ol>
<li><a href="http://www.mono-project.com/docs/getting-started/install/linux/">http://www.mono-project.com/docs/getting-started/install/linux/</a></li>
<li><a href="http://stackoverflow.com/questions/34290004/how-to-install-configure-mod-mono-on-ubuntu-14-04-3-lts">http://stackoverflow.com/questions/34290004/how-to-install-configure-mod-mono-on-ubuntu-14-04-3-lts</a></li>
<li><a href="http://www.bloomspire.com/blog/2015/3/9/how-to-host-aspnet-applications-on-linux-p3">http://www.bloomspire.com/blog/2015/3/9/how-to-host-aspnet-applications-on-linux-p3</a></li>
<li><a href="http://superuser.com/questions/882594/permission-denied-because-search-permissions-are-missing-on-a-component-of-the-p">http://superuser.com/questions/882594/permission-denied-because-search-permissions-are-missing-on-a-component-of-the-p</a></li>
<li><a href="https://www.codementor.io/tips/7134438372/access-to-the-path-etc-mono-registry-is-denied">https://www.codementor.io/tips/7134438372/access-to-the-path-etc-mono-registry-is-denied</a></li>
<li><a href="https://retkomma.wordpress.com/2011/10/01/registry-settings-in-mono-on-linux/">https://retkomma.wordpress.com/2011/10/01/registry-settings-in-mono-on-linux/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Tomcat in OS X 10.8 Mountain Lion]]></title>
    <link href="http://neutrofoton.github.io/blog/2012/09/14/install-tomcat-in-os-x-10-dot-8-mountain-lion/"/>
    <updated>2012-09-14T12:36:00+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2012/09/14/install-tomcat-in-os-x-10-dot-8-mountain-lion</id>
    <content type="html"><![CDATA[<p>In this blog post will show us about step installing Apache Tomcat on OS X Mountain Lion. I assume we already have Java installed on our machine. The first step is downloading Tomcat binary distribution in <a href="http://tomcat.apache.org/">Tomcat website</a>. In this case I use version 7.0.30.</p>

<p>Extract the downloaded binary distribution onto <code>~/Download/apache-tomcat-7.0.30</code>.
Create directory in <code>/usr/local</code> if we donâ€™t have it yet.</p>

<pre><code class="bash tomcat installation">sudo mkdir /usr/local
</code></pre>

<p>Move <code>~/Download/apache-tomcat-7.0.30 </code> to <code>/usr/local</code></p>

<pre><code class="bash tomcat installation">sudo mv ~/Downloads/apache-tomcat-7.0.30 /usr/local
</code></pre>

<p>To make it easy to replace this release with future releases, we are going to create a symbolic link that we are going to use when referring to Tomcat. Then we also will change owner and make script executable</p>

<pre><code class="bash tomcat installation">sudo ln -s /usr/local/apache-tomcat-7.0.30/ /Library/Tomcat
sudo chown -R neutrocode /Library/Tomcat
sudo chmod +x /Library/Tomcat/bin/*.sh
</code></pre>

<p>The next step is creating user for tomcat admin by editing <code>tomcat-user.xml</code>
<code>bash tomcat installation
vi /Library/Tomcat/conf/tomcat-users.xml
</code></p>

<pre><code class="xml tomcat-users.xml">&lt;role rolename="admin-gui"/&gt;
&lt;role rolename="admin-script"/&gt;
&lt;role rolename="manager-gui"/&gt;
&lt;role rolename="manager-script"/&gt;
&lt;role rolename="manager-jmx"/&gt;
&lt;role rolename="manager-status"/&gt;

&lt;user username="admin" password="password" roles="admin-gui,admin-script" /&gt;
&lt;user username="manager" password="password" roles="manager-gui,manager-script,manager-jmx,manager-status" /&gt;
</code></pre>

<p>Add the following text in current user profile .bash_profile
<figure class='code'><figcaption><span>.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">CATALINA_HOME</span><span class="o">=</span>/Library/Tomcat
</span><span class='line'><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;export <span class="nv">PATH</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Start the server with the following command :
<code>bash start tomcat
$CATALINA_HOME/bin/catalina.sh start
</code>
or</p>

<pre><code class="bash start tomcat">$CATALINA_HOME/bin/startup.sh
</code></pre>

<p><img class="center" src="/images/post/2012-09-14-tomcat.png"></p>

<p>Stop the server with the following command :
<code>bash start tomcat
$CATALINA_HOME/bin/catalina.sh stop
</code>
or</p>

<pre><code class="bash start tomcat">$CATALINA_HOME/bin/shutdown.sh
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Apache on OS X 10.8 Mountain Lion]]></title>
    <link href="http://neutrofoton.github.io/blog/2012/08/08/configure-apache-on-os-x-10-dot-8-mountain-lion/"/>
    <updated>2012-08-08T09:47:05+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2012/08/08/configure-apache-on-os-x-10-dot-8-mountain-lion</id>
    <content type="html"><![CDATA[<p>After installing Mountain Lion on my Macbook, I decided to prepare and set up software development tools in it. One of it is activate web sharing feature which can be found at System Preferences > Sharing on previous version. I was very suprise that apple seems remove it from the list.</p>

<p><img class="center" src="/images/post/2012-08-07-pic01.png"></p>

<p>By searching some references on internet, here are the things that I did. Apache actually is pre-installed on Mountain Lion and we just need to enable it via the command line.</p>

<pre><code class="bash start apache server">sudo apachectl start
</code></pre>

<p>We will be asked to enter login password for starting it. Enter a password then open in browser localhost website. You should get the following display</p>

<p><img class="center" src="/images/post/2012-08-07-pic02.png"></p>

<pre><code class="bash stop apache server">sudo apachectl stop
</code></pre>

<pre><code class="bash get apache version">httpd -v
</code></pre>

<p>Historically, OSX has had 2 web roots. One at a system level and the other one at a user level. The user level one allows multiple acounts to have their own web root whilst the system one is global for all users. The location of system web document root is at</p>

<pre><code class="text">/Library/WebServer/Documents/
</code></pre>

<p>On the other hand, the user level web roots in the previous version of OSX (Lion) can be found under ~/Sites. But we can not find that directory anymore in Mountain Lion. So we need to create it manually.</p>

<p><img class="center" src="/images/post/2012-08-07-pic03.png"></p>

<p>In terminal type:
<code>bash edit configuration
cd /etc/apache2/users
vi username.conf
</code></p>

<p>Edit username.conf in vi editor as is the following code:</p>

<pre><code class="text">&lt;Directory "/Users/username/Sites/"&gt;
Options Indexes MultiViews
AllowOverride None
Order allow,deny
Allow from all
&lt;/Directory&gt;
</code></pre>

<p>Then create html page inside ~/Sites to test our user local website and save it as index.html
``` html sample page
&lt;!DOCTYPE html PUBLIC &ldquo;-//W3C//DTD HTML 4.01//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/html4/strict.dtd">http://www.w3.org/TR/html4/strict.dtd</a>&rdquo;>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <title></title>
  <meta name="Generator" content="Cocoa HTML Writer">
  <meta name="CocoaVersion" content="1187">
  <style type="text/css">
  </style>
</head>
<body></p>

<h1><b>It works!</h1>


<h1><b>I am on local user website</b></h1>


<p></body>
</html></p>

<p>```
<img class="center" src="/images/post/2012-08-07-pic04.png"></p>

<p>Congratulation your apache is running well now :)</p>
]]></content>
  </entry>
  
</feed>
