<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php | neutrofoton]]></title>
  <link href="http://neutrofoton.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://neutrofoton.github.io/"/>
  <updated>2017-05-04T21:20:11+07:00</updated>
  <id>http://neutrofoton.github.io/</id>
  <author>
    <name><![CDATA[neutro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install phpMyAdmin on OS X 10.8 Mountain Lion]]></title>
    <link href="http://neutrofoton.github.io/blog/2012/08/10/install-phpmyadmin-on-os-x-10-dot-8-mountain-lion/"/>
    <updated>2012-08-10T10:39:53+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2012/08/10/install-phpmyadmin-on-os-x-10-dot-8-mountain-lion</id>
    <content type="html"><![CDATA[<p>In the previous post, we have installed Apache, PHP and MySQL on OS X 10.8. To do administration of mySQL database we can use various app. One of the tool that usually use by programmer to do that is <a href="http://www.phpmyadmin.net/home_page/index.php">phpMyAdmin</a>. It is a free opensource web app that’s used to manage MySQL database. Let’s install it now.</p>

<p>The first thing that we need to do is open terminal and type</p>

<pre><code class="bash symbolic link for mysql">sudo mkdir /var/mysql

sudo ln -s /tmp/mysql.sock /var/mysql/mysql.sock
</code></pre>

<p>Extract the downloaded <code>phpMyAdmin-3.5.2.1-english.zip</code> into web folder and rename as <code>phpMyAdmin</code>. So now we should have <code>~/Sites/phpMyAdmin</code> directory.</p>

<p>On browser, open : <a href="http://localhost/~username/phpmyadmin">http://localhost/~username/phpmyadmin</a></p>

<p><img class="center" src="/images/post/2012-08-10-phpmyadmin.png"></p>

<p>Now we can login and administer MySQL database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install PHP on OS X 10.8 Mountain Lion]]></title>
    <link href="http://neutrofoton.github.io/blog/2012/08/09/install-php-on-os-x-10-dot-8-mountain-lion/"/>
    <updated>2012-08-09T10:13:16+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2012/08/09/install-php-on-os-x-10-dot-8-mountain-lion</id>
    <content type="html"><![CDATA[<p>On the previous post, we have set up apache on OS X Mountain Lion. In this post we will continue to install php module to run with apache on Mountain Lion. PHP actually is shipped in OS X 10.8. The first step is edit <code>httpd.conf</code> in apache directory.</p>

<pre><code class="bash httpd configuration">sudo vi /etc/apache2/httpd.conf
</code></pre>

<p>Uncommect (remove #) php module declaration
<code>text
LoadModule php5_module libexec/apache2/libphp5.so
</code></p>

<pre><code class="bash restart apache">sudo apachectl restart
</code></pre>

<p>To see and test PHP create a file with the content, and save in /Users/username/Sites as “test.php”. Then open in browser <a href="http://localhost/~username/test.php">http://localhost/~username/test.php</a></p>

<pre><code class="php test.php">&lt;?php phpinfo(); ?&gt;
</code></pre>

<p><img class="center" src="/images/post/2012-08-09-php.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jomla Encryption in C#]]></title>
    <link href="http://neutrofoton.github.io/blog/2012/08/06/jomla-encryption-in-c-number/"/>
    <updated>2012-08-06T09:21:53+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2012/08/06/jomla-encryption-in-c-number</id>
    <content type="html"><![CDATA[<p>Couple days ago I got a task to migrate user from an existing website which build based on Jomla CMS to an ASP.NET website user. Both of them use different encryption technique. The plan was that the Jomla based website would be replaced with the .NET website. In sort the scenario was :</p>

<ol>
<li>Replace PHP website build on top Jomla CMS with .NET</li>
<li>Migrate users from Jomla so they can login into the new .NET website using old password</li>
<li>Migrate some roles</li>
</ol>


<p>The first thing that come to my mind is to check whether they use the different encryption algorithm or not. And yup…they use different algorithm :( . So I decide to extend the <code>MembershipProvider</code> used by the .NET. In my case, thankfully I just need to override one method on that is <code>ValidateUser</code>. I will not talk the the detail what inside the methods is. The main point is just to validate if user login using existing password created by jomla can be validated by the .NET. To do that I create a simple class called <code>JomlaEncryption</code> to validate if user enter valid Jomla password.</p>

<pre><code class="c# encrypt with jomla algorithm">public class JomlaEncryption
{
    public static bool IsValidPassword(string password, string encryptedPassword)
    {
        return EncryptUsingJomlaAlgorithm(password, encryptedPassword) == encryptedPassword;
    }

    /// &lt;summary&gt;
    /// Source : http://stackoverflow.com/questions/2727043/using-php-to-create-a-joomla-user-password
    ///   From joomla Forum, that's what happen behind:
    ///
    ///   1. Generate a password
    ///   2. Generate 32 random characters
    ///   3. Concatenate 1 and 2
    ///   4. md5(3)
    ///   5. store 4:2
    ///   Example:
    ///
    ///   1. Generate a password - we'll use 'password'
    ///   2. Generate 32 random characters - we'll use 'WnvTroeiBmd5bjGmmsVUnNjppadH7giK'
    ///   3. Concatenate 1 and 2 - passwordWnvTroeiBmd5bjGmmsVUnNjppadH7giK
    ///   4. md5(3) - 3c57ebfec712312f30c3fd1981979f58
    ///   5. store 4:2 - 3c57ebfec712312f30c3fd1981979f58:WnvTroeiBmd5bjGmmsVUnNjppadH7giK
    /// &lt;/summary&gt;
    /// &lt;param name="password"&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    static string EncryptUsingJomlaAlgorithm(string password, string encryptedPassword)
    {
        if (!encryptedPassword.Contains(":"))
            return null;

        string randChar32Bit = encryptedPassword.Split(':')[1];
        if (string.IsNullOrEmpty(randChar32Bit) || randChar32Bit.Length != 32)
            return null;

        string concatePassAndRandChar32Bit = password + randChar32Bit;
        string hashedConcatePassAndRandChar32Bit = MD5(concatePassAndRandChar32Bit);

        return string.Format("{0}:{1}", hashedConcatePassAndRandChar32Bit, randChar32Bit);
    }

    static string MD5(string password)
    {
        byte[] bytes = System.Text.Encoding.Default.GetBytes(password);
        try
        {
            System.Security.Cryptography.MD5CryptoServiceProvider cryptProvider;
            cryptProvider = new System.Security.Cryptography.MD5CryptoServiceProvider();
            byte[] hash = cryptProvider.ComputeHash(bytes);
            string ret = string.Empty;
            foreach (byte a in hash)
            {
                if (a &lt; 16)
                    ret += "0" + a.ToString("x");
                else
                    ret += a.ToString("x");
            }
            return ret;
        }
        catch
        {
            throw;
        }
    }
}
</code></pre>

<p>That&rsquo;s all for now and thanks for reading :)</p>
]]></content>
  </entry>
  
</feed>
