<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | neutrofoton]]></title>
  <link href="http://neutrofoton.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://neutrofoton.github.io/"/>
  <updated>2021-04-01T21:01:51+07:00</updated>
  <id>http://neutrofoton.github.io/</id>
  <author>
    <name><![CDATA[neutro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generate POJO and Hibernate Mapping Using Hibernate Tools]]></title>
    <link href="http://neutrofoton.github.io/blog/2020/11/30/generate-pojo-and-hibernate-mapping-using-hibernate-tools/"/>
    <updated>2020-11-30T18:13:54+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2020/11/30/generate-pojo-and-hibernate-mapping-using-hibernate-tools</id>
    <content type="html"><![CDATA[<p>Sometime we get into a condition in which we need to create POJO classes from an existing database. It could  take time if the database has many tables. Instead of manually create them, we could use <a href="https://docs.jboss.org/tools/4.1.0.Final/en/hibernatetools/html_single/index.html">Hibernate Tool</a>. Hibernate Tools is an eclipse plugin that can be installed from the eclipse marketplace.</p>

<p>In this post, we use Spring Tool Suite (STS) 4 instead of directly use the eclipse version of the IDE. Meanwhile the database we use is PostgreSQL. It should be applicable to any other database.</p>

<p>The steps of using Hibernate Tools is summarized as follow.
I append many screenshots on this post in order the steps are easier to follow.</p>

<h4>Step 1 : Install Hibernate Tools plugin</h4>

<p>To install Hibernate Tools plugin, go to menu <code> Help > Eclipse Marketplace </code>.</p>

<p><img class="center" src="/images/post/2020-11-30-fig01.png"></p>

<p>Enter <code>Hibernate Tools</code> in the search field.</p>

<p><img class="center" src="/images/post/2020-11-30-fig02.png"></p>

<p>Follow the installation step until the installation success and finish. Eclipse will show us a pop up message to restart it once the installation finished.</p>

<h4>Step 2 : Create Java Maven project</h4>

<p>Before building a connection to the database, we will create a maven project that contains a hibernate configuration file and where the generated code will be placed. The following figures show the maven project configuration setting.</p>

<p>First, ensure we are in the <code>Java persepective</code> mode. From the menu <code>File > New > Other&hellip;</code> select <code>Maven Project</code> as the following figure.</p>

<p><img class="center" src="/images/post/2020-11-30-fig03.png"></p>

<p>Select the checked box of <code>Create a simple project</code> then press <code>Next</code>.</p>

<p><img class="center" src="/images/post/2020-11-30-fig04.png"></p>

<p>Fill the <code>Group Id</code> and <code>Artifact Id</code>. Select <code>jar</code> for the <code>Packaging</code> option, then click <code>Finish</code></p>

<p><img class="center" src="/images/post/2020-11-30-fig05.png"></p>

<p>Create a namespace in the maven project where the generated code will be placed.
<img class="center" src="/images/post/2020-11-30-fig06.png"></p>

<p>The project structure should look like the following picture.
<img class="center" src="/images/post/2020-11-30-fig07.png"></p>

<p>Once the project skeleton constructued, edit the <code>pom.xml</code> by adding dependencies of the hibernate and database driver. The latest jar version could be found in <a href="https://mvnrepository.com/">Maven Repository</a></p>

<pre><code class="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;io.neutrofoton.lab&lt;/groupId&gt;
  &lt;artifactId&gt;hibernatereverse&lt;/artifactId&gt;
  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;

 &lt;dependencies&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;
        &lt;version&gt;5.4.24.Final&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
        &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
        &lt;version&gt;42.2.18&lt;/version&gt;
    &lt;/dependency&gt;


 &lt;/dependencies&gt;
&lt;/project&gt;
</code></pre>

<h4>Step 3 : Create Hibernate configuration</h4>

<p>Before creating Hibernate configuration file, we need to switch to <code>Hibernate perspective</code> in the eclipse by opening menu <code>Window > Perspective > Open Perspective > Other&hellip;</code>. Then select <code>Hibernate</code> on the perspective list.</p>

<p><img class="center" src="/images/post/2020-11-30-fig08.png"></p>

<p>Once we are in the <code>Hibernate perspective</code>, we can create Hibernate configuration from menu <code>File > Hibernate Configuration File (*.cfg.xml)</code></p>

<p><img class="center" src="/images/post/2020-11-30-fig09.png"></p>

<p>Placed the configuration file in the directory <code>src/main/java</code>, then click <code>Next</code>.</p>

<p><img class="center" src="/images/post/2020-11-30-fig10.png"></p>

<p>On the next dialog wizard, fill the configuration item according to our database specification. The database specification items to fill are database dialect, database driver, connection URL, default schema (if we want to generate for a specific schema, otherwise left it empty if we want to generate for all), username and password. On the dialog wizard, ensure to select the check box of <code>Create a console configuration</code> option.</p>

<p><img class="center" src="/images/post/2020-11-30-fig11.png"></p>

<p>In the <code>Hibernate Configurations</code> pane, the hibernate configuration that has been created should be listed in it. If the created hibernate configuration is not listed, press the <code>Refresh or Rebuild configuration</code> button in the top right corner of the pane. The generated Hibernate configuration should look like the following figure. We could expand the Database element on the Hibernate configuration to ensure we have a valid database connection.</p>

<p><img class="center" src="/images/post/2020-11-30-fig12.png"></p>

<h4>Step 4 : Run Hibernate code generation</h4>

<p>To run Hibernate code generation, ensure we select the active <code>Hibernate Configuration</code> in the Hibernate configuration pane. Then, open the menu of <code>Run > Hibernate Code Generation Configuration&hellip;</code></p>

<p><img class="center" src="/images/post/2020-11-30-fig13.png"></p>

<p>In the <code>Hibernate Code Generation Configuration</code>, fill the package where the domain class will be in.
<img class="center" src="/images/post/2020-11-30-fig14.png"></p>

<p>In the <code>Exporter</code> tab, select <code>Use Java 5 syntax</code> and <code>Generate EJB3 annotations</code>. In the exporter list option, we can select items in the list that we need. In this post we only select <code>Domain code</code> that has annotation as Hibernate mapping. Finally click <code>Apply</code> and <code>Run</code> to generate the domain code.</p>

<p><img class="center" src="/images/post/2020-11-30-fig15.png"></p>

<h3>NOTES:</h3>

<p>If the annotation does not generated in the domain class, open the <code>Hibernate Configuration</code> and edit it. Then change the <code>Hibernate Version</code> to <code>5.2</code>. Finally run again as we have done on <strong>step 4</strong>.</p>

<p><img class="center" src="/images/post/2020-11-30-fig16.png"></p>

<p><img class="center" src="/images/post/2020-11-30-fig17.png"></p>

<h1>References</h1>

<ol>
<li><a href="https://docs.jboss.org/tools/4.1.0.Final/en/hibernatetools/html_single/index.html">https://docs.jboss.org/tools/4.1.0.Final/en/hibernatetools/html_single/index.html</a></li>
<li><a href="https://stackoverflow.com/questions/50837574/annotation-not-created-when-generating-hibernate-mapping-files">https://stackoverflow.com/questions/50837574/annotation-not-created-when-generating-hibernate-mapping-files</a></li>
<li><a href="https://www.youtube.com/watch?v=KO_IdJbSJkI&amp;ab_channel=CodeJava">https://www.youtube.com/watch?v=KO_IdJbSJkI&amp;ab_channel=CodeJava</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GroovyDynamicElementReader Is Missing Import Spring Framework Source to Eclipse STS]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/03/12/groovydynamicelementreader-is-missing-import-spring-framework-source-to-eclipse-sts/"/>
    <updated>2016-03-12T15:08:34+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/03/12/groovydynamicelementreader-is-missing-import-spring-framework-source-to-eclipse-sts</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/logo/spring.png">
Sometime for some reasons when dealing with open source technology we have interest to download the full source code of the frameworks we use. Either for customization, extending them or just for having a look to have more knowledge how exactly they work.</p>

<p><a href="https://spring.io/">Spring</a> is a popular framework in Java world. It&rsquo;s one of my favorite framework in Java. At the time of this blog post, I have just grabbed the source of it from <a href="https://github.com/spring-projects/spring-framework">github repository</a>. The source code is fantastic. Nice coding style, project structure, build tool and of course its documentations. While following the guidance to build and import to <a href="https://spring.io/tools">Spring Tool Suite</a>, I got an error on <code>spring-beans-groovy</code> project in <code>GroovyBeanDefinitionReader.java</code>. Navigating to the errors, STS seems try to find a class <code>GroovyDynamicElementReader</code> but not found.</p>

<p><img class="center" src="/images/post/2016-03-12-pic01.png"></p>

<p> Honestly I have no any experience with groovy before. When I try to drill through <code>spring-beans-groovy/src/main/groovy/org/springframework/beans/factory/groovy</code>, finally get a clue <code>GroovyDynamicElementReader.groovy</code>.</p>

<p>Installing <a href="https://github.com/groovy/groovy-eclipse/wiki">Groovy Eclipse</a> seems solve the problem.</p>

<p><img class="center" src="/images/post/2016-03-12-pic02.png"></p>

<p>In case you have the same problem as what I got, just ensure you have <a href="https://github.com/groovy/groovy-eclipse/wiki">Groovy Eclipse</a> on your eclipse base IDE.</p>

<h3>Reference</h3>


<ol>
<li>https://github.com/groovy/groovy-eclipse/wiki</li>
<li>http://blog.csdn.net/zlx510tsde/article/details/46241675</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unsupported IClasspathEntry in Eclipse-STS]]></title>
    <link href="http://neutrofoton.github.io/blog/2013/08/30/unsupported-iclasspathentry-in-eclipse-sts/"/>
    <updated>2013-08-30T14:48:31+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2013/08/30/unsupported-iclasspathentry-in-eclipse-sts</id>
    <content type="html"><![CDATA[<p>I often got annoying pup up error message. An internal error occurred during updating Maven project. The message was <code>Unsupported IClasspathEntry kind=… </code></p>

<p>Googling for that problem finally got a trick how to resolve it.</p>

<ol>
<li>Right-click on your project, select <code>Maven > Disable Maven Nature</code></li>
<li>
Open your terminal, go to your project folder and do
<figure class='code'><figcaption><span>clean eclipse cache</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn eclipse:clean
</span></code></pre></td></tr></table></div></figure>
</li>
<li>
Right click on your Project and select <code>Configure > Convert into Maven Project</code>
</li>

</ol>


<p>After converting into maven project, I can update my maven project and everything running well :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generic Singleton Pattern in Java]]></title>
    <link href="http://neutrofoton.github.io/blog/2013/08/29/generic-singleton-pattern-in-java/"/>
    <updated>2013-08-29T14:38:32+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2013/08/29/generic-singleton-pattern-in-java</id>
    <content type="html"><![CDATA[<p>In my previous post about singleton pattern in C#, it is very nice flexible singleton code which make us be able to create a singleton instance of a non singleton class. But we can still be able to create a non singleton instance of the target class.</p>

<p>In this post I want to implement it in Java. As far as I know even though both C# and Java have generic feature, generic in C# quite different from the one in Java. While converting of what I did about generic singleton in C# to Java, I feel that the way I do in Java is not as elegant as in C#. The following code is the generic singleton code I write in Java.</p>

<pre><code class="java generic singleton">import java.util.HashMap;
import java.util.Map;

public class Singleton{

    private static final Singleton instance = new Singleton();

    @SuppressWarnings( "rawtypes")
    private Map&lt;Class,Object&gt; mapHolder = new HashMap&lt;Class,Object&gt;();

    private Singleton() {}


    @SuppressWarnings("unchecked")
    public static &lt;T&gt; T getInstance(Class&lt;T&gt; classOf) throws InstantiationException, IllegalAccessException {


        synchronized(instance){

            if(!instance.mapHolder.containsKey(classOf)){

                T obj = classOf.newInstance();  

                instance.mapHolder.put(classOf, obj);
            }

            return (T)instance.mapHolder.get(classOf);          

        }

    }

    public Object clone() throws CloneNotSupportedException {
        throw new CloneNotSupportedException();
    }   
}
</code></pre>

<p>The following code show how to use the generic singleton class. It’s quite similar to the C# version.</p>

<pre><code class="java sample">public class Starter {

    /**
     * @param args
     * @throws InvocationTargetException
     * @throws IllegalArgumentException
     * @throws SecurityException
     * @throws NoSuchMethodException
     * @throws IllegalAccessException
     * @throws InstantiationException
     */
    public static void main(String[] args) throws InstantiationException, IllegalAccessException  {
        // TODO Auto-generated method stub

        Employee emp1 = new Employee();
        emp1.setName("neutro");

        Employee emp2 = new Employee();
        emp2.setName("neutro");

        boolean isEqual = emp1.equals(emp1);

        isEqual = emp1==emp2;       
        System.out.println("Is Equal Test1 = "+ isEqual);

        Singleton.getInstance(Employee.class).setName("Hello");
        emp1 = Singleton.getInstance(Employee.class);
        emp2 = Singleton.getInstance(Employee.class);

        isEqual = emp1==emp2;       
        System.out.println("Is Equal Test2 = "+ isEqual);

        System.out.println("emp1 = "+ emp1.getName());
        System.out.println("emp2 = "+ emp2.getName());


        Singleton.getInstance(Departement.class).setName("Information Technology");
        Departement dpt1 = Singleton.getInstance(Departement.class);
        Departement dpt2 = Singleton.getInstance(Departement.class);

        isEqual = dpt1==dpt2;       
        System.out.println("Is Equal Test3 = "+ isEqual);

        System.out.println("dpt1 = "+ dpt1.getName());
        System.out.println("dpt2 = "+ dpt2.getName());

    }
}
</code></pre>

<p>Again, if we see from the sample code above it seems that generic singleton in C# is more elegant than in Java.
The main thing that I should do is I have to use <code>HashMap</code> collection to hold any instance of what that want to be as singleton and reuse for the future need in the life cycle of my application.</p>

<p>Anyway, if you have better and much more elegant solution how to implement generic singleton pattern in Java I am very appreciate for any suggestion. Finally I would like to thank you very much for visiting and reading my blog, and have a nice day.</p>

<h3>Update March 11, 2016</h3>


<blockquote><p>If you want to the java singleton above, please ensure you have remove / clean up method to clean up <code>HashMap</code> contents if the singleton objects are not needed anymore. At least at the end of application lifecycle, the <code>HashMap</code> and its contents should be removed completely from memory.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Tomcat in OS X 10.8 Mountain Lion]]></title>
    <link href="http://neutrofoton.github.io/blog/2012/09/14/install-tomcat-in-os-x-10-dot-8-mountain-lion/"/>
    <updated>2012-09-14T12:36:00+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2012/09/14/install-tomcat-in-os-x-10-dot-8-mountain-lion</id>
    <content type="html"><![CDATA[<p>In this blog post will show us about step installing Apache Tomcat on OS X Mountain Lion. I assume we already have Java installed on our machine. The first step is downloading Tomcat binary distribution in <a href="http://tomcat.apache.org/">Tomcat website</a>. In this case I use version 7.0.30.</p>

<p>Extract the downloaded binary distribution onto <code>~/Download/apache-tomcat-7.0.30</code>.
Create directory in <code>/usr/local</code> if we don’t have it yet.</p>

<pre><code class="bash tomcat installation">sudo mkdir /usr/local
</code></pre>

<p>Move <code>~/Download/apache-tomcat-7.0.30 </code> to <code>/usr/local</code></p>

<pre><code class="bash tomcat installation">sudo mv ~/Downloads/apache-tomcat-7.0.30 /usr/local
</code></pre>

<p>To make it easy to replace this release with future releases, we are going to create a symbolic link that we are going to use when referring to Tomcat. Then we also will change owner and make script executable</p>

<pre><code class="bash tomcat installation">sudo ln -s /usr/local/apache-tomcat-7.0.30/ /Library/Tomcat
sudo chown -R neutrocode /Library/Tomcat
sudo chmod +x /Library/Tomcat/bin/*.sh
</code></pre>

<p>The next step is creating user for tomcat admin by editing <code>tomcat-user.xml</code>
<code>bash tomcat installation
vi /Library/Tomcat/conf/tomcat-users.xml
</code></p>

<pre><code class="xml tomcat-users.xml">&lt;role rolename="admin-gui"/&gt;
&lt;role rolename="admin-script"/&gt;
&lt;role rolename="manager-gui"/&gt;
&lt;role rolename="manager-script"/&gt;
&lt;role rolename="manager-jmx"/&gt;
&lt;role rolename="manager-status"/&gt;

&lt;user username="admin" password="password" roles="admin-gui,admin-script" /&gt;
&lt;user username="manager" password="password" roles="manager-gui,manager-script,manager-jmx,manager-status" /&gt;
</code></pre>

<p>Add the following text in current user profile .bash_profile
<figure class='code'><figcaption><span>.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">CATALINA_HOME</span><span class="o">=</span>/Library/Tomcat
</span><span class='line'><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;export <span class="nv">PATH</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Start the server with the following command :
<code>bash start tomcat
$CATALINA_HOME/bin/catalina.sh start
</code>
or</p>

<pre><code class="bash start tomcat">$CATALINA_HOME/bin/startup.sh
</code></pre>

<p><img class="center" src="/images/post/2012-09-14-tomcat.png"></p>

<p>Stop the server with the following command :
<code>bash start tomcat
$CATALINA_HOME/bin/catalina.sh stop
</code>
or</p>

<pre><code class="bash start tomcat">$CATALINA_HOME/bin/shutdown.sh
</code></pre>
]]></content>
  </entry>
  
</feed>
