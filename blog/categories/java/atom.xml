<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | neutrofoton]]></title>
  <link href="http://neutrofoton.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://neutrofoton.github.io/"/>
  <updated>2016-09-19T23:16:11+07:00</updated>
  <id>http://neutrofoton.github.io/</id>
  <author>
    <name><![CDATA[neutro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GroovyDynamicElementReader Is Missing Import Spring Framework Source to Eclipse STS]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/03/12/groovydynamicelementreader-is-missing-import-spring-framework-source-to-eclipse-sts/"/>
    <updated>2016-03-12T15:08:34+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/03/12/groovydynamicelementreader-is-missing-import-spring-framework-source-to-eclipse-sts</id>
    <content type="html"><![CDATA[<p>Sometime for some reasons when dealing with open source technology we have interest to download the full source code of the frameworks we use. Either for customization, extending them or just for having a look to have more knowledge how exactly they work.</p>

<p><a href="https://spring.io/">Spring</a> is a popular framework in Java world. It&rsquo;s one of my favorite framework in Java. At the time of this blog post, I have just grabbed the source of it from <a href="https://github.com/spring-projects/spring-framework">github repository</a>. The source code is fantastic. Nice coding style, project structure, build tool and of course its documentations. While following the guidance to build and import to <a href="https://spring.io/tools">Spring Tool Suite</a>, I got an error on <code>spring-beans-groovy</code> project in <code>GroovyBeanDefinitionReader.java</code>. Navigating to the errors, STS seems try to find a class <code>GroovyDynamicElementReader</code> but not found.</p>

<p><img class="center" src="/images/post/2016-03-12-pic01.png"></p>

<p> Honestly I have no any experience with groovy before. When I try to drill through <code>spring-beans-groovy/src/main/groovy/org/springframework/beans/factory/groovy</code>, finally get a clue <code>GroovyDynamicElementReader.groovy</code>.</p>

<p>Installing <a href="https://github.com/groovy/groovy-eclipse/wiki">Groovy Eclipse</a> seems solve the problem.</p>

<p><img class="center" src="/images/post/2016-03-12-pic02.png"></p>

<p>In case you have the same problem as what I got, just ensure you have <a href="https://github.com/groovy/groovy-eclipse/wiki">Groovy Eclipse</a> on your eclipse base IDE.</p>

<h3>Reference</h3>


<ol>
<li>https://github.com/groovy/groovy-eclipse/wiki</li>
<li>http://blog.csdn.net/zlx510tsde/article/details/46241675</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unsupported IClasspathEntry in Eclipse-STS]]></title>
    <link href="http://neutrofoton.github.io/blog/2013/08/30/unsupported-iclasspathentry-in-eclipse-sts/"/>
    <updated>2013-08-30T14:48:31+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2013/08/30/unsupported-iclasspathentry-in-eclipse-sts</id>
    <content type="html"><![CDATA[<p>I often got annoying pup up error message. An internal error occurred during updating Maven project. The message was <code>Unsupported IClasspathEntry kind=… </code></p>

<p>Googling for that problem finally got a trick how to resolve it.</p>

<ol>
<li>Right-click on your project, select <code>Maven > Disable Maven Nature</code></li>
<li>
Open your terminal, go to your project folder and do
<figure class='code'><figcaption><span>clean eclipse cache</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn eclipse:clean
</span></code></pre></td></tr></table></div></figure>
</li>
<li>
Right click on your Project and select <code>Configure > Convert into Maven Project</code>
</li>

</ol>


<p>After converting into maven project, I can update my maven project and everything running well :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generic Singleton Pattern in Java]]></title>
    <link href="http://neutrofoton.github.io/blog/2013/08/29/generic-singleton-pattern-in-java/"/>
    <updated>2013-08-29T14:38:32+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2013/08/29/generic-singleton-pattern-in-java</id>
    <content type="html"><![CDATA[<p>In my previous post about singleton pattern in C#, it is very nice flexible singleton code which make us be able to create a singleton instance of a non singleton class. But we can still be able to create a non singleton instance of the target class.</p>

<p>In this post I want to implement it in Java. As far as I know even though both C# and Java have generic feature, generic in C# quite different from the one in Java. While converting of what I did about generic singleton in C# to Java, I feel that the way I do in Java is not as elegant as in C#. The following code is the generic singleton code I write in Java.</p>

<pre><code class="java generic singleton">import java.util.HashMap;
import java.util.Map;

public class Singleton{

    private static final Singleton instance = new Singleton();

    @SuppressWarnings( "rawtypes")
    private Map&lt;Class,Object&gt; mapHolder = new HashMap&lt;Class,Object&gt;();

    private Singleton() {}


    @SuppressWarnings("unchecked")
    public static &lt;T&gt; T getInstance(Class&lt;T&gt; classOf) throws InstantiationException, IllegalAccessException {


        synchronized(instance){

            if(!instance.mapHolder.containsKey(classOf)){

                T obj = classOf.newInstance();  

                instance.mapHolder.put(classOf, obj);
            }

            return (T)instance.mapHolder.get(classOf);          

        }

    }

    public Object clone() throws CloneNotSupportedException {
        throw new CloneNotSupportedException();
    }   
}
</code></pre>

<p>The following code show how to use the generic singleton class. It’s quite similar to the C# version.</p>

<pre><code class="java sample">public class Starter {

    /**
     * @param args
     * @throws InvocationTargetException
     * @throws IllegalArgumentException
     * @throws SecurityException
     * @throws NoSuchMethodException
     * @throws IllegalAccessException
     * @throws InstantiationException
     */
    public static void main(String[] args) throws InstantiationException, IllegalAccessException  {
        // TODO Auto-generated method stub

        Employee emp1 = new Employee();
        emp1.setName("neutro");

        Employee emp2 = new Employee();
        emp2.setName("neutro");

        boolean isEqual = emp1.equals(emp1);

        isEqual = emp1==emp2;       
        System.out.println("Is Equal Test1 = "+ isEqual);

        Singleton.getInstance(Employee.class).setName("Hello");
        emp1 = Singleton.getInstance(Employee.class);
        emp2 = Singleton.getInstance(Employee.class);

        isEqual = emp1==emp2;       
        System.out.println("Is Equal Test2 = "+ isEqual);

        System.out.println("emp1 = "+ emp1.getName());
        System.out.println("emp2 = "+ emp2.getName());


        Singleton.getInstance(Departement.class).setName("Information Technology");
        Departement dpt1 = Singleton.getInstance(Departement.class);
        Departement dpt2 = Singleton.getInstance(Departement.class);

        isEqual = dpt1==dpt2;       
        System.out.println("Is Equal Test3 = "+ isEqual);

        System.out.println("dpt1 = "+ dpt1.getName());
        System.out.println("dpt2 = "+ dpt2.getName());

    }
}
</code></pre>

<p>Again, if we see from the sample code above it seems that generic singleton in C# is more elegant than in Java.
The main thing that I should do is I have to use <code>HashMap</code> collection to hold any instance of what that want to be as singleton and reuse for the future need in the life cycle of my application.</p>

<p>Anyway, if you have better and much more elegant solution how to implement generic singleton pattern in Java I am very appreciate for any suggestion. Finally I would like to thank you very much for visiting and reading my blog, and have a nice day.</p>

<h3>Update March 11, 2016</h3>


<blockquote><p>If you want to the java singleton above, please ensure you have remove / clean up method to clean up <code>HashMap</code> contents if the singleton objects are not needed anymore. At least at the end of application lifecycle, the <code>HashMap</code> and its contents should be removed completely from memory.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Tomcat in OS X 10.8 Mountain Lion]]></title>
    <link href="http://neutrofoton.github.io/blog/2012/09/14/install-tomcat-in-os-x-10-dot-8-mountain-lion/"/>
    <updated>2012-09-14T12:36:00+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2012/09/14/install-tomcat-in-os-x-10-dot-8-mountain-lion</id>
    <content type="html"><![CDATA[<p>In this blog post will show us about step installing Apache Tomcat on OS X Mountain Lion. I assume we already have Java installed on our machine. The first step is downloading Tomcat binary distribution in <a href="http://tomcat.apache.org/">Tomcat website</a>. In this case I use version 7.0.30.</p>

<p>Extract the downloaded binary distribution onto <code>~/Download/apache-tomcat-7.0.30</code>.
Create directory in <code>/usr/local</code> if we don’t have it yet.</p>

<pre><code class="bash tomcat installation">sudo mkdir /usr/local
</code></pre>

<p>Move <code>~/Download/apache-tomcat-7.0.30 </code> to <code>/usr/local</code></p>

<pre><code class="bash tomcat installation">sudo mv ~/Downloads/apache-tomcat-7.0.30 /usr/local
</code></pre>

<p>To make it easy to replace this release with future releases, we are going to create a symbolic link that we are going to use when referring to Tomcat. Then we also will change owner and make script executable</p>

<pre><code class="bash tomcat installation">sudo ln -s /usr/local/apache-tomcat-7.0.30/ /Library/Tomcat
sudo chown -R neutrocode /Library/Tomcat
sudo chmod +x /Library/Tomcat/bin/*.sh
</code></pre>

<p>The next step is creating user for tomcat admin by editing <code>tomcat-user.xml</code>
<code>bash tomcat installation
vi /Library/Tomcat/conf/tomcat-users.xml
</code></p>

<pre><code class="xml tomcat-users.xml">&lt;role rolename="admin-gui"/&gt;
&lt;role rolename="admin-script"/&gt;
&lt;role rolename="manager-gui"/&gt;
&lt;role rolename="manager-script"/&gt;
&lt;role rolename="manager-jmx"/&gt;
&lt;role rolename="manager-status"/&gt;

&lt;user username="admin" password="password" roles="admin-gui,admin-script" /&gt;
&lt;user username="manager" password="password" roles="manager-gui,manager-script,manager-jmx,manager-status" /&gt;
</code></pre>

<p>Add the following text in current user profile .bash_profile
<figure class='code'><figcaption><span>.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">CATALINA_HOME</span><span class="o">=</span>/Library/Tomcat
</span><span class='line'><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;export <span class="nv">PATH</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Start the server with the following command :
<code>bash start tomcat
$CATALINA_HOME/bin/catalina.sh start
</code>
or</p>

<pre><code class="bash start tomcat">$CATALINA_HOME/bin/startup.sh
</code></pre>

<p><img class="center" src="/images/post/2012-09-14-tomcat.png"></p>

<p>Stop the server with the following command :
<code>bash start tomcat
$CATALINA_HOME/bin/catalina.sh stop
</code>
or</p>

<pre><code class="bash start tomcat">$CATALINA_HOME/bin/shutdown.sh
</code></pre>
]]></content>
  </entry>
  
</feed>
