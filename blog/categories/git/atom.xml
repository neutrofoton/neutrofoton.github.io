<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | neutrofoton]]></title>
  <link href="http://neutrofoton.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://neutrofoton.github.io/"/>
  <updated>2021-04-19T10:05:49+07:00</updated>
  <id>http://neutrofoton.github.io/</id>
  <author>
    <name><![CDATA[neutro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WinMerge and DiffMerge as Git Diff Merge Tool]]></title>
    <link href="http://neutrofoton.github.io/blog/2017/05/10/winmerge-and-diffmerge-as-git-diff-merge-tool/"/>
    <updated>2017-05-10T10:01:23+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2017/05/10/winmerge-and-diffmerge-as-git-diff-merge-tool</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/logo/git.png">
On software development while working with source control, it&rsquo;s inevitable sometime we get our code conflicts with other, since we work in a team. There are many diff and merge tools out there and some of them can be integrated with with Git. In this post I just want to note what I did in my development machine (Windows 7 and macOS Sierra)</p>

<h2>DiffMerge on macOS</h2>

<p>For my macOS development machine I use <a href="http://www.sourcegear.com/diffmerge/">DiffMerge</a>. Actually DiffMerge is not only available for macOS, but also for Windows and Linux. So we can use it as Git diff merge tool as well on Windows and Linux. To configure Git to use DiffMerge can be done by running the following command via terminal.</p>

<pre><code class="bash">
$ git config --global mergetool.prompt false
$ git config --global mergetool.keepBackup false
$ git config --global mergetool.keepTemporaries false

$ git config --global diff.tool diffmerge
$ git config --global difftool.diffmerge.cmd 'diffmerge "$LOCAL" "$REMOTE"'

$ git config --global merge.tool diffmerge
$ git config --global mergetool.diffmerge.cmd 'diffmerge --merge --result="$MERGED" "$LOCAL" "$(if test -f "$BASE"; then echo "$BASE"; else echo "$LOCAL"; fi)" "$REMOTE"'
$ git config --global mergetool.diffmerge.trustExitCode true
</code></pre>

<p>The command will add the following config code in global <code>.gitconfig</code></p>

<pre><code>[mergetool]
  prompt = false
  keepBackup = false
  keepTemporaries = false

[diff]
    tool = diffmerge

[difftool "diffmerge"]
    cmd = diffmerge \"$LOCAL\" \"$REMOTE\"

[merge]
    tool = diffmerge

[mergetool "diffmerge"]
    cmd = "diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$(if test -f \"$BASE\"; then echo \"$BASE\"; else echo \"$LOCAL\"; fi)\" \"$REMOTE\""
    trustExitCode = true
</code></pre>

<p>We can also directly edit the <code>.gitconfig</code> and manually add the config code.</p>

<h2>WinMerge 2.x on Windows</h2>

<p><a href="http://winmerge.org/">WinMerge</a> is an open source differencing and merging tool for Windows. It can compare both folders and files, presenting differences in a visual text format that is easy to understand and handle.
At the time of writing this blog post, WinMerge 3 is still in progress of development and no release yet. WinMerge 3 will be modern compare/synchronization tool. It will be based on Qt library and cross-platform. You can use the same tool in Windows and in Linux.
So for now and so on in this blog post, WinMerge term means WinMerge 2.x.</p>

<p>After installing WinMerge, to configure it as diff and merge tool of Git is by adding /editing the following config setting to <code>C:\Users\{UserName}\.gitconfig</code></p>

<pre><code class="bash">
[mergetool]
  prompt = false
  keepBackup = false
  keepTemporaries = false

[merge]
  tool = winmerge

[mergetool "winmerge"]
  name = WinMerge
  trustExitCode = true
  cmd = "/c/Program\\ Files\\ \\(x86\\)/WinMerge/WinMergeU.exe" -u -e -dl \"Local\" -dr \"Remote\" $LOCAL $REMOTE $MERGED

[diff]
  tool = winmerge

[difftool "winmerge"]
  name = WinMerge
  trustExitCode = true
  cmd = "/c/Program\\ Files\\ \\(x86\\)/WinMerge/WinMergeU.exe" -u -e $LOCAL $REMOTE
</code></pre>

<p>The config above also can be configured by Git bash shell with <code>&ndash;global</code> parameter instead of manual edit via text editor.</p>

<p>Now, whenever you want it to launch diffs just use difftool[1]:</p>

<pre><code class="bash"># diff the local file.m against the checked-in version
$ git difftool file.m

# diff the local file.m against the version in some-feature-branch
$ git difftool some-feature-branch file.m

# diff the file.m from the Build-54 tag to the Build-55 tag
$ git difftool Build-54..Build-55 file.m
</code></pre>

<p>To resolve merge conflicts
<code>
$ git mergetool
</code></p>

<h2>References</h2>

<ol>
<li><a href="http://twobitlabs.com/2011/08/install-diffmerge-git-mac-os-x/">http://twobitlabs.com/2011/08/install-diffmerge-git-mac-os-x/</a></li>
<li><a href="http://winmerge.org/">http://winmerge.org/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import Existing Git Repository to Another]]></title>
    <link href="http://neutrofoton.github.io/blog/2017/04/17/import-existing-git-repository-to-another/"/>
    <updated>2017-04-17T16:44:53+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2017/04/17/import-existing-git-repository-to-another</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/logo/git.png"></p>

<p>While working with git, we may need to import source code from an existing git repository to our working copy. Merging it and pushing to origin master.
The scenario that I had was :</p>

<p><br/></p>

<ul>
<li> I have a project template that I store on a git repository. Let say the url is <code>http://server/git/template.git</code>
   <img class="center" src="/images/post/2017-04-17-template.png">
</li>
<li>
I have another git repository with url <code>http://server/git/project1.git</code>
   <img class="center" src="/images/post/2017-04-17-project1.png">
</li>
</ul>


<p>What I need from the two repositories are importing all contents (libraries, sources, etc) from <code>template</code> repository into my <code>project1</code> working copy. Since I don&rsquo;t want to coding from zero. To get into what I need, here are the steps.</p>

<pre><code class="bash"># git clone project1
$ git clone http://server/git/project1.git
$ cd project1

# add remote url named REMOTE.TEMPLATE
$ git remote add REMOTE.TEMPLATE http://server/git/template.git

# fetch from REMOTE.TEMPLATE remote url
$ git fetch REMOTE.TEMPLATE

# checkout REMOTE.TEMPLATE/master and create a new branch called TEMPLATE
$ git checkout -b TEMPLATE REMOTE.TEMPLATE/master

#switch back to master branch
$ git checkout master

# merge TEMPLATE brach to master branch
$ git merge TEMPLATE

# commit changes
$ git commit
</code></pre>

<p>The next step is checking the merge result on our working copy of master branch.
If what we have been imported already there, now we can remove the remote URL of REMOTE.TEMPLATE
and TEMPLATE branch to get rid of the extra branch before pushing.</p>

<pre><code class="bash"># remove REMOTE.TEMPLATE remote address
$ git remote rm REMOTE.TEMPLATE

# remove template branch. It is useful to get rid of the extra branch before pushing
$ git branch -d TEMPLATE

# push to remote origin/master
$ git push
</code></pre>

<h2>References</h2>

<ol>
<li><a href="http://stackoverflow.com/questions/1683531/how-to-import-existing-git-repository-into-another">http://stackoverflow.com/questions/1683531/how-to-import-existing-git-repository-into-another</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working With Multiple Github Account on a Computer]]></title>
    <link href="http://neutrofoton.github.io/blog/2017/03/26/working-with-multiple-github-account-on-a-computer/"/>
    <updated>2017-03-26T23:47:22+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2017/03/26/working-with-multiple-github-account-on-a-computer</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/logo/git.png">
Source control is one of a basic need for software development, especially when we work on a team. Git is one of popular distributed source control. Working with multiple github account on the same computer need a few tricky way. Let&rsquo;s assume we have cloned the repository from github to local computer. The following ways are the simple ways I got on internet.</p>

<h2>Change Remote URL to HTTPS</h2>

<p>This way is by changing the remote URL to HTTPS with the following format.</p>

<pre><code class="bash">$ git remote set-url origin https://USERNAME@github.com/USERNAME/PROJECTNAME.git
</code></pre>

<p>Then do normal git operation such as <code>commit</code>, <code>push</code> etc.
To ensure that the commits appear as performed by USERNAME, we can configure the username and email on our working directory.</p>

<pre><code class="bash">$ git config user.name USERNAME
$ git config user.email USERNAME@example.com
</code></pre>

<h2>Multiple SSH Key</h2>

<p>The other way is by using multiple SSH key. <a href="https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574">Here</a> is the complete tutorial by <a href="https://twitter.com/jeffrey_way">Jeffrey Way</a></p>

<h2>References</h2>

<ol>
<li><a href="http://stackoverflow.com/questions/3860112/multiple-github-accounts-on-the-same-computer">http://stackoverflow.com/questions/3860112/multiple-github-accounts-on-the-same-computer</a></li>
<li><a href="https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574">https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reset Git Credential on OS X Keychain]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/11/09/reset-git-credential-on-os-x-keychain/"/>
    <updated>2016-11-09T12:40:34+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/11/09/reset-git-credential-on-os-x-keychain</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/logo/git.png">
This post basically just a note for my self. In case I got the same condition in the next, it can help me to remember what I did in the past.</p>

<p>I got a condition which I have just changed my git password. Surely I cannot pull or push since my local credential was not valid anymore. When I run <code>git config &ndash;list</code>, I believe my git password stored on OS X Keychain. The simple way I do was running a command via terminal :</p>

<pre><code class="bash">$ git config credential.helper osxkeychain
</code></pre>

<p>I was then prompted to input my username and password. By inputing my username and new password everything back to normal.</p>

<p>If you want it to apply globally just append parameter <code> &ndash;global </code> to the command.
<code>bash
$ git config --global credential.helper osxkeychain
</code></p>

<h2>References</h2>

<ol>
<li><a href="http://stackoverflow.com/questions/20195304/how-to-update-password-for-git">http://stackoverflow.com/questions/20195304/how-to-update-password-for-git</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
