<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Macos | neutrofoton]]></title>
  <link href="http://neutrofoton.github.io/blog/categories/macos/atom.xml" rel="self"/>
  <link href="http://neutrofoton.github.io/"/>
  <updated>2018-09-16T23:35:55+07:00</updated>
  <id>http://neutrofoton.github.io/</id>
  <author>
    <name><![CDATA[neutro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configure PHP and Virtual Host macOS High Sierra]]></title>
    <link href="http://neutrofoton.github.io/blog/2018/09/16/configure-php-and-virtual-host-macos-high-sierra/"/>
    <updated>2018-09-16T08:48:43+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2018/09/16/configure-php-and-virtual-host-macos-high-sierra</id>
    <content type="html"><![CDATA[<p>Apache is pre installed on macOS High Sierra. We just need to run its service with the following command to activate it.</p>

<pre><code class="bash">$ sudo apachectl start
</code></pre>

<p>Then we just open <code><a href="http://localhost">http://localhost</a></code> via browser. Apache will display a default HTML page come with it.</p>

<h2>Activating PHP Module</h2>

<p>High Sierra also comes with PHP 7. So we don&rsquo;t need to install it manually. To activate PHP module</p>

<ol>
<li>Edit <code>/etc/apache2/httpd.conf</code></li>
<li>Uncomment / remove remark of
<code>#LoadModule php7_module libexec/apache2/libphp7.so</code></li>
<li>Save it and restart apache using
 <code>bash
     $ sudo apachectl restart
</code></li>
</ol>


<p>After applying the steps above, the php module should be activated and ready to use. In this post we will test it after configuring virtual host.</p>

<h2>Configuring Virtual Host</h2>

<p>The steps of configuring apache virtual host are :</p>

<ol>
<li><p>Enabling virtual host configuration in apache config by editing
<code>/etc/apache2/httpd.conf</code>.</p>

<pre><code class="` bash"> $ sudo nano /etc/apache2/httpd.conf
</code></pre></li>
<li><p>Uncomment the section
 <code>Include /private/etc/apache2/extra/httpd-vhosts.conf</code>, then save it.</p></li>
<li><p>Create site directory.
 As an example in this post, let&rsquo;s create a <code>Site</code> folder in home directory called </code>/Users/USERNAME/Sites</code>. Our website sample directory will be put in it, let&rsquo;s create a directory called </code>/Users/USERNAME/Sites/neutro.io</code> and create an <code>/Users/USERNAME/Sites/neutro.io/index.php</code> with simple PHP syntax.</p>

<pre><code class="php"> &lt;?php
 phpinfo();
 ?&gt;
</code></pre></li>
<li><p>Create virtual host configuration by editing the virtual host config</p>

<pre><code class="bash"> $ sudo nano /etc/apache2/extra/httpd-vhosts.conf
</code></pre>

<p> The following code is an example of virtual host with domain name <code>neutro.io</code></p>

<pre><code class="` xml"> &lt;VirtualHost *:80&gt;
     ServerName neutro.io
     ServerAlias www.neutro.io
     DocumentRoot "/Users/neutro/Sites/neutro.io"

 &lt;Directory /Users/neutro/Sites/neutro.io&gt;
         Options Indexes FollowSymLinks
         #Options All Indexes FollowSymLinks
         AllowOverride None
         Require all granted
 &lt;/Directory&gt;


     ErrorLog "/private/var/log/apache2/neutro.io-error_log"
     CustomLog "/private/var/log/apache2/neutro.io-access_log" common
     ServerAdmin web@neutro.io
 &lt;/VirtualHost&gt;
</code></pre>

<p> In this example, we create a <code>neutro.io</code> virtual host that refers to <code>/Users/neutro/Sites/neutro.io</code> as physical directory.</p></li>
<li><p>Register domain for localhost</p>

<p>Since we use <code>neutro.io</code> as domain for localhost, we need to add the domain and <code>www</code> alias to resolve to the localhost address by editing</p>

<pre><code class="bash">    $ sudo nano /etc/hosts
</code></pre>

<p>and add the following line</p>

<pre><code>    127.0.0.1   neutro.io   www.neutro.io
</code></pre></li>
<li><p>Restart apache</p>

<pre><code class="` bash"> $ sudo apachectl restart
</code></pre></li>
</ol>


<p>When we open in browser <code><a href="http://neutro.io">http://neutro.io</a></code>, we should get a page that display PHP info.</p>

<h2>Losing Default Localhost</h2>

<p>After configuring the virtual host, we may lose the previous default localhost that points to <code>/Library/WebServer/Documents/</code> directory. We may get a 403 Forbidden Error when visiting <code><a href="http://localhost">http://localhost</a></code>. To get around this, we need to add in a vhost for localhost and declare this vhost before any of the others. The following code is our new Virtual host after adding config for localhost.</p>

<pre><code class="xml">&lt;VirtualHost *:80&gt;
    ServerName localhost
    DocumentRoot /Library/WebServer/Documents/
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerName neutro.io
    ServerAlias www.neutro.io
    DocumentRoot "/Users/neutro/Sites/neutro.io"

   &lt;Directory /Users/neutro/Sites/neutro.io&gt;
        Options Indexes FollowSymLinks
        #Options All Indexes FollowSymLinks
        AllowOverride None
        Require all granted
   &lt;/Directory&gt;


    ErrorLog "/private/var/log/apache2/neutro.io-error_log"
    CustomLog "/private/var/log/apache2/neutro.io-access_log" common
    ServerAdmin web@neutro.io
&lt;/VirtualHost&gt;
</code></pre>

<p>Restart apache and open <code><a href="http://localhost">http://localhost</a></code> in browser.</p>

<h2>References</h2>

<ol>
<li><a href="https://websitebeaver.com/set-up-localhost-on-macos-high-sierra-apache-mysql-and-php-7-with-sslhttps">https://websitebeaver.com/set-up-localhost-on-macos-high-sierra-apache-mysql-and-php-7-with-sslhttps</a></li>
<li><a href="https://coolestguidesontheplanet.com/set-up-virtual-hosts-in-apache-on-macos-high-sierra-10-13/">https://coolestguidesontheplanet.com/set-up-virtual-hosts-in-apache-on-macos-high-sierra-10-13/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PPTP on macOS]]></title>
    <link href="http://neutrofoton.github.io/blog/2017/11/22/pptp-on-macos/"/>
    <updated>2017-11-22T06:59:38+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2017/11/22/pptp-on-macos</id>
    <content type="html"><![CDATA[<p>One day I need to connect my macOS to a network of client of the company I work for via <a href="https://en.wikipedia.org/wiki/Point-to-Point_Tunneling_Protocol">Point-to-Point Tunneling Protocol (PPTP)</a> VPN. Unfortunately <a href="https://support.apple.com/en-us/HT206844">Apple removed PPTP support on macOS Sierra</a>, so I had to find an alternative for that. Some of them I found are third parties application that need a one time buying or annual subscription. In fact, Apple just remove the user interface option for PPTP VPN, meanwhile the libraries of it are still available on Sierre.</p>

<p>Since the libraries of PPTP are still available on Sierra, theoritically we should be able to call the libraries via terminal. Finally I found 3 blogs that write about PPTP protocol on macos and I put them in a reference section in this blog. Basically the three of them use the same technique that&rsquo;s write a script contains configuration of PPTP that&rsquo;s put in <code>/etc/ppp/peers/</code> and call it via <code>pppd</code> command via terminal.</p>

<p>First of all create a file called <code>/etc/ppp/peers/pptpvpn-client1</code></p>

<pre><code class="bash">$ sudo /etc/ppp/peers/pptpvpn-client1
</code></pre>

<p>Fill the <code>pptpvpn-client1</code> that contains configuration that pppd daemon will refer to connect.</p>

<pre><code class="bash /etc/ppp/peers/pptpvpn-client1">
plugin PPTP.ppp
noauth
# logfile /tmp/ppp.log
remoteaddress "xxx.xxx.xxx.xxx"
user "xxxxxx"
password "xxxxxxxx"
redialcount 1
redialtimer 5
idle 1800
# mru 1368
# mtu 1368
receive-all
novj 0:0
ipcp-accept-local
ipcp-accept-remote
# noauth
refuse-eap
refuse-pap
refuse-chap-md5
hide-password
mppe-stateless
mppe-128
# require-mppe-128
looplocal
nodetach
# ms-dns 8.8.8.8
usepeerdns
# ipparam gwvpn
defaultroute
debug
</code></pre>

<p>Then open terminal and call
<code>bash
$ sudo pppd call pptpvpn-client1
</code></p>

<p>If you cannot connect with the configuration code I use, you can check the error messages displayed in terminal. May be some configuration items do not match with the vpn server setting you connect to.</p>

<p>If the you got no any error messages and connection established with your VPN network you can open a new tab on the terminal and try to ping to an ip address in the VPN local network.</p>

<h2>References</h2>

<ol>
<li><a href="https://smallhacks.wordpress.com/2016/12/20/pptp-on-osx-sierra/">https://smallhacks.wordpress.com/2016/12/20/pptp-on-osx-sierra/</a></li>
<li><a href="https://malucelli.net/2017/05/16/pptp-vpn-on-macos-sierra/">https://malucelli.net/2017/05/16/pptp-vpn-on-macos-sierra/</a></li>
<li><a href="https://www.cts-llc.net/2017/02/21/pptp-on-osx-just-one-last-time.html">https://www.cts-llc.net/2017/02/21/pptp-on-osx-just-one-last-time.html</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WinMerge and DiffMerge as Git Diff Merge Tool]]></title>
    <link href="http://neutrofoton.github.io/blog/2017/05/10/winmerge-and-diffmerge-as-git-diff-merge-tool/"/>
    <updated>2017-05-10T10:01:23+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2017/05/10/winmerge-and-diffmerge-as-git-diff-merge-tool</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/logo/git.png">
On software development while working with source control, it&rsquo;s inevitable sometime we get our code conflicts with other, since we work in a team. There are many diff and merge tools out there and some of them can be integrated with with Git. In this post I just want to note what I did in my development machine (Windows 7 and macOS Sierra)</p>

<h2>DiffMerge on macOS</h2>

<p>For my macOS development machine I use <a href="http://www.sourcegear.com/diffmerge/">DiffMerge</a>. Actually DiffMerge is not only available for macOS, but also for Windows and Linux. So we can use it as Git diff merge tool as well on Windows and Linux. To configure Git to use DiffMerge can be done by running the following command via terminal.</p>

<pre><code class="bash">
$ git config --global mergetool.prompt false
$ git config --global mergetool.keepBackup false
$ git config --global mergetool.keepTemporaries false

$ git config --global diff.tool diffmerge
$ git config --global difftool.diffmerge.cmd 'diffmerge "$LOCAL" "$REMOTE"'

$ git config --global merge.tool diffmerge
$ git config --global mergetool.diffmerge.cmd 'diffmerge --merge --result="$MERGED" "$LOCAL" "$(if test -f "$BASE"; then echo "$BASE"; else echo "$LOCAL"; fi)" "$REMOTE"'
$ git config --global mergetool.diffmerge.trustExitCode true
</code></pre>

<p>The command will add the following config code in global <code>.gitconfig</code></p>

<pre><code>[mergetool]
  prompt = false
  keepBackup = false
  keepTemporaries = false

[diff]
    tool = diffmerge

[difftool "diffmerge"]
    cmd = diffmerge \"$LOCAL\" \"$REMOTE\"

[merge]
    tool = diffmerge

[mergetool "diffmerge"]
    cmd = "diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$(if test -f \"$BASE\"; then echo \"$BASE\"; else echo \"$LOCAL\"; fi)\" \"$REMOTE\""
    trustExitCode = true
</code></pre>

<p>We can also directly edit the <code>.gitconfig</code> and manually add the config code.</p>

<h2>WinMerge 2.x on Windows</h2>

<p><a href="http://winmerge.org/">WinMerge</a> is an open source differencing and merging tool for Windows. It can compare both folders and files, presenting differences in a visual text format that is easy to understand and handle.
At the time of writing this blog post, WinMerge 3 is still in progress of development and no release yet. WinMerge 3 will be modern compare/synchronization tool. It will be based on Qt library and cross-platform. You can use the same tool in Windows and in Linux.
So for now and so on in this blog post, WinMerge term means WinMerge 2.x.</p>

<p>After installing WinMerge, to configure it as diff and merge tool of Git is by adding /editing the following config setting to <code>C:\Users\{UserName}\.gitconfig</code></p>

<pre><code class="bash">
[mergetool]
  prompt = false
  keepBackup = false
  keepTemporaries = false

[merge]
  tool = winmerge

[mergetool "winmerge"]
  name = WinMerge
  trustExitCode = true
  cmd = "/c/Program\\ Files\\ \\(x86\\)/WinMerge/WinMergeU.exe" -u -e -dl \"Local\" -dr \"Remote\" $LOCAL $REMOTE $MERGED

[diff]
  tool = winmerge

[difftool "winmerge"]
  name = WinMerge
  trustExitCode = true
  cmd = "/c/Program\\ Files\\ \\(x86\\)/WinMerge/WinMergeU.exe" -u -e $LOCAL $REMOTE
</code></pre>

<p>The config above also can be configured by Git bash shell with <code>&ndash;global</code> parameter instead of manual edit via text editor.</p>

<p>Now, whenever you want it to launch diffs just use difftool[1]:</p>

<pre><code class="bash"># diff the local file.m against the checked-in version
$ git difftool file.m

# diff the local file.m against the version in some-feature-branch
$ git difftool some-feature-branch file.m

# diff the file.m from the Build-54 tag to the Build-55 tag
$ git difftool Build-54..Build-55 file.m
</code></pre>

<p>To resolve merge conflicts
<code>
$ git mergetool
</code></p>

<h2>References</h2>

<ol>
<li><a href="http://twobitlabs.com/2011/08/install-diffmerge-git-mac-os-x/">http://twobitlabs.com/2011/08/install-diffmerge-git-mac-os-x/</a></li>
<li><a href="http://winmerge.org/">http://winmerge.org/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reset Git Credential on OS X Keychain]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/11/09/reset-git-credential-on-os-x-keychain/"/>
    <updated>2016-11-09T12:40:34+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/11/09/reset-git-credential-on-os-x-keychain</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/logo/git.png">
This post basically just a note for my self. In case I got the same condition in the next, it can help me to remember what I did in the past.</p>

<p>I got a condition which I have just changed my git password. Surely I cannot pull or push since my local credential was not valid anymore. When I run <code>git config &ndash;list</code>, I believe my git password stored on OS X Keychain. The simple way I do was running a command via terminal :</p>

<pre><code class="bash">$ git config credential.helper osxkeychain
</code></pre>

<p>I was then prompted to input my username and password. By inputing my username and new password everything back to normal.</p>

<p>If you want it to apply globally just append parameter <code> &ndash;global </code> to the command.
<code>bash
$ git config --global credential.helper osxkeychain
</code></p>

<h2>References</h2>

<ol>
<li><a href="http://stackoverflow.com/questions/20195304/how-to-update-password-for-git">http://stackoverflow.com/questions/20195304/how-to-update-password-for-git</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Boost (C++ Libraries) on Xcode, Code::Blocks and Visual Studio]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/03/27/configure-boost-c-plus-plus-on-xcode/"/>
    <updated>2016-03-27T20:38:49+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/03/27/configure-boost-c-plus-plus-on-xcode</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/post/2016-03-27-boost.png">
<a href="http://www.boost.org/">Boost</a> is a set of libraries for the C++ programming language that provide support for tasks and structures such as linear algebra, pseudorandom number generation, multithreading, image processing, regular expressions, and unit testing. It contains over eighty individual libraries.<a href="https://en.wikipedia.org/wiki/Boost_(C%2B%2B_libraries)">[2]</a></p>

<p>The other interesting points of <a href="http://www.boost.org/">Boost</a> are :</p>

<ol>
<li>Open source</li>
<li>Cross platform</li>
<li>Complement to STL rather than a replacement</li>
<li>Many of <a href="http://www.boost.org/">Boost</a> developers are on the C++ standard committee</li>
<li>Well documented</li>
<li>Most of the Boost libraries are licensed under the <a href="https://en.wikipedia.org/wiki/Boost_(C%2B%2B_libraries)#License">Boost Software License</a>, designed to allow <a href="http://www.boost.org/">Boost</a> to be used with both free and proprietary software projects</li>
</ol>




<h2>Installation Boost</h2>


<p>Before jumping into steps of configuring <a href="http://www.boost.org/">Boost</a> on various IDE, let&rsquo;s begin with <a href="http://www.boost.org/">Boost</a> installation. To be noted that on this post I run Xcode on OS X, <a href="http://www.codeblocks.org/">Code::Blocks</a>  on Linux (Ubuntu) and Visual Studio on Windows. The detail environments I use are :</p>

<ol>
<li>OS X 10.11.4 El Capitan</li>
<li>Ubuntu 14.04.4 LTS</li>
<li>Xcode Version 7.2</li>
<li>Code::Blocks 13.12, gcc 4.8.4</li>
<li>Visual Studio 2013</li>
<li>Boost 1.60.0</li>
</ol>




<h4>OS X and Linux (Ubuntu)</h4>


<p>There are several ways of <a href="http://www.boost.org/">Boost</a> installation. Instead of build from source code, we can use package manager such as <a href="https://www.macports.org/">MacPorts</a>, <a href="http://brew.sh/">Homebrew</a>, <a href="https://en.wikipedia.org/wiki/Advanced_Packaging_Tool">Advance Package Tool</a>, etc. In this post we will build <a href="http://www.boost.org/">Boost</a> from source code. The installation steps (from source code) on OS X and Ubuntu are the similar. To make it consistent, I use the same installation path for OS X and Ubuntu that is <code>/usr/local/boost_1_60_0</code>. You can use different path if you want. The steps are :</p>

<ol>
<li>Download boost library from <a href="boost.org">Boost website</a></li>
<li>Extract it.</li>
<li>Open terminal, navigate to the extracted directory</li>
<li>Create directory on <code>/usr/local/boost_1_60_0</code>, and ensure IDE has access to the directory. On my case I don't need this step on OS X, but on ubuntu it does.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /usr/local/boost_1_60_0
</span><span class='line'>sudo chmod <span class="m">777</span> -r boost_1_60_0
</span></code></pre></td></tr></table></div></figure>
</li>
<li>
Run command :
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./bootstrap.sh --prefix<span class="o">=</span>/usr/local/boost_1_60_0
</span><span class='line'>./b2 install
</span></code></pre></td></tr></table></div></figure>
This last step quite take time. So you can have coffee while waiting for it :)
</li>
</ol>


<p>Once the installation finish, we should have generated directory. They are <code>/usr/local/boost_1_60_0/include</code> contains header files and <code>/usr/local/boost_1_60_0/lib</code> contains libraries.</p>

<h4>Windows</h4>


<p>The <a href="http://www.boost.org/">Boost</a> installation step on Windows is also similar to the installation step on OS X and Ubuntu.
The steps are :</p>

<ol>
<li>Download boost library from <a href="boost.org">Boost website</a></li>
<li>Extract it to C:\\boost_1_60_0 </li>
<li>Open Visual Studio command prompt. I use Visual Studio 2013 x86 Native Tools Command Prompt native tool (I have not test using default Windows Command Prompt)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'>C:\<span class="p">&gt;</span> <span class="n">cd</span> C:\boost_<span class="m">1</span>_<span class="m">60</span>_<span class="m">0</span>
</span><span class='line'>C:\boost_<span class="m">1</span>_<span class="m">60</span>_<span class="m">0</span><span class="p">&gt;</span> <span class="n">bootstrap</span>.bat
</span><span class='line'>C:\boost_<span class="m">1</span>_<span class="m">60</span>_<span class="m">0</span>&gt; .\b<span class="m">2</span>
</span></code></pre></td></tr></table></div></figure>
As on OS X and Ubuntu, the last step quite take time.
</li>
</ol>




<h2>Configure <a href="http://www.boost.org/">Boost</a> on IDE(s)</h2>


<p>Before create C++ projects on various IDE, let&rsquo;s create a simple C++ hello world code that use Boost libraries. To simplify the test, I grab sample code from <a href="http://stackoverflow.com/questions/999120/c-hello-world-boost-tee-example-program">here</a> <br/>
<figure class='code'><figcaption><span>Hello World</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">iostream</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">fstream</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">boost</span><span class="o">/</span><span class="n">iostreams</span><span class="o">/</span><span class="n">tee</span><span class="p">.</span><span class="n">hpp</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">boost</span><span class="o">/</span><span class="n">iostreams</span><span class="o">/</span><span class="n">stream</span><span class="p">.</span><span class="n">hpp</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="o">::</span><span class="n">iostreams</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">typedef</span> <span class="n">tee_device</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">ostream</span><span class="p">,</span> <span class="n">ofstream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">TeeDevice</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">stream</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TeeDevice</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">TeeStream</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ofstream</span> <span class="nf">ofs</span><span class="p">(</span><span class="s">&quot;/Users/neutro/Workspace/cpp/sample.txt&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">TeeDevice</span> <span class="nf">my_tee</span><span class="p">(</span><span class="n">cout</span><span class="p">,</span> <span class="n">ofs</span><span class="p">);</span>
</span><span class='line'><span class="n">TeeStream</span> <span class="nf">my_split</span><span class="p">(</span><span class="n">my_tee</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_split</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_split</span><span class="p">.</span><span class="n">flush</span><span class="p">();</span>
</span><span class='line'><span class="n">my_split</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
The snipped code above just print text and write it to a text file. We just want to ensure the IDE&rsquo;s compiler can compile and build the code that includes <a href="http://www.boost.org/">Boost</a> libraries.</p>

<ul>
  <li>
    <h4>Xcode</h4>
    To include Boost libraries on Xcode project :
    <ol>
    <li>Select Xcode project > Build Setting</li>
    <li>Add <code>/usr/local/boost_1_60_0/include/</code> to the Header Search Paths</li>
    <li>Add <code>/usr/local/boost_1_60_0/lib/</code> to the Library Search Paths</li>
    </ol>

    <img class="center" src="/images/post/2016-03-27-xcode.png">

  </li>
  <li>
    <h4>Code::Blocks</h4>
    To include Boost libraries on Code::Blocks project :
    <ol>
    <li>Right Click on Code::Blocks project > Build Option</li>
    <li>
    Select Compiler tab, add <code>/usr/local/boost_1_60_0/include/</code>
    <img class="center" src="/images/post/2016-03-27-codeblocks1.png">
    </li>
    <li>
    Select Linker tab, add <code>/usr/local/boost_1_60_0/lib/</code>
    <img class="center" src="/images/post/2016-03-27-codeblocks2.png">
    </li>
    </ol>
  </li>
  <li>
    <h4>Visual Studio</h4>
    To include Boost libraries on Visual C++ project :
    <ol>
    <li>Right Click on VC++ project > Properties</li>
    <li>Select VC++ Directories on the left pane</li>
    <li>Add <code>C:\boost_1_60_0</code> on Include Directories item</li>
    <li>Add <code>C:\boost_1_60_0\stage\lib</code> on Include Directories item</li>
    <li>Click OK to close the dialog</li>
    </ol>
    <img class="center" src="/images/post/2016-03-27-vs.png">
  </li>
</ul>


<p>The last is rebuild the above code on selected IDE. We should not got any errors once the IDE can detect the <a href="http://www.boost.org/">Boost</a> directory path.</p>

<p>The sample of this article can be downloaded <a href="https://github.com/neutrofoton/SimpleBoost">here</a></p>

<p><h4>Reference<h4>
<ol type="1">
<li>
<a href="http://www.boost.org/">http://www.boost.org/</a>
</li>
<li>
<a href="https://en.wikipedia.org/wiki/Boost_(C%2B%2B_libraries)">Wikipedia</a>
</li>
</ol></p>
]]></content>
  </entry>
  
</feed>
