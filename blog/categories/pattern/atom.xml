<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pattern | neutrofoton]]></title>
  <link href="http://neutrofoton.github.io/blog/categories/pattern/atom.xml" rel="self"/>
  <link href="http://neutrofoton.github.io/"/>
  <updated>2021-03-23T19:31:28+07:00</updated>
  <id>http://neutrofoton.github.io/</id>
  <author>
    <name><![CDATA[neutro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Domain Driven Design Short Summary]]></title>
    <link href="http://neutrofoton.github.io/blog/2021/03/20/domain-driven-design-short-summary/"/>
    <updated>2021-03-20T15:49:56+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2021/03/20/domain-driven-design-short-summary</id>
    <content type="html"><![CDATA[<p>I believe there are tons of articles and books out there that discuss about Domain Driven Design (DDD for short). This post essentially is taken from my note archieved when I explored about DDD from several resources. I rewrite it in here as a refresh for myself mainly.</p>

<p>Domain Driven Design (DDD) is the concept that the structure and language of software code (class names, class methods, class variables) should match the business domain[1].  We don&rsquo;t need to kill a mosquito with a cannon. We need to choose the fittest method in solving a problem. As well as DDD, it is not always be a fit method in solving application design. A software application has several attributes. Some of them deal with[3]:</p>

<ul>
<li>Amount of Data</li>
<li>Performance</li>
<li>Business Logic complexity</li>
<li>Tehnical Complexity.</li>
</ul>


<p>From the fourth software attributes, DDD is the most suitable with an application that has a <em>complex business logic</em>. DDD is designed to tackle the complexity of business rules. The main goals of DDD are[1]:</p>

<ul>
<li>Placing the project&rsquo;s primary focus on the core domain and domain logic;</li>
<li>Basing complex designs on a model of the domain;</li>
<li>Initiating a creative collaboration between technical and domain experts to iteratively refine a conceptual model that addresses particular domain problems.</li>
</ul>


<p>One of good resources about DDD is <a href="https://www.pluralsight.com/courses/domain-driven-design-in-practice">DDD course by Vladimir Khorikov</a>. I also cited a few/snippet code from his course to make my summary about DDD more clearer to understand.</p>

<h1>Terms in DDD</h1>

<h2>Ubiquitous Languange</h2>

<p><em>Ubiquitous Languanges</em> brides the gab between developer and business expert/ domain expert/ subject matter expert (SME). The <em>Ubiquitous Languange</em> notion come up to avoid misunderstanding between them. For example, the developer has a class <code>Product</code> that represent business term <em>Product</em> (both product and package). On the other hand the business expert treat <em>Product</em> and <em>Package</em> as different things. By the condition, it is needed the same languange to avoid misunderstanding.</p>

<h2>Bounded Context</h2>

<p>Bounded Context is a central pattern in DDD. It is the focus of DDD&rsquo;s strategic design section which is all about dealing with large models and teams. DDD deals with large models by dividing them into different <em>Bounded Contexts</em> and being explicit about their interrelationships [Martin Fowler][8].</p>

<p><em>Bounded Context</em> notion comes up to make clear boundries between different parts of the system. Let&rsquo;s say our system consist of <em>Sales</em> and <em>Support</em>, we can seperate Product into <em>Sales</em> and <em>Support</em> context to make clear boundries between the two.</p>

<p><img class="center" src="/images/post/2021-03-20-fig00.png"></p>

<center><small>Figure 1: Bounded Contexts <br/>
        Source: https://martinfowler.com/bliki/BoundedContext.html</small>
</center>




<p><p/></p>

<p>Figure 1 shows that <em>Bounded Context</em> aims for separating the model and explicitly drawn the boundaries between pieces. The reason for context separation is that as the application grows, it becomes harder to maintain a single unified model as it becomes larger and more people get involved in the development process.</p>

<h2>Sub Domain</h2>

<p>The difference between <em>Sub Domain</em> and <em>Bounded Context</em> is that the <em>Sub Domain</em> is a <em>Problem Space</em>. Meanwhile <em>Bounded Context</em> is a <em>Solution Space</em>. <em>Sub Domain</em> and <em>Bounded Context</em> have a <strong>1-to-1</strong> relation. It means that a <em>Sub Domain</em> should be covered with exactly a <em>Bounded Context</em>.</p>

<p><img class="center" src="/images/post/2021-03-20-fig03.png"></p>

<p><center><small>Figure 2: Sub Domain - Bounded Contexts</small>
</center></p>

<p>Since <em>Sub Domain</em> is a <em>Problem Space</em>, it should be defined by <em>Business Expert</em> or <em>Domain Experts</em>. The <em>Sub Domain</em> topic usually will come up when we have a talk with the <em>Domain Expert</em> while gathering requirement.</p>

<h2>Core Domain</h2>

<p>The notion that focuses on <em>Domain Model</em> which is the most important part of the system.</p>

<h1>Onion Architecture</h1>

<p>The implementation of DDD in onion architecture[3][5][6] showed in the Figure 2.</p>

<p><img class="center" src="/images/post/2021-03-20-fig01.png"></p>

<p><center>
    <small>Figure 2: DDD in onion architecture </small>
</center>
<br/></p>

<p>Figure 2 shows that the core of the architecture is the <em>Domain Model</em>. The <em>Domain Model</em> is isolated from others for seperation of consern purpose. It consists of <em>Entities, Value Objects, Domain Events,</em> and <em>Agregates</em>. They are most important part in DDD since they represent business logic implementation.</p>

<p>The outer layer in the onion architecture depends on the inner one. The inner layer is isolated from the outer layer that make the inner layer does not know the outer one. Figure 2 denotes that the <em>Domain Model</em> does not know how it is peristed to database. Since persisting model to database is handled by <em>Repository</em> on the outer layer.</p>

<h1>Testing in TDD</h1>

<p><em>Unit Testing</em> is one of important part in software development. Test coverage that reaches 100% has high effort. In practice the most important that should cover most unit test is the code base <em>(Domain Model)</em> at the inner most layer in the onion architecture. The closer to 100%, the better the <em>Unit Test</em> coverage will be. Meanwhile for the outer layer, the test schenario could be coveraged by integration test.</p>

<h1>Entity vs Value Object</h1>

<p>The difference between Entity and Value Object can be identified from several ways:</p>

<ul>
<li>Type of Equality</li>
<li>Immutability</li>
<li>Lifespan</li>
</ul>


<h2>1. Type of equality</h2>

<p><em>Type Equality</em> is applied to the objects which have the same type. It is classified into 3 categories:</p>

<ul>
<li><p><em>Identifier Equality</em><br/>
Two objects A and B are identified have <em>Identifier Equality</em> if they have the same <em>Id</em>.</p></li>
<li><p><em>Reference Equality</em><br/>
Two objects A and B are identified have <em>Reference Equality</em> if they point to the same <em>memory address</em>.</p></li>
<li><p><em>Structural Equality</em><br/>
Two objects A and B are identified have <em>Structural Equality</em> if <em>all the member values are matched</em>.</p></li>
</ul>


<p>The 3 types of Type Equality is summarized in the following Figure.</p>

<p><img class="center" src="/images/post/2021-03-20-fig02.png"></p>

<p><center><small>Figure 3: Type Equality classification</small>
</center></p>

<p><em>Identifier Equality</em> usually referes to <em>Entity</em>. Meanwhile <em>Structural Equality</em> refers to <em>Value Object</em>. The <em>Reference Equality</em> can be applied to <em>Entity</em> or <em>Value Object</em>. In practice, <em>Value Object</em> does not has an Id.</p>

<h2>2. Immutability</h2>

<p>The characteristic of <em>Entity</em>:</p>

<ul>
<li>Having identity <em>Id</em></li>
<li>Mutable</li>
</ul>


<p>The characteristic of <em>Value Object</em>:</p>

<ul>
<li>Having no identity <em>Id</em></li>
<li>Immutable</li>
</ul>


<h2>3. Lifespan</h2>

<p>From the lifespan point of view, <em>Value Object</em> can not live by its own. It can be owned by one or several identities.
For example <code>Address</code> object can not stay by its own. It should be belonged to <code>Person</code> object. From persistance perspective, <em>Value Object</em> does not have its own table in database.</p>

<h1>How to Recognize Entity or Value Object</h1>

<p>It is not always clear or specific characteristic if a term or notion in a business process is an <em>Entity</em> or <em>Value Object</em>. It depends on the business process itself. A good approach to identify whether a notion of object is an <em>Entity</em> or <em>Value Object</em> is by comparing to <em>integer</em>[3].</p>

<pre><code class="csharp">
//Integer
public void MethodA(){
    int value1 = 5;
    int value2 = 5;
}

//Value Object
public void MethodB(){

    //money1 and money2 essentially the same. 
    //since they have the same nominal in business process context.
    //programmatically they both have the same structure equality
    Money money1 = new Money(5);
    Money money2 = new Money(5);
}
</code></pre>

<p>Ideally most business logic elements are identified as <em>Value Objects</em>. The <em>Entity</em> act as a wrapper of <em>Value Object(s)</em>. However, don&rsquo;t hesitate to refactor <em>Value Object</em> to <em>Entity</em> or vise versa if we identify it should be.</p>

<pre><code class="csharp Entity Base Class">    public abstract class Entity
    {
        public virtual long Id { get; protected set; }

        public override bool Equals(object obj)
        {
            var other = obj as Entity;

            if (ReferenceEquals(other, null))
                return false;

            if (ReferenceEquals(this, other))
                return true;

            if (GetRealType() != other.GetRealType())
                return false;

            if (Id == 0 || other.Id == 0)
                return false;

            return Id == other.Id;
        }

        public static bool operator ==(Entity a, Entity b)
        {
            if (ReferenceEquals(a, null) &amp;&amp; ReferenceEquals(b, null))
                return true;

            if (ReferenceEquals(a, null) || ReferenceEquals(b, null))
                return false;

            return a.Equals(b);
        }

        public static bool operator !=(Entity a, Entity b)
        {
            return !(a == b);
        }

        public override int GetHashCode()
        {
            return (GetRealType().ToString() + Id).GetHashCode();
        }

        private Type GetRealType()
        {
            return NHibernateProxyHelper.GetClassWithoutInitializingProxy(this);
        }
    }
</code></pre>

<pre><code class="csharp Value Object base class">    public abstract class ValueObject&lt;T&gt;
        where T : ValueObject&lt;T&gt;
    {
        public override bool Equals(object obj)
        {
            var valueObject = obj as T;

            if (ReferenceEquals(valueObject, null))
                return false;

            return EqualsCore(valueObject);
        }


        protected abstract bool EqualsCore(T other);


        public override int GetHashCode()
        {
            return GetHashCodeCore();
        }


        protected abstract int GetHashCodeCore();


        public static bool operator ==(ValueObject&lt;T&gt; a, ValueObject&lt;T&gt; b)
        {
            if (ReferenceEquals(a, null) &amp;&amp; ReferenceEquals(b, null))
                return true;

            if (ReferenceEquals(a, null) || ReferenceEquals(b, null))
                return false;

            return a.Equals(b);
        }


        public static bool operator !=(ValueObject&lt;T&gt; a, ValueObject&lt;T&gt; b)
        {
            return !(a == b);
        }
    }
</code></pre>

<h1>Agregate</h1>

<p><em>Aggregate</em> is a pattern in DDD. It is a cluster of domain objects that can be treated as a single unit[7]. <em>Aggregate</em> is an encapsulation of <em>Entities</em> and/or <em>Value Objects</em> (domain objects). An <em>Entity</em> can belong to a single <em>Agregate</em> only. Meanwhile a <em>Value Object</em> can belong to multiple <em>Agregates</em>.</p>

<p>An <em>Agregate</em> contains a set of operations which those domain objects can be operated on. An <em>Agregate</em> also act as a single operation unit. Application layer should reload it from database, then perform action and store it back as a single object. Hence, the <em>Agregate</em> should not be too large. Commonly it contains maximum 3 <em>Entities</em>. On the contrary to <em>Entity</em>, we can have as many <em>Value Objects</em> in an <em>Agregate</em> as we want.</p>

<pre><code class="csharp Agregate Root">    public abstract class AggregateRoot : Entity
    {

    }
</code></pre>

<pre><code class="csharp Repository for Database Operation">    public abstract class Repository&lt;T&gt; where T : AggregateRoot
    {
        public T GetById(long id)
        {
            throw new NotImplementedException("load data from database");
        }

        public void Save(T aggregateRoot)
        {
            throw new NotImplementedException("operation insert to database");
        }
    }
</code></pre>

<h2>Domain Event</h2>

<p><em>Domain Event</em> represents an event that&rsquo;s significant to the <em>Domain Model</em>. It&rsquo;s important to distinguish <em>Domain Event</em> to <em>System Event</em>. <em>System Event</em> deals with infrastructure event such as button click, timer tick, window close etc. On the other hand, <em>Domain Event</em> describe occasion which is important to the <em>Domain</em>. For example, when a button clicked <em>(System Event)</em>, it calls a domain operation. Domain operation trigger an event to change balance values in other <em>Bounded Context</em> for example head office.</p>

<p><em>Domain Event</em> is often used to[3]:</p>

<ul>
<li>Decouple <em>Bounded Context</em></li>
<li>Facilitate communication between <em>Bounded Context</em></li>
<li>Decouple <em>Entities</em> within a <em>Bounded Context</em></li>
</ul>


<p>The guidelines in implementing <em>Domain Event</em> are[3]:</p>

<ul>
<li>Naming should be in <em>Past Tense</em>. Example: <code>BalanceChangedEvent</code></li>
<li>Passing data as small/little as possible. Don&rsquo;t pass data/information more than needed.</li>
<li>We should not pass <em>Entity</em> to an <em>Event</em>. Since it will produce additonal point of coupling. We should use primitive data type instead.</li>
</ul>


<h1>References</h1>

<ol>
<li><a href="https://en.wikipedia.org/wiki/Domain-driven_design">https://en.wikipedia.org/wiki/Domain-driven_design</a></li>
<li><a href="https://www.amazon.com/gp/product/0321125215">Domain Driven Design: Tackling Complexity in the Heart of Software</a></li>
<li><a href="https://www.pluralsight.com/courses/domain-driven-design-in-practice">https://www.pluralsight.com/courses/domain-driven-design-in-practice</a></li>
<li><a href="https://www.baeldung.com/spring-data-ddd">https://www.baeldung.com/spring-data-ddd</a></li>
<li><a href="https://www.baeldung.com/spring-boot-clean-architecture">https://www.baeldung.com/spring-boot-clean-architecture</a></li>
<li><a href="https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/">https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/</a></li>
<li><a href="https://martinfowler.com/bliki/DDD_Aggregate.html">https://martinfowler.com/bliki/DDD_Aggregate.html</a></li>
<li><a href="https://martinfowler.com/bliki/BoundedContext.html">https://martinfowler.com/bliki/BoundedContext.html</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generic Singleton Pattern in Java]]></title>
    <link href="http://neutrofoton.github.io/blog/2013/08/29/generic-singleton-pattern-in-java/"/>
    <updated>2013-08-29T14:38:32+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2013/08/29/generic-singleton-pattern-in-java</id>
    <content type="html"><![CDATA[<p>In my previous post about singleton pattern in C#, it is very nice flexible singleton code which make us be able to create a singleton instance of a non singleton class. But we can still be able to create a non singleton instance of the target class.</p>

<p>In this post I want to implement it in Java. As far as I know even though both C# and Java have generic feature, generic in C# quite different from the one in Java. While converting of what I did about generic singleton in C# to Java, I feel that the way I do in Java is not as elegant as in C#. The following code is the generic singleton code I write in Java.</p>

<pre><code class="java generic singleton">import java.util.HashMap;
import java.util.Map;

public class Singleton{

    private static final Singleton instance = new Singleton();

    @SuppressWarnings( "rawtypes")
    private Map&lt;Class,Object&gt; mapHolder = new HashMap&lt;Class,Object&gt;();

    private Singleton() {}


    @SuppressWarnings("unchecked")
    public static &lt;T&gt; T getInstance(Class&lt;T&gt; classOf) throws InstantiationException, IllegalAccessException {


        synchronized(instance){

            if(!instance.mapHolder.containsKey(classOf)){

                T obj = classOf.newInstance();  

                instance.mapHolder.put(classOf, obj);
            }

            return (T)instance.mapHolder.get(classOf);          

        }

    }

    public Object clone() throws CloneNotSupportedException {
        throw new CloneNotSupportedException();
    }   
}
</code></pre>

<p>The following code show how to use the generic singleton class. It’s quite similar to the C# version.</p>

<pre><code class="java sample">public class Starter {

    /**
     * @param args
     * @throws InvocationTargetException
     * @throws IllegalArgumentException
     * @throws SecurityException
     * @throws NoSuchMethodException
     * @throws IllegalAccessException
     * @throws InstantiationException
     */
    public static void main(String[] args) throws InstantiationException, IllegalAccessException  {
        // TODO Auto-generated method stub

        Employee emp1 = new Employee();
        emp1.setName("neutro");

        Employee emp2 = new Employee();
        emp2.setName("neutro");

        boolean isEqual = emp1.equals(emp1);

        isEqual = emp1==emp2;       
        System.out.println("Is Equal Test1 = "+ isEqual);

        Singleton.getInstance(Employee.class).setName("Hello");
        emp1 = Singleton.getInstance(Employee.class);
        emp2 = Singleton.getInstance(Employee.class);

        isEqual = emp1==emp2;       
        System.out.println("Is Equal Test2 = "+ isEqual);

        System.out.println("emp1 = "+ emp1.getName());
        System.out.println("emp2 = "+ emp2.getName());


        Singleton.getInstance(Departement.class).setName("Information Technology");
        Departement dpt1 = Singleton.getInstance(Departement.class);
        Departement dpt2 = Singleton.getInstance(Departement.class);

        isEqual = dpt1==dpt2;       
        System.out.println("Is Equal Test3 = "+ isEqual);

        System.out.println("dpt1 = "+ dpt1.getName());
        System.out.println("dpt2 = "+ dpt2.getName());

    }
}
</code></pre>

<p>Again, if we see from the sample code above it seems that generic singleton in C# is more elegant than in Java.
The main thing that I should do is I have to use <code>HashMap</code> collection to hold any instance of what that want to be as singleton and reuse for the future need in the life cycle of my application.</p>

<p>Anyway, if you have better and much more elegant solution how to implement generic singleton pattern in Java I am very appreciate for any suggestion. Finally I would like to thank you very much for visiting and reading my blog, and have a nice day.</p>

<h3>Update March 11, 2016</h3>


<blockquote><p>If you want to the java singleton above, please ensure you have remove / clean up method to clean up <code>HashMap</code> contents if the singleton objects are not needed anymore. At least at the end of application lifecycle, the <code>HashMap</code> and its contents should be removed completely from memory.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generic Singleton Pattern in C#]]></title>
    <link href="http://neutrofoton.github.io/blog/2013/08/29/generic-singleton-pattern-in-c-number/"/>
    <updated>2013-08-29T14:27:41+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2013/08/29/generic-singleton-pattern-in-c-number</id>
    <content type="html"><![CDATA[<p>In software engineering, the singleton pattern is a design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system. The concept is sometimes generalized to systems that operate more efficiently when only one object exists, or that restrict the instantiation to a certain number of objects. The term comes from the mathematical concept of a singleton.<a href="http://en.wikipedia.org/wiki/Singleton_pattern">[1]</a></p>

<p>Honestly in my daily coding activity, sometimes I need to implement singleton pattern. Jon wrote a good singleton article in C# <a href="http://www.yoda.arachsys.com/csharp/singleton.html">here</a>. Another case I want to implement singleton pattern in generic way. I convert what has been wrotten by Jon into generic.</p>

<pre><code class="c# generic singleton">/// &lt;summary&gt;
    /// Generic class which makes non singleton class to be singleton.
    /// Calling singleton instance of class should be Singleton&lt;T&gt;.Instance, otherwise the returned class is not singleton one.    ///
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;Genric class type to be singletonized&lt;/typeparam&gt;
    public sealed class Singleton&lt;T&gt; where T : class, new()
    {
        /// &lt;summary&gt;
        /// Private constuctor to avoid this class instantiated
        /// &lt;/summary&gt;
        Singleton()
        {
        }

        /// &lt;summary&gt;
        /// Property to get access to singleton instance
        /// &lt;/summary&gt;
        public static T Instance
        {
            get
            {
                return Nested.instance;
            }
        }

        /// &lt;summary&gt;
        /// Private nested class which acts as singleton class instantiator. This class should not be accessible outside &lt;see cref="Singleton&lt;T&gt;"/&gt;
        /// &lt;/summary&gt;
        class Nested
        {
            /// &lt;summary&gt;
            /// Explicit static constructor to tell C# compiler not to mark type as beforefieldinit
            /// &lt;/summary&gt;
            static Nested()
            {
            }

            /// &lt;summary&gt;
            /// Static instance variable
            /// &lt;/summary&gt;
            internal static readonly T instance = new T()
        }
    }
</code></pre>

<p>The following snipped code is a sample how to use the generic singleton class.
<figure class='code'><figcaption><span>sample</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Processor</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span><span class="p">;</span>
</span><span class='line'>        <span class="k">set</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">void</span> <span class="n">Execute</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">class</span> <span class="nc">void</span> <span class="n">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Singleton</span><span class="p">&lt;</span><span class="n">Processor</span><span class="p">&gt;.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Execute</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>From the sample above is shown that we can make a non singleton class to be singleton at runtime. But we can still create a non singleton instance as we need. That’s really nice flexible thing.</p>

<h3>Reference</h3>


<p>[1] <a href="http://en.wikipedia.org/wiki/Singleton_pattern">http://en.wikipedia.org/wiki/Singleton_pattern</a></p>
]]></content>
  </entry>
  
</feed>
