<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | neutrofoton]]></title>
  <link href="http://neutrofoton.github.io/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://neutrofoton.github.io/"/>
  <updated>2016-09-20T04:59:11+07:00</updated>
  <id>http://neutrofoton.github.io/</id>
  <author>
    <name><![CDATA[neutro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lambda in C++]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/05/11/lambda-in-c-plus-plus/"/>
    <updated>2016-05-11T23:15:18+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/05/11/lambda-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/logo/lambda.png">
C++11 adds a new feature called lambda expressions. This allows us to write anonymous functions inline, removing the need to write a separate function or to write a function object, and makes code easier to understand.
For those who are familiar with C# lambda expression, C++ lambda expression is similar. But lambda in C++ has slightly different syntax.</p>

<pre><code class="text C++11 Lambda Syntax">[capture_block](parameters) mutable exception_specification -&gt; return_type {body}
</code></pre>

<ol>
<li> <strong><code>capture_block</code></strong> is a comma-separated list of zero or more captures, optionally beginning with a capture-default. Capture list can be passed as follows (see below for the detailed description):
<ol>
<li><code>[a,&b]</code> where a is captured by value and b is captured by reference.</li>
<li><code>[this]</code> captures the this pointer by value</li>
<li><code>[&]</code> captures all automatic variables odr-used in the body of the lambda by reference</li>
<li><code>[=]</code> captures all automatic variables odr-used in the body of the lambda by value</li>
<li><code>[x]</code> captures only x by value and nothing else.</li>
<li><code>[]</code> captures nothing</li>
</ol>
</li>
<li>
<strong><code>parameters</code></strong> is (optional) list of parameters for the lambda expression.
</li>
<li>
<strong><code>mutable</code></strong> is (optional) if variables from the enclosing scope are captured by value, a copy of those variables will become available in the body of the lambda expression. Those copies are marked as const by default, meaning the lambda body cannot change the value of those copies. If the lambda expression is marked as mutable, those copies are not const and the body can modify those local copies.
</li>
<li>
<strong><code>exception_specification</code></strong> is (optional) and can be used to specify which exceptions the body of the lambda expression can throw.
</li>
<li>
<strong><code>return_type</code></strong> is Return type. If not present it's implied by the function return statements (or void if it doesn't return any value)
</li>
</ol>




<h3>Lambda and Direct Invoke</h3>


<p>The following snipped code is an example of lambda expression.</p>

<pre><code class="cpp example lambda and directly invoked">
string result = [](const string&amp; str) -&gt; string {return "Hi " + str;}("neutro");
cout &lt;&lt; result &lt;&lt; endl;
</code></pre>

<p>The lambda expression above shows that it has a <code>const string&amp;</code> parameter and return a <code>string</code> type. To execute the lambda is by placing round brackets <code>()</code> and put object that will be passed to inside it. The <code>&ldquo;neutro&rdquo;</code> literal string will substitute <code>str</code> parameter. The output of the above code is :</p>

<pre><code class="text output">Hi neutro
</code></pre>

<h3>Lambda as Variable</h3>


<p>Pointer to a lambda expression can be stored and executed through the function pointer. C++ provides <code>std::function</code> which is a STL template class that provides a very convenient wrapper to a simple function, to a functor or to a lambda expression. We can also use the C++11 <code>auto</code> keyword to make it easier.</p>

<p>To make it clear the following code contains couples of various lambda expressions and store them in variables of type <code>auto</code> or its equivalent in <code>std::function</code> STL template class.</p>

<pre><code class="cpp lambda as variable">    auto lambda1 = [] { cout &lt;&lt;"Hello lambda without parameter 1" &lt;&lt; endl; };
    lambda1();

    auto lambda2 = [](void) { cout &lt;&lt;"Hello lambda without parameter 2" &lt;&lt; endl; };
    lambda2();

    //auto lambda3 = [](void) -&gt; void { cout &lt;&lt;"Hello lambda without parameter 2" &lt;&lt; endl; };
    function&lt;void()&gt; lambda3 = [](void) -&gt; void { cout &lt;&lt;"Hello lambda without parameter 2" &lt;&lt; endl; };
    lambda3();

    //auto lambda4 = [](const string&amp; str) -&gt; string {return "Hello from " + str;};
    function&lt;string(const string&amp;)&gt; lambda4 = [](const string&amp; str) -&gt; string {return "Hello from " + str;};

    string result = lambda4("neutro");

    cout &lt;&lt; result &lt;&lt; endl;
</code></pre>

<p>The snipped code above shows how lambda expressions stored in variable of auto type or theirs equivalent in <code>std::function</code> type and how to invoke the lambda. <a href="https://oopscenities.net/2012/02/24/c11-stdfunction-and-stdbind/">Here</a> is a good article about <code>std::function</code>.</p>

<h3>Lambda Capture Block</h3>


<p>Lambda Capture Block basically describes how we want to capture variables from the enclosing scope. Capturing a variable means that the variable becomes available inside the body of the lambda. The detail variant of capture block has been described on previous section. The following code shows various scenario how to play with capture block.</p>

<pre><code class="cpp lambda capture block">int variableA = 1;
int variableB = 1;
int variableC = 1;

cout &lt;&lt; "Init Values : "&lt;&lt;endl;
cout &lt;&lt; "variableA : "&lt;&lt;variableA &lt;&lt;endl;
cout &lt;&lt; "variableB : "&lt;&lt;variableB &lt;&lt;endl;
cout &lt;&lt; "variableC : "&lt;&lt;variableC &lt;&lt;endl;

cout &lt;&lt; endl;
//--------------------------------------
cout &lt;&lt; "---## lamda 1 ##---"&lt;&lt;endl;
auto lambda1 = [=](int param)-&gt; int     //==&gt; [=] lambda has default access to variable is by value
            {
                param = param * 2;

                cout &lt;&lt; "param inside lambda1 : "&lt;&lt;param &lt;&lt; endl;
                return param;
            };

lambda1(variableA);
cout &lt;&lt; "After lamda1, variableA : " &lt;&lt;variableA &lt;&lt;endl;

cout&lt;&lt;endl;

//--------------------------------------------
cout &lt;&lt; "---## lamda 2 ##---"&lt;&lt;endl;
auto lambda2 = [&amp;](int param) -&gt; int      //==&gt; [&amp;] lambda has default access to variable is by reference
            {
                param = param * 2;
                variableB = variableB * 2;

                cout &lt;&lt; "param inside lambda2 : "&lt;&lt;param &lt;&lt; endl;
                cout &lt;&lt; "variableB inside lambda2 : "&lt;&lt;variableB &lt;&lt; endl;

                return param;
            };

lambda2(variableA);
cout &lt;&lt; "After lamda2, variableA : " &lt;&lt;variableA &lt;&lt;endl;
cout &lt;&lt; "After lamda2, variableB : " &lt;&lt;variableB &lt;&lt;endl;

cout&lt;&lt;endl;

//-------------------------------------
cout &lt;&lt; "---## lamda 3 ##---"&lt;&lt;endl;
auto lambda3 = [&amp;](int* param) -&gt; int
{
    *param = (*param) * 2;
    variableB = variableB * 2;

    cout &lt;&lt; "param inside lambda3 : "&lt;&lt;*param &lt;&lt; endl;
    cout &lt;&lt; "variableB inside lambda3 : "&lt;&lt;variableB &lt;&lt; endl;

    return *param;
};

int result3 = lambda3(&amp;variableA);
cout &lt;&lt; "After lamda3, result3 : " &lt;&lt;result3 &lt;&lt;endl;
cout &lt;&lt; "After lamda3, variableA : " &lt;&lt;variableA &lt;&lt;endl;
cout &lt;&lt; "After lamda3, variableB : " &lt;&lt;variableB &lt;&lt;endl;

cout&lt;&lt;endl;


//--------------------------------
cout &lt;&lt; "---## lamda 4 ##---"&lt;&lt;endl;
auto lambda4 = [=, &amp;variableB, &amp;variableC](int param) -&gt; int //==&gt; [=, &amp;variableB, &amp;variableC] captures by value by default,
                                             // except variables variableB and variableC, which are captured by reference.
{
    param = (param) * 2;
    variableB = variableB * 2;
    variableC = variableC * 2;

    cout &lt;&lt; "param inside lambda4 : "&lt;&lt;param &lt;&lt; endl;
    cout &lt;&lt; "variableB inside lambda4 : "&lt;&lt;variableB &lt;&lt; endl;
    cout &lt;&lt; "variableC inside lambda4 : "&lt;&lt;variableC &lt;&lt; endl;

    return param;
};

lambda4(variableA);

cout &lt;&lt; "After lamda4, variableA : " &lt;&lt;variableA &lt;&lt;endl;
cout &lt;&lt; "After lamda4, variableB : " &lt;&lt;variableB &lt;&lt;endl;
cout &lt;&lt; "After lamda4, variableC : " &lt;&lt;variableC &lt;&lt;endl;

cout &lt;&lt; endl;

//--------------------------------
cout &lt;&lt; "---## lamda 5 ##---"&lt;&lt;endl;
auto lambda5 = [variableC](int param) mutable -&gt; int //==&gt; [variableC] captures only variableC by value and nothing else.
{
    param = (param) * 2;

    variableC = variableC * 2; //should mark as mutable lambda, since Cannot assign to a variable captured by copy in a non-mutable lambda
    //variableB = variableB * 2; //ERROR : variableB not captured, since only capture specific variable that's variableC

    ///
    cout &lt;&lt; "param inside lambda5 : "&lt;&lt;param &lt;&lt; endl;
    cout &lt;&lt; "variableC inside lambda5 : "&lt;&lt;variableC &lt;&lt; endl;

    return param;
};

lambda5(variableA);

cout &lt;&lt; "After lamda5, variableA : " &lt;&lt;variableA &lt;&lt;endl;
cout &lt;&lt; "After lamda5, variableC : " &lt;&lt;variableC &lt;&lt;endl;
</code></pre>

<p>The output of the sample code is :</p>

<pre><code class="text output">Init Values :
variableA : 1
variableB : 1
variableC : 1

---## lamda 1 ##---
param inside lambda1 : 2
After lamda1, variableA : 1

---## lamda 2 ##---
param inside lambda2 : 2
variableB inside lambda2 : 2
After lamda2, variableA : 1
After lamda2, variableB : 2

---## lamda 3 ##---
param inside lambda3 : 2
variableB inside lambda3 : 4
After lamda3, result3 : 2
After lamda3, variableA : 2
After lamda3, variableB : 4

---## lamda 4 ##---
param inside lambda4 : 4
variableB inside lambda4 : 8
variableC inside lambda4 : 2
After lamda4, variableA : 2
After lamda4, variableB : 8
After lamda4, variableC : 2

---## lamda 5 ##---
param inside lambda5 : 4
variableC inside lambda5 : 4
After lamda5, variableA : 2
After lamda5, variableC : 2
</code></pre>

<p><h4>Reference<h4>
<ol type="1">
<li><a href="http://www.wrox.com/WileyCDA/WroxTitle/Professional-C-2nd-Edition.productCd-0470932449.html">Wrox Professional C++</a></li>
<li><a href="http://en.cppreference.com/w/cpp/language/lambda">http://en.cppreference.com/w/cpp/language/lambda</a></li>
<li><a href="https://oopscenities.net/2012/02/24/c11-stdfunction-and-stdbind/">https://oopscenities.net/2012/02/24/c11-stdfunction-and-stdbind/</a></li>
<li><a href="http://www.drdobbs.com/cpp/lambdas-in-c11/240168241?pgno=1">http://www.drdobbs.com/cpp/lambdas-in-c11/240168241?pgno=1</a></li>
</ol></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Boost (C++ Libraries) on Xcode, Code::Blocks and Visual Studio]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/03/27/configure-boost-c-plus-plus-on-xcode/"/>
    <updated>2016-03-27T20:38:49+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/03/27/configure-boost-c-plus-plus-on-xcode</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/post/2016-03-27-boost.png">
<a href="http://www.boost.org/">Boost</a> is a set of libraries for the C++ programming language that provide support for tasks and structures such as linear algebra, pseudorandom number generation, multithreading, image processing, regular expressions, and unit testing. It contains over eighty individual libraries.<a href="https://en.wikipedia.org/wiki/Boost_(C%2B%2B_libraries)">[2]</a></p>

<p>The other interesting points of <a href="http://www.boost.org/">Boost</a> are :</p>

<ol>
<li>Open source</li>
<li>Cross platform</li>
<li>Complement to STL rather than a replacement</li>
<li>Many of <a href="http://www.boost.org/">Boost</a> developers are on the C++ standard committee</li>
<li>Well documented</li>
<li>Most of the Boost libraries are licensed under the <a href="https://en.wikipedia.org/wiki/Boost_(C%2B%2B_libraries)#License">Boost Software License</a>, designed to allow <a href="http://www.boost.org/">Boost</a> to be used with both free and proprietary software projects</li>
</ol>




<h2>Installation Boost</h2>


<p>Before jumping into steps of configuring <a href="http://www.boost.org/">Boost</a> on various IDE, let&rsquo;s begin with <a href="http://www.boost.org/">Boost</a> installation. To be noted that on this post I run Xcode on OS X, <a href="http://www.codeblocks.org/">Code::Blocks</a>  on Linux (Ubuntu) and Visual Studio on Windows. The detail environments I use are :</p>

<ol>
<li>OS X 10.11.4 El Capitan</li>
<li>Ubuntu 14.04.4 LTS</li>
<li>Xcode Version 7.2</li>
<li>Code::Blocks 13.12, gcc 4.8.4</li>
<li>Visual Studio 2013</li>
<li>Boost 1.60.0</li>
</ol>




<h4>OS X and Linux (Ubuntu)</h4>


<p>There are several ways of <a href="http://www.boost.org/">Boost</a> installation. Instead of build from source code, we can use package manager such as <a href="https://www.macports.org/">MacPorts</a>, <a href="http://brew.sh/">Homebrew</a>, <a href="https://en.wikipedia.org/wiki/Advanced_Packaging_Tool">Advance Package Tool</a>, etc. In this post we will build <a href="http://www.boost.org/">Boost</a> from source code. The installation steps (from source code) on OS X and Ubuntu are the similar. To make it consistent, I use the same installation path for OS X and Ubuntu that is <code>/usr/local/boost_1_60_0</code>. You can use different path if you want. The steps are :</p>

<ol>
<li>Download boost library from <a href="boost.org">Boost website</a></li>
<li>Extract it.</li>
<li>Open terminal, navigate to the extracted directory</li>
<li>Create directory on <code>/usr/local/boost_1_60_0</code>, and ensure IDE has access to the directory. On my case I don't need this step on OS X, but on ubuntu it does.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /usr/local/boost_1_60_0
</span><span class='line'>sudo chmod <span class="m">777</span> -r boost_1_60_0
</span></code></pre></td></tr></table></div></figure>
</li>
<li>
Run command :
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./bootstrap.sh --prefix<span class="o">=</span>/usr/local/boost_1_60_0
</span><span class='line'>./b2 install
</span></code></pre></td></tr></table></div></figure>
This last step quite take time. So you can have coffee while waiting for it :)
</li>
</ol>


<p>Once the installation finish, we should have generated directory. They are <code>/usr/local/boost_1_60_0/include</code> contains header files and <code>/usr/local/boost_1_60_0/lib</code> contains libraries.</p>

<h4>Windows</h4>


<p>The <a href="http://www.boost.org/">Boost</a> installation step on Windows is also similar to the installation step on OS X and Ubuntu.
The steps are :</p>

<ol>
<li>Download boost library from <a href="boost.org">Boost website</a></li>
<li>Extract it to C:\\boost_1_60_0 </li>
<li>Open Visual Studio command prompt. I use Visual Studio 2013 x86 Native Tools Command Prompt native tool (I have not test using default Windows Command Prompt)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'>C:\<span class="p">&gt;</span> <span class="n">cd</span> C:\boost_<span class="m">1</span>_<span class="m">60</span>_<span class="m">0</span>
</span><span class='line'>C:\boost_<span class="m">1</span>_<span class="m">60</span>_<span class="m">0</span><span class="p">&gt;</span> <span class="n">bootstrap</span>.bat
</span><span class='line'>C:\boost_<span class="m">1</span>_<span class="m">60</span>_<span class="m">0</span>&gt; .\b<span class="m">2</span>
</span></code></pre></td></tr></table></div></figure>
As on OS X and Ubuntu, the last step quite take time.
</li>
</ol>




<h2>Configure <a href="http://www.boost.org/">Boost</a> on IDE(s)</h2>


<p>Before create C++ projects on various IDE, let&rsquo;s create a simple C++ hello world code that use Boost libraries. To simplify the test, I grab sample code from <a href="http://stackoverflow.com/questions/999120/c-hello-world-boost-tee-example-program">here</a> <br/>
<figure class='code'><figcaption><span>Hello World</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">iostream</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">fstream</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">boost</span><span class="o">/</span><span class="n">iostreams</span><span class="o">/</span><span class="n">tee</span><span class="p">.</span><span class="n">hpp</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">boost</span><span class="o">/</span><span class="n">iostreams</span><span class="o">/</span><span class="n">stream</span><span class="p">.</span><span class="n">hpp</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="o">::</span><span class="n">iostreams</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">typedef</span> <span class="n">tee_device</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">ostream</span><span class="p">,</span> <span class="n">ofstream</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">TeeDevice</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">stream</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TeeDevice</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">TeeStream</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ofstream</span> <span class="nf">ofs</span><span class="p">(</span><span class="s">&quot;/Users/neutro/Workspace/cpp/sample.txt&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">TeeDevice</span> <span class="nf">my_tee</span><span class="p">(</span><span class="n">cout</span><span class="p">,</span> <span class="n">ofs</span><span class="p">);</span>
</span><span class='line'><span class="n">TeeStream</span> <span class="nf">my_split</span><span class="p">(</span><span class="n">my_tee</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_split</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_split</span><span class="p">.</span><span class="n">flush</span><span class="p">();</span>
</span><span class='line'><span class="n">my_split</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
The snipped code above just print text and write it to a text file. We just want to ensure the IDE&rsquo;s compiler can compile and build the code that includes <a href="http://www.boost.org/">Boost</a> libraries.</p>

<ul>
  <li>
    <h4>Xcode</h4>
    To include Boost libraries on Xcode project :
    <ol>
    <li>Select Xcode project > Build Setting</li>
    <li>Add <code>/usr/local/boost_1_60_0/include/</code> to the Header Search Paths</li>
    <li>Add <code>/usr/local/boost_1_60_0/lib/</code> to the Library Search Paths</li>
    </ol>

    <img class="center" src="/images/post/2016-03-27-xcode.png">

  </li>
  <li>
    <h4>Code::Blocks</h4>
    To include Boost libraries on Code::Blocks project :
    <ol>
    <li>Right Click on Code::Blocks project > Build Option</li>
    <li>
    Select Compiler tab, add <code>/usr/local/boost_1_60_0/include/</code>
    <img class="center" src="/images/post/2016-03-27-codeblocks1.png">
    </li>
    <li>
    Select Linker tab, add <code>/usr/local/boost_1_60_0/lib/</code>
    <img class="center" src="/images/post/2016-03-27-codeblocks2.png">
    </li>
    </ol>
  </li>
  <li>
    <h4>Visual Studio</h4>
    To include Boost libraries on Visual C++ project :
    <ol>
    <li>Right Click on VC++ project > Properties</li>
    <li>Select VC++ Directories on the left pane</li>
    <li>Add <code>C:\boost_1_60_0</code> on Include Directories item</li>
    <li>Add <code>C:\boost_1_60_0\stage\lib</code> on Include Directories item</li>
    <li>Click OK to close the dialog</li>
    </ol>
    <img class="center" src="/images/post/2016-03-27-vs.png">
  </li>
</ul>


<p>The last is rebuild the above code on selected IDE. We should not got any errors once the IDE can detect the <a href="http://www.boost.org/">Boost</a> directory path.</p>

<p><h4>Reference<h4>
<ol type="1">
<li>
<a href="http://www.boost.org/">http://www.boost.org/</a>
</li>
<li>
<a href="https://en.wikipedia.org/wiki/Boost_(C%2B%2B_libraries)">Wikipedia</a>
</li>
</ol></p>
]]></content>
  </entry>
  
</feed>
