<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[neutrofoton]]></title>
  <link href="http://neutrofoton.github.io/atom.xml" rel="self"/>
  <link href="http://neutrofoton.github.io/"/>
  <updated>2018-09-16T22:58:38+07:00</updated>
  <id>http://neutrofoton.github.io/</id>
  <author>
    <name><![CDATA[neutro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configure PHP and Virtual Host macOS High Sierra]]></title>
    <link href="http://neutrofoton.github.io/blog/2018/09/16/configure-php-and-virtual-host-macos-high-sierra/"/>
    <updated>2018-09-16T08:48:43+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2018/09/16/configure-php-and-virtual-host-macos-high-sierra</id>
    <content type="html"><![CDATA[<p>Apache is pre installed on macOS High Sierra. We just need to run its service with the following command to activate it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apachectl start
</span></code></pre></td></tr></table></div></figure>


<p>Then we just open <code><a href="http://localhost">http://localhost</a></code> via browser. Apache will display a default HTML page come with it.</p>

<h2>Activating PHP Module</h2>

<p>High Sierra also comes with PHP 7. So we don&rsquo;t need to install it manually. To activate PHP module</p>

<ol>
<li>Edit <code>/etc/apache2/httpd.conf</code></li>
<li>Uncomment / remove remark of
<code>#LoadModule php7_module libexec/apache2/libphp7.so</code></li>
<li>Save it and restart apache using
 <code>bash
     $ sudo apachectl restart
</code></li>
</ol>


<p>After applying the steps above, the php module should be activated and ready to use. In this post we will test it after configuring virtual host.</p>

<h2>Configuring Virtual Host</h2>

<p>The steps of configuring apache virtual host are :</p>

<ol>
<li><p>Enabling virtual host configuration in apache config by editing
<code>/etc/apache2/httpd.conf</code>.</p>

<pre><code class="` bash"> $ sudo nano /etc/apache2/httpd.conf
</code></pre></li>
<li><p>Uncomment the section
 <code>Include /private/etc/apache2/extra/httpd-vhosts.conf</code>, then save it.</p></li>
<li><p>Create site directory.
 As an example in this post, let&rsquo;s create a <code>Site</code> folder in home directory called </code>/Users/USERNAME/Sites</code>. Our website sample directory will be put in it, let&rsquo;s create a directory called </code>/Users/USERNAME/Sites/neutro.io</code> and create an <code>/Users/USERNAME/Sites/neutro.io/index.php</code> with simple PHP syntax.</p>

<pre><code class="php"> &lt;?php
 phpinfo();
 ?&gt;
</code></pre></li>
<li><p>Create virtual host configuration by editing the virtual host config</p>

<pre><code class="bash"> $ sudo nano /etc/apache2/extra/httpd-vhosts.conf
</code></pre>

<p> The following code is an example of virtual host with domain name <code>neutro.io</code></p>

<pre><code class="` xml"> &lt;VirtualHost *:80&gt;
     ServerName neutro.io
     ServerAlias www.neutro.io
     DocumentRoot "/Users/neutro/Sites/neutro.io"

 &lt;Directory /Users/neutro/Sites/neutro.io&gt;
         Options Indexes FollowSymLinks
         #Options All Indexes FollowSymLinks
         AllowOverride None
         Require all granted
 &lt;/Directory&gt;


     ErrorLog "/private/var/log/apache2/neutro.io-error_log"
     CustomLog "/private/var/log/apache2/neutro.io-access_log" common
     ServerAdmin web@neutro.io
 &lt;/VirtualHost&gt;
</code></pre>

<p> In this example, we create a <code>neutro.io</code> virtual host that refers to <code>/Users/neutro/Sites/neutro.io</code> as physical directory.</p></li>
<li><p>Register domain for localhost</p>

<p>Since we use <code>neutro.io</code> as domain for localhost, we need to add the domain and <code>www</code> alias to resolve to the localhost address by editing</p>

<pre><code class="bash">    $ sudo nano /etc/hosts
</code></pre>

<p>and add the following line</p>

<pre><code>    127.0.0.1   neutro.io   www.neutro.io
</code></pre></li>
<li><p>Restart apache</p>

<pre><code class="` bash"> $ sudo apachectl restart
</code></pre></li>
</ol>


<p>When we open in browser <code><a href="http://neutro.io">http://neutro.io</a></code>, we should get a page that display PHP info.</p>

<h2>Losing Default Localhost</h2>

<p>After configuring the virtual host, we may lose the previous default localhost that points to <code>/Library/WebServer/Documents/</code> directory. We may get a 403 Forbidden Error when visiting <code><a href="http://localhost">http://localhost</a></code>. To get around this, we need to add in a vhost for localhost and declare this vhost before any of the others. The following code is our new Virtual host after adding config for localhost.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="err">*:80</span><span class="nt">&gt;</span>
</span><span class='line'>    ServerName localhost
</span><span class='line'>    DocumentRoot /Library/WebServer/Documents/
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="err">*:80</span><span class="nt">&gt;</span>
</span><span class='line'>    ServerName neutro.io
</span><span class='line'>    ServerAlias www.neutro.io
</span><span class='line'>    DocumentRoot &quot;/Users/neutro/Sites/neutro.io&quot;
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;Directory</span> <span class="err">/Users/neutro/Sites/neutro.io</span><span class="nt">&gt;</span>
</span><span class='line'>        Options Indexes FollowSymLinks
</span><span class='line'>        #Options All Indexes FollowSymLinks
</span><span class='line'>        AllowOverride None
</span><span class='line'>        Require all granted
</span><span class='line'>   <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    ErrorLog &quot;/private/var/log/apache2/neutro.io-error_log&quot;
</span><span class='line'>    CustomLog &quot;/private/var/log/apache2/neutro.io-access_log&quot; common
</span><span class='line'>    ServerAdmin web@neutro.io
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Restart apache and open <code><a href="http://localhost">http://localhost</a></code> in browser.</p>

<h2>References</h2>

<ol>
<li><a href="https://websitebeaver.com/set-up-localhost-on-macos-high-sierra-apache-mysql-and-php-7-with-sslhttps">https://websitebeaver.com/set-up-localhost-on-macos-high-sierra-apache-mysql-and-php-7-with-sslhttps</a></li>
<li><a href="https://coolestguidesontheplanet.com/set-up-virtual-hosts-in-apache-on-macos-high-sierra-10-13/">https://coolestguidesontheplanet.com/set-up-virtual-hosts-in-apache-on-macos-high-sierra-10-13/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PPTP on macOS]]></title>
    <link href="http://neutrofoton.github.io/blog/2017/11/22/pptp-on-macos/"/>
    <updated>2017-11-22T06:59:38+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2017/11/22/pptp-on-macos</id>
    <content type="html"><![CDATA[<p>One day I need to connect my macOS to a network of client of the company I work for via <a href="https://en.wikipedia.org/wiki/Point-to-Point_Tunneling_Protocol">Point-to-Point Tunneling Protocol (PPTP)</a> VPN. Unfortunately <a href="https://support.apple.com/en-us/HT206844">Apple removed PPTP support on macOS Sierra</a>, so I had to find an alternative for that. Some of them I found are third parties application that need a one time buying or annual subscription. In fact, Apple just remove the user interface option for PPTP VPN, meanwhile the libraries of it are still available on Sierre.</p>

<p>Since the libraries of PPTP are still available on Sierra, theoritically we should be able to call the libraries via terminal. Finally I found 3 blogs that write about PPTP protocol on macos and I put them in a reference section in this blog. Basically the three of them use the same technique that&rsquo;s write a script contains configuration of PPTP that&rsquo;s put in <code>/etc/ppp/peers/</code> and call it via <code>pppd</code> command via terminal.</p>

<p>First of all create a file called <code>/etc/ppp/peers/pptpvpn-client1</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo /etc/ppp/peers/pptpvpn-client1
</span></code></pre></td></tr></table></div></figure>


<p>Fill the <code>pptpvpn-client1</code> that contains configuration that pppd daemon will refer to connect.</p>

<figure class='code'><figcaption><span>/etc/ppp/peers/pptpvpn-client1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>plugin PPTP.ppp
</span><span class='line'>noauth
</span><span class='line'><span class="c"># logfile /tmp/ppp.log</span>
</span><span class='line'>remoteaddress <span class="s2">&quot;xxx.xxx.xxx.xxx&quot;</span>
</span><span class='line'>user <span class="s2">&quot;xxxxxx&quot;</span>
</span><span class='line'>password <span class="s2">&quot;xxxxxxxx&quot;</span>
</span><span class='line'>redialcount 1
</span><span class='line'>redialtimer 5
</span><span class='line'>idle 1800
</span><span class='line'><span class="c"># mru 1368</span>
</span><span class='line'><span class="c"># mtu 1368</span>
</span><span class='line'>receive-all
</span><span class='line'>novj 0:0
</span><span class='line'>ipcp-accept-local
</span><span class='line'>ipcp-accept-remote
</span><span class='line'><span class="c"># noauth</span>
</span><span class='line'>refuse-eap
</span><span class='line'>refuse-pap
</span><span class='line'>refuse-chap-md5
</span><span class='line'>hide-password
</span><span class='line'>mppe-stateless
</span><span class='line'>mppe-128
</span><span class='line'><span class="c"># require-mppe-128</span>
</span><span class='line'>looplocal
</span><span class='line'>nodetach
</span><span class='line'><span class="c"># ms-dns 8.8.8.8</span>
</span><span class='line'>usepeerdns
</span><span class='line'><span class="c"># ipparam gwvpn</span>
</span><span class='line'>defaultroute
</span><span class='line'>debug
</span></code></pre></td></tr></table></div></figure>


<p>Then open terminal and call</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo pppd call pptpvpn-client1
</span></code></pre></td></tr></table></div></figure>


<p>If you cannot connect with the configuration code I use, you can check the error messages displayed in terminal. May be some configuration items do not match with the vpn server setting you connect to.</p>

<p>If the you got no any error messages and connection established with your VPN network you can open a new tab on the terminal and try to ping to an ip address in the VPN local network.</p>

<h2>References</h2>

<ol>
<li><a href="https://smallhacks.wordpress.com/2016/12/20/pptp-on-osx-sierra/">https://smallhacks.wordpress.com/2016/12/20/pptp-on-osx-sierra/</a></li>
<li><a href="https://malucelli.net/2017/05/16/pptp-vpn-on-macos-sierra/">https://malucelli.net/2017/05/16/pptp-vpn-on-macos-sierra/</a></li>
<li><a href="https://www.cts-llc.net/2017/02/21/pptp-on-osx-just-one-last-time.html">https://www.cts-llc.net/2017/02/21/pptp-on-osx-just-one-last-time.html</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create and Consume C++ Class DLL on Windows]]></title>
    <link href="http://neutrofoton.github.io/blog/2017/09/14/create-and-consume-c-plus-plus-class-dll-on-windows/"/>
    <updated>2017-09-14T13:04:05+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2017/09/14/create-and-consume-c-plus-plus-class-dll-on-windows</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/logo/cpp.png"></p>

<p>while visiting clients of the company I work on, sometime I still found some applications especially desktop application build on unmanaged code (such as Delphi, Visual Basic 6, C++, etc). Even though at the time of this blog post, many application build on .NET (managed code) on Windows platform. There are various reasons why they do not migrate to managed code which has some advantages over unmanaged code (such as the application still run well with the version of OS they use, rewrite app will need extra cost, etc). This means unmanaged code application is not dead at all for LOB app, even though the percentage is much lower than the managed one.</p>

<p>Maybe this topic seems out of date topic in the .NET era, but at least this post as a note for my self in case I need it on the other day.</p>

<p>While developing an application, usually we want to share some of our code with other application. Dynamic Link Library (DLL) is Microsoft&rsquo;s implementation of the shared library concept in the Microsoft Windows. The term DLL in this post will refer to unmanaged code and only focus to the one build with Visual C++ compiler on Windows environment.</p>

<p>When we create a DLL, we also create a .lib file that contains information of exported class or functions. When we build an executable that calls the DLL, the linker uses the exported symbols in the .lib file to store this information for the loader. When the loader loads a DLL, the DLL is mapped into the memory space of the executable.</p>

<p>An executable file links to (or loads) a DLL in one of two ways, <em>implicit</em> or <em>explicit linking</em>. In this post will create simple sample both of them how C++ class exported in the two ways. The samples in this post created using IDE Microsoft Visual Studio 2013 Ultimate. To simplify the code, I just created a single solution contains a Win32 DLL project and a console application client. The DLL project contains classes for both sample <em>implicit</em> and <em>explicit linking</em>. Either the console application contains sample code for <em>implicit</em> and <em>explicit linking</em> caller. Here is the classes I use in this sample.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2017-09-04-classdiagram.png"></p>

<h2>Implicit Linking</h2>

<p><em>Implicit linking</em>, where the operating system loads the DLL when the executable using it is loaded. The executable client calls the exported functions of the DLL just as if the functions were statically linked and contained within the executable. <em>Implicit linking</em> is sometimes referred to as static load or load-time dynamic linking<sup>[4]</sup>. Now let&rsquo;s create a sample of DLL with <em>implicit linking</em>.</p>

<p>First of all, create an empty solution in Visual Studio by selecting <code>File</code> > <code>New Project</code> > scroll down on the left pane, expand <code>Other Project Types</code> > <code>Visual Studio Solutions</code> select <code>Black Solution</code>. Fill the solution name as <code>VCppDLL</code>.</p>

<p>Now we have an empty solution in Visual Studio. Right click the <code>VCppDLL</code> solution > <code>Add</code> > <code>New Project</code>. In the left pane of the New Project dialog box, expand Installed templates <code>Visual C++</code>, and then select <code>Win32</code>. Fill the project name as <strong>MathWin32DLL</strong>, then click OK.</p>

<p>On the Win32 Application Wizard dialog in the <code>Application Settings</code> part, select <code>DLL</code> and check <code>Empty project</code>, then click Finish</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2017-09-04-Win32AppWizard.png"></p>

<p>Now we have an empty C++ DLL project in the Visual Studio solution. As the class diagram picture above, let create a simple <code>BaseMath</code> class. Right click the MathWin32DLL project > <code>Add</code> > <code>Class</code>. On <code>Visual C++</code> template on the left pane dialog, select <code>C++ Class</code> > click <code>Add</code>. On the <code>Generic C++ Class Wizard</code>, fill the <code>Class name</code> as <strong>BaseMath</strong> then click <code>Finish</code>. Edit the <code>BaseMath.h</code> with the following code.</p>

<figure class='code'><figcaption><span>BaseMath.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// If you are building the DLL project on the command line,</span>
</span><span class='line'><span class="c1">// use the /D compiler option to define the MATHDLLWIN32_EXPORTS symbol.</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma once</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef MATHWIN32DLL_EXPORTS</span>
</span><span class='line'><span class="cp">#define Math_API __declspec(dllexport)</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#define Math_API __declspec(dllimport)</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// MATHWIN32DLL_EXPORTS</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">core</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">BaseMath</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>      <span class="k">virtual</span> <span class="kt">void</span> <span class="n">Destroy</span><span class="p">()</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">delete</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">virtual</span> <span class="n">string</span> <span class="n">Say</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">virtual</span> <span class="kt">double</span> <span class="n">Calculate</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can delete <code>BaseMath.cpp</code> file since we will make the <code>BaseMath</code> as an <em>abstract class</em>.</p>

<p>In Visual Studio, by default the New Project template for a DLL adds PROJECTNAME_EXPORTS to the defined preprocessor symbols for the DLL project. We can see the preprocessor symbols definition in <code>Property Pages</code> of <strong>MathWin32DLL</strong> project in the <code>Configuration Properties</code> > <code>C/C++</code> > <code>Preposesor</code> > <code>Preposesor Definitions</code>.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2017-09-04-preposesordefinitions.png"></p>

<p>In the code of <code>BaseMath.h</code>, when <code>MATHWIN32DLL_EXPORTS</code> symbol is defined, the <code>Math_API</code> symbol is set to <code>__declspec(dllexport)</code> modifier otherwise it is set to <code>__declspec(dllimport)</code>. The <code>__declspec(dllexport)</code> modifier can be applied to classes, functions, or variables that tells the compiler and linker to export them from the DLL so that it can be used by other applications.</p>

<p>Meanwhile when we include <code>BaseMath.h</code> in client project, <code>Math_API</code> is set to <code>__declspec(dllimport)</code>. This modifier optimizes the import of the exported class in an application.</p>

<p>For the next, let&rsquo;s create another class called <code>AddOperationMath</code>. Edit the <code>AddOperationMath.h</code> and <code>AddOperationMath.cpp</code> respectively as follow.</p>

<figure class='code'><figcaption><span>AddOperationMath.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#pragma once</span>
</span><span class='line'><span class="cp">#include &quot;BaseMath.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">core</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// MS Visual C++ compiler emits C4275 warning about not exported base class.</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Math_API</span> <span class="nl">AddOperationMath</span> <span class="p">:</span> <span class="k">public</span> <span class="n">BaseMath</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>      <span class="n">AddOperationMath</span><span class="p">();</span>
</span><span class='line'>      <span class="k">virtual</span> <span class="o">~</span><span class="n">AddOperationMath</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="n">string</span> <span class="nf">Say</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">double</span> <span class="nf">Calculate</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">static</span> <span class="kt">double</span> <span class="nf">Add</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>AddOperationMath.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;AddOperationMath.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">core</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">AddOperationMath</span><span class="o">::</span><span class="n">AddOperationMath</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">AddOperationMath</span><span class="o">::~</span><span class="n">AddOperationMath</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">string</span> <span class="n">AddOperationMath</span><span class="o">::</span><span class="n">Say</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">string</span> <span class="n">result</span> <span class="o">=</span>  <span class="n">s</span> <span class="o">+</span> <span class="s">&quot; is calling add operation of class AddOperationMath&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">double</span> <span class="n">AddOperationMath</span><span class="o">::</span><span class="n">Calculate</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">double</span> <span class="n">AddOperationMath</span><span class="o">::</span><span class="n">Add</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The class <code>AddOperationMath</code> inherits from <code>BaseMath</code>. We also mark the <code>AddOperationMath</code> class with <code>Math_API</code> macro that&rsquo;s defined in <code>BaseMath.h</code> which means we will expose the <code>AddOperationMath</code> class in the DLL to executable client application. When we compile the DLL project, we should get a warning</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>warning C4275: non dll-interface class &#39;core::BaseMath&#39; used as base for dll-interface class &#39;core::AddOperationMath&#39;
</span></code></pre></td></tr></table></div></figure>


<p>In this case, ideally we should export (mark with <code>Math_API</code> macro) both <code>core::BaseMath</code> and <code>core::AddOperationMath</code> to make the compiler does not fire the warning message.</p>

<p>To complete our sample, let&rsquo;s create another project called <strong><em>MathWin32ClientConsole</em></strong> as we did the creation of <strong><em>MathWin32DLL</em></strong> project, except select <code>Console Application</code> instead of <code>DLL</code> in the <code>Application Settings</code> dialog.</p>

<p>In the <strong><em>MathWin32ClientConsole</em></strong> project, right click > <code>Add</code> > <code>New Item</code>. Select <code>Visual C++</code> project template on the left pane, then select <code>C++ File (.cpp)</code>. Fill the name with <code>Main.cpp</code>.</p>

<p>To make the <strong><em>MathWin32ClientConsole</em></strong> project has reference to <strong><em>MathWin32DLL</em></strong> project, right click <strong><em>MathWin32ClientConsole</em></strong> project > <code>Properties</code>. Scroll up the <code>Property Pages</code> dialog, expand <code>Common Properties</code> on the left pane > select <code>References</code>. Click <code>Add New Reference</code> button, select <code>Projects</code> and check the <code>MathWin32DLL</code> > <code>OK</code>. Now you should see <code>MathWin32DLL</code> added to the <code>References</code> pane as the following picture.</p>

<p> <img class="center" src="http://neutrofoton.github.io/images/post/2017-09-04-MathWin32ClientConsoleReference.png"></p>

<p> To make the <code>AddOperationMath</code> class is recognized in the <strong><em>MathWin32ClientConsole</em></strong> project, we have to include <code>AddOperationMath.h</code>. We can copy the <code>AddOperationMath.h</code> and <code>BaseMath.h</code> to the <strong><em>MathWin32ClientConsole</em></strong> project. But it is not a good way in our scenario, because if we make changes to one of them, we have to recopy it to the <strong><em>MathWin32ClientConsole</em></strong> project directory. To avoid this manual copy, we can include the <strong><em>MathWin32DLL</em></strong> project directory to the <strong><em>MathWin32ClientConsole</em></strong> so that we can include any header files of <strong><em>MathWin32DLL</em></strong> to <strong><em>MathWin32ClientConsole</em></strong> if needed. To do that open the Property pages of <strong><em>MathWin32ClientConsole</em></strong>, select <code>Configuration Properties</code> > <code>C/C++</code> > <code>General</code>. Select the drop-down control next to the <code>Additional Include Directories</code> edit box, and then choose <code>&lt;Edit...&gt;</code>. Select the top pane of the <code>Additional Include Directories</code> dialog box to enable an edit control. In the edit control, fill <code>$(SolutionDir)\MathWin32DLL</code> which tells to Visual Studio to scan or search header files that we include in directory <code>MathWin32DLL</code> inside solution directory.</p>

<p> <img class="center" src="http://neutrofoton.github.io/images/post/2017-09-04-IncludeMathWin32DLLDirectory.png"></p>

<p>Now we can include header file defined in <code>MathWin32DLL</code> from <code>MathWin32ClientConsole</code>. Let create code that call class defined in the DLL.</p>

<figure class='code'><figcaption><span>Main.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;AddOperationMath.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">CallDLLByImplicitLinking</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">,</span> <span class="n">string</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;neutro&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">CallDLLByImplicitLinking</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Press any key to exit &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cin</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">CallDLLByImplicitLinking</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">,</span> <span class="n">string</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; + &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">core</span><span class="o">::</span><span class="n">AddOperationMath</span><span class="o">::</span><span class="n">Add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">core</span><span class="o">::</span><span class="n">AddOperationMath</span><span class="o">*</span> <span class="n">math</span> <span class="o">=</span> <span class="k">new</span> <span class="n">core</span><span class="o">::</span><span class="n">AddOperationMath</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">math</span><span class="o">-&gt;</span><span class="n">Say</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">delete</span> <span class="n">math</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;===============================================================&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>2 + 4 = 6
</span><span class='line'>neutro is calling add operation of class AddOperationMath
</span><span class='line'>
</span><span class='line'>Press any key to exit
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>There is no need to explicitly specify a calling convention for exporting classes or their methods. By default, the C++ compiler uses the <code>__thiscall</code> calling convention for class methods. However, due to different naming decoration schemes that are used by different compilers, the exported C++ class can only be used by the same compiler and by the same version of the compiler. Only the MS Visual C++ compiler can use this DLL now. Both the DLL and the client code must be compiled with the same version of MS Visual C++ in order to ensure that the naming decoration scheme matches between the caller and the callee<sup>[5]</sup></p></blockquote>

<p>To use a DLL by <em>implicit linking</em>, an executable must include the header files that declare the data, functions or C++ classes exported by the DLL in each source file that contains calls to the exported data, functions, and classes.  The classes, functions, and data exported by the DLL must all be marked <code>__declspec(dllimport)</code> in the header file. From a coding perspective, calls to the exported functions are just like any other function call.</p>

<p>To build the calling executable file, we must link with the import library (.lib). If we use an external makefile or build system, we need to specify the file name of the import library where we list other object (.obj) files or libraries that we link.</p>

<p>The operating system must be able to locate the DLL file when it loads the calling executable. This means that we must deploy or verify the existence of the DLL when our application is installed.</p>

<h2>Explicit Linking</h2>

<p><em>Explicit linking</em>, where the operating system loads the DLL on demand at runtime. An executable that uses a DLL by <em>explicit linking</em> must make function calls to explicitly load and unload the DLL and to access the functions exported by the DLL. Unlike calls to functions in a statically linked library, the client executable must call the exported functions in a DLL through a function pointer. <em>Explicit linking</em> is sometimes referred to as dynamic load or run-time dynamic linking<sup>[4]</sup>.</p>

<p>To use a DLL by <em>explicit linking</em>, applications must make a function call to explicitly load the DLL at run time. To explicitly link to a DLL, an application must <sup>[4]</sup>:</p>

<ol>
<li><p>Call <code>LoadLibrary</code>, <code>LoadLibraryEx</code>, or a similar function to load the DLL and obtain a module handle.</p></li>
<li><p>Call <code>GetProcAddress</code> to obtain a function pointer to each exported function that the application calls. Because applications call the DLL functions through a pointer, the compiler does not generate external references, so there is no need to link with an import library. However, you must have a typedef or using statement that defines the call signature of the exported functions that you call.</p></li>
<li><p>Call <code>FreeLibrary</code> when done with the DLL.</p></li>
</ol>


<p>To create a sample for <em>explicit linking</em>, we will use an abstract interface (a class with pure virtual methods, and no data) and create a factory method for object instantiation.</p>

<p>On the <strong><em>MathWin32DLL</em></strong> create a new class called <code>LogarithmicMath</code>. Edit the header and implementation files as follow</p>

<figure class='code'><figcaption><span>LogarithmicMath.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#pragma once</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;BaseMath.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">core</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">LogarithmicMath</span> <span class="o">:</span> <span class="k">public</span> <span class="n">BaseMath</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>      <span class="n">LogarithmicMath</span><span class="p">();</span>
</span><span class='line'>      <span class="k">virtual</span> <span class="o">~</span><span class="n">LogarithmicMath</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="n">string</span> <span class="nf">Say</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">double</span> <span class="nf">Calculate</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>LogarithmicMath.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;LogarithmicMath.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;math.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">core</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">LogarithmicMath</span><span class="o">::</span><span class="n">LogarithmicMath</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">LogarithmicMath</span><span class="o">::~</span><span class="n">LogarithmicMath</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">string</span> <span class="n">LogarithmicMath</span><span class="o">::</span><span class="n">Say</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">string</span> <span class="n">result</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="s">&quot; is calling Logarithmic operation of class LogarithmicMath&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">double</span> <span class="n">LogarithmicMath</span><span class="o">::</span><span class="n">Calculate</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">log10</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">/</span> <span class="n">log10</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, create a <code>Factory</code> class that encapsulates <code>LogarithmicMath</code> instantiation and will be called from client app.</p>

<figure class='code'><figcaption><span>Factory.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;BaseMath.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="n">Math_API</span> <span class="n">core</span><span class="o">::</span><span class="n">BaseMath</span><span class="o">*</span> <span class="kr">__cdecl</span> <span class="n">CreateLogarithmicMath</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Factory.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;Factory.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;LogarithmicMath.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">core</span><span class="o">::</span><span class="n">BaseMath</span><span class="o">*</span> <span class="n">CreateLogarithmicMath</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="n">core</span><span class="o">::</span><span class="n">LogarithmicMath</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see that the <code>LogarithmicMath</code> class look like a standard C++ class. Instead of directly export the <code>LogarithmicMath</code> class, we use <code>Factory</code> that handle the export technics.</p>

<p>In the <code>Factory.h</code> defined <code>extern "C"</code> which tells the C++ compiler that the linker should use the C calling convention. It is required in order to prevent the mangling of the function name. So, this function is exposed as a regular C function, and can be easily recognized by any C-compatible compiler. The name itself is exported from the DLL unmangled (<code>CreateLogarithmicMath</code>). The <code>Math_API</code> tells the linker to export the <code>CreateLogarithmicMath</code> method from the DLL. <code>__cdecl</code> is the default calling convention for C and C++ programs.</p>

<p>Now let create a sample code in the <strong><em>MathWin32ClientConsole</em></strong> by editing the <code>Main.cpp</code> as following.</p>

<figure class='code'><figcaption><span>Main.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;Windows.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;AddOperationMath.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">core</span><span class="o">::</span><span class="n">BaseMath</span><span class="o">*</span> <span class="p">(</span><span class="kr">__cdecl</span> <span class="o">*</span><span class="n">LogarithmicMathFactory</span><span class="p">)();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">CallDLLByImplicitLinking</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">,</span> <span class="n">string</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">CallDLLByExplicitLinking</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">,</span> <span class="n">string</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;neutro&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">CallDLLByImplicitLinking</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CallDLLByExplicitLinking</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Press any key to exit &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cin</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">CallDLLByImplicitLinking</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">,</span> <span class="n">string</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; + &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">core</span><span class="o">::</span><span class="n">AddOperationMath</span><span class="o">::</span><span class="n">Add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">core</span><span class="o">::</span><span class="n">AddOperationMath</span><span class="o">*</span> <span class="n">math</span> <span class="o">=</span> <span class="k">new</span> <span class="n">core</span><span class="o">::</span><span class="n">AddOperationMath</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">math</span><span class="o">-&gt;</span><span class="n">Say</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">delete</span> <span class="n">math</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;===============================================================&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">CallDLLByExplicitLinking</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">,</span> <span class="n">string</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">HMODULE</span> <span class="n">dll</span> <span class="o">=</span> <span class="n">LoadLibrary</span><span class="p">(</span><span class="s">L&quot;MathWin32DLL.dll&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dll</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Fail load library&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">LogarithmicMathFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">LogarithmicMathFactory</span><span class="o">&gt;</span><span class="p">(</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">dll</span><span class="p">,</span> <span class="s">&quot;CreateLogarithmicMath&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">factory</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Unable to load CreateLogarithmicMath from DLL!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">FreeLibrary</span><span class="p">(</span><span class="n">dll</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">core</span><span class="o">::</span><span class="n">BaseMath</span><span class="o">*</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">factory</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; log (&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;) = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">instance</span><span class="o">-&gt;</span><span class="n">Calculate</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">instance</span><span class="o">-&gt;</span><span class="n">Say</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">instance</span><span class="o">-&gt;</span><span class="n">Destroy</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">FreeLibrary</span><span class="p">(</span><span class="n">dll</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;===============================================================&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now build and run the <strong><em>MathWin32ClientConsole</em></strong>, we should get the following output.</p>

<figure class='code'><figcaption><span>output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>2 + 4 = 6
</span><span class='line'>neutro is calling add operation of class AddOperationMath
</span><span class='line'>
</span><span class='line'>===============================================================
</span><span class='line'>2 log (4) = 2
</span><span class='line'>neutro is calling Logarithmic operation of class LogarithmicMath
</span><span class='line'>
</span><span class='line'>===============================================================
</span><span class='line'>Press any key to exit
</span></code></pre></td></tr></table></div></figure>


<p>In order to ensure proper resource release, an abstract interface provides an additional method for the disposal of an instance. In this case we provide <code>Destroy</code> method. Calling this method manually can be tedious and error prone. It&rsquo;s recommend use smart pointer for auto resource release instead of manual release.</p>

<p>The code of this article can be found <a href="https://github.com/neutrofoton/VCppDLL">here</a></p>

<h2>References</h2>

<ol>
<li><a href="https://docs.microsoft.com/en-us/cpp/build/walkthrough-creating-and-using-a-dynamic-link-library-cpp">https://docs.microsoft.com/en-us/cpp/build/walkthrough-creating-and-using-a-dynamic-link-library-cpp</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/1ez7dh12.aspx">https://msdn.microsoft.com/en-us/library/1ez7dh12.aspx</a></li>
<li><a href="https://docs.microsoft.com/en-us/cpp/build/dlls-in-visual-cpp">https://docs.microsoft.com/en-us/cpp/build/dlls-in-visual-cpp</a></li>
<li><a href="https://docs.microsoft.com/en-us/cpp/build/linking-an-executable-to-a-dll#determining-which-linking-method-to-use">https://docs.microsoft.com/en-us/cpp/build/linking-an-executable-to-a-dll#determining-which-linking-method-to-use</a></li>
<li><a href="https://www.codeproject.com/Articles/28969/HowTo-Export-C-classes-from-a-DLL">https://www.codeproject.com/Articles/28969/HowTo-Export-C-classes-from-a-DLL</a></li>
<li><a href="http://eli.thegreenplace.net/2011/09/16/exporting-c-classes-from-a-dll">http://eli.thegreenplace.net/2011/09/16/exporting-c-classes-from-a-dll</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WinMerge and DiffMerge as Git Diff Merge Tool]]></title>
    <link href="http://neutrofoton.github.io/blog/2017/05/10/winmerge-and-diffmerge-as-git-diff-merge-tool/"/>
    <updated>2017-05-10T10:01:23+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2017/05/10/winmerge-and-diffmerge-as-git-diff-merge-tool</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/logo/git.png">
On software development while working with source control, it&rsquo;s inevitable sometime we get our code conflicts with other, since we work in a team. There are many diff and merge tools out there and some of them can be integrated with with Git. In this post I just want to note what I did in my development machine (Windows 7 and macOS Sierra)</p>

<h2>DiffMerge on macOS</h2>

<p>For my macOS development machine I use <a href="http://www.sourcegear.com/diffmerge/">DiffMerge</a>. Actually DiffMerge is not only available for macOS, but also for Windows and Linux. So we can use it as Git diff merge tool as well on Windows and Linux. To configure Git to use DiffMerge can be done by running the following command via terminal.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config --global mergetool.prompt <span class="nb">false</span>
</span><span class='line'><span class="nv">$ </span>git config --global mergetool.keepBackup <span class="nb">false</span>
</span><span class='line'><span class="nv">$ </span>git config --global mergetool.keepTemporaries <span class="nb">false</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git config --global diff.tool diffmerge
</span><span class='line'><span class="nv">$ </span>git config --global difftool.diffmerge.cmd <span class="s1">&#39;diffmerge &quot;$LOCAL&quot; &quot;$REMOTE&quot;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git config --global merge.tool diffmerge
</span><span class='line'><span class="nv">$ </span>git config --global mergetool.diffmerge.cmd <span class="s1">&#39;diffmerge --merge --result=&quot;$MERGED&quot; &quot;$LOCAL&quot; &quot;$(if test -f &quot;$BASE&quot;; then echo &quot;$BASE&quot;; else echo &quot;$LOCAL&quot;; fi)&quot; &quot;$REMOTE&quot;&#39;</span>
</span><span class='line'><span class="nv">$ </span>git config --global mergetool.diffmerge.trustExitCode <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>The command will add the following config code in global <code>.gitconfig</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>mergetool<span class="o">]</span>
</span><span class='line'>  <span class="nv">prompt</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nb">  </span><span class="nv">keepBackup</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nb">  </span><span class="nv">keepTemporaries</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>diff<span class="o">]</span>
</span><span class='line'>  <span class="nv">tool</span> <span class="o">=</span> diffmerge
</span><span class='line'>
</span><span class='line'><span class="o">[</span>difftool <span class="s2">&quot;diffmerge&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="nv">cmd</span> <span class="o">=</span> diffmerge <span class="se">\&quot;</span><span class="nv">$LOCAL</span><span class="se">\&quot;</span> <span class="se">\&quot;</span><span class="nv">$REMOTE</span><span class="se">\&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>merge<span class="o">]</span>
</span><span class='line'>  <span class="nv">tool</span> <span class="o">=</span> diffmerge
</span><span class='line'>
</span><span class='line'><span class="o">[</span>mergetool <span class="s2">&quot;diffmerge&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="nv">cmd</span> <span class="o">=</span> <span class="s2">&quot;diffmerge --merge --result=\&quot;$MERGED\&quot; \&quot;$LOCAL\&quot; \&quot;$(if test -f \&quot;$BASE\&quot;; then echo \&quot;$BASE\&quot;; else echo \&quot;$LOCAL\&quot;; fi)\&quot; \&quot;$REMOTE\&quot;&quot;</span>
</span><span class='line'>  <span class="nv">trustExitCode</span> <span class="o">=</span> <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also directly edit the <code>.gitconfig</code> and manually add the config code.</p>

<h2>WinMerge 2.x on Windows</h2>

<p><a href="http://winmerge.org/">WinMerge</a> is an open source differencing and merging tool for Windows. It can compare both folders and files, presenting differences in a visual text format that is easy to understand and handle.
At the time of writing this blog post, WinMerge 3 is still in progress of development and no release yet. WinMerge 3 will be modern compare/synchronization tool. It will be based on Qt library and cross-platform. You can use the same tool in Windows and in Linux.
So for now and so on in this blog post, WinMerge term means WinMerge 2.x.</p>

<p>After installing WinMerge, to configure it as diff and merge tool of Git is by adding /editing the following config setting to <code>C:\Users\{UserName}\.gitconfig</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>mergetool<span class="o">]</span>
</span><span class='line'>  <span class="nv">prompt</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nb">  </span><span class="nv">keepBackup</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nb">  </span><span class="nv">keepTemporaries</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>merge<span class="o">]</span>
</span><span class='line'>  <span class="nv">tool</span> <span class="o">=</span> winmerge
</span><span class='line'>
</span><span class='line'><span class="o">[</span>mergetool <span class="s2">&quot;winmerge&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="nv">name</span> <span class="o">=</span> WinMerge
</span><span class='line'>  <span class="nv">trustExitCode</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">  </span><span class="nv">cmd</span> <span class="o">=</span> <span class="s2">&quot;/c/Program\\ Files\\ \\(x86\\)/WinMerge/WinMergeU.exe&quot;</span> -u -e -dl <span class="se">\&quot;</span>Local<span class="se">\&quot;</span> -dr <span class="se">\&quot;</span>Remote<span class="se">\&quot;</span> <span class="nv">$LOCAL</span> <span class="nv">$REMOTE</span> <span class="nv">$MERGED</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>diff<span class="o">]</span>
</span><span class='line'>  <span class="nv">tool</span> <span class="o">=</span> winmerge
</span><span class='line'>
</span><span class='line'><span class="o">[</span>difftool <span class="s2">&quot;winmerge&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="nv">name</span> <span class="o">=</span> WinMerge
</span><span class='line'>  <span class="nv">trustExitCode</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">  </span><span class="nv">cmd</span> <span class="o">=</span> <span class="s2">&quot;/c/Program\\ Files\\ \\(x86\\)/WinMerge/WinMergeU.exe&quot;</span> -u -e <span class="nv">$LOCAL</span> <span class="nv">$REMOTE</span>
</span></code></pre></td></tr></table></div></figure>


<p>The config above also can be configured by Git bash shell with <code>&ndash;global</code> parameter instead of manual edit via text editor.</p>

<p>Now, whenever you want it to launch diffs just use difftool[1]:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># diff the local file.m against the checked-in version</span>
</span><span class='line'><span class="nv">$ </span>git difftool file.m
</span><span class='line'>
</span><span class='line'><span class="c"># diff the local file.m against the version in some-feature-branch</span>
</span><span class='line'><span class="nv">$ </span>git difftool some-feature-branch file.m
</span><span class='line'>
</span><span class='line'><span class="c"># diff the file.m from the Build-54 tag to the Build-55 tag</span>
</span><span class='line'><span class="nv">$ </span>git difftool Build-54..Build-55 file.m
</span></code></pre></td></tr></table></div></figure>


<p>To resolve merge conflicts</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git mergetool
</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ol>
<li><a href="http://twobitlabs.com/2011/08/install-diffmerge-git-mac-os-x/">http://twobitlabs.com/2011/08/install-diffmerge-git-mac-os-x/</a></li>
<li><a href="http://winmerge.org/">http://winmerge.org/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino and NEO-6M GPS Module]]></title>
    <link href="http://neutrofoton.github.io/blog/2017/05/04/arduino-and-neo-6m-gps-module/"/>
    <updated>2017-05-04T07:32:17+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2017/05/04/arduino-and-neo-6m-gps-module</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/logo/arduino.png">
Couple days ayo, I met a friend of mine when I was at university. He plays extensively with <a href="http://www.arduino.org">Arduino</a>, <a href="https://www.raspberrypi.org">Raspberry Pi</a>, <a href="http://www.orangepi.org">Orange Pi</a> and other IoT stuff. He showed me how interesting IoT is, include wiring modules, and surely its programming. I remember that a few months ago, I got Arduino kit with GPS module from another friend of mine. The items were idle since I have other things to do in my work. Yesterday, I just have a free time to play with the Arduino kit. And I never play or explore Arduino before.</p>

<p>On the first time exploring Arduino, the hardware I use are :</p>

<ol>
<li><a href="http://www.arduino.org/products/boards/arduino-uno">Arduino Uno</a></li>
<li><a href="https://www.aliexpress.com/store/product/GPS-Receiver-U-blox-NEO-6M-Module-with-Ceramic-Antenna-TTL-Interface-for-raspberry-pi-2/1266255_32365271431.html">GPS Module NEO-6M-0-001</a></li>
</ol>


<p>To get working Arduino with GPS module, I use <a href="https://github.com/mikalhart/TinyGPS">TinyGPS</a> library. TinyGPS is designed to provide most of the NMEA GPS functionality. The detail description about TinyGPS can found <a href="http://arduiniana.org/libraries/tinygps/">here</a>. TinyGPS is additional library for Arduino. So we need to install it before include it to our project. The steps of installation additional Arduino libraries can be found <a href="https://www.arduino.cc/en/Guide/Libraries">here</a></p>

<p>The table below shows wiring between Arduino and NEO-6M-0-001 GPS module</p>

<table>
<thead>
<tr>
<th> NEO-6M-0-001 GPS     </th>
<th> Arduino Uno      </th>
<th> Cable</th>
</tr>
</thead>
<tbody>
<tr>
<td> Vcc                  </td>
<td> Power 3.3 Volt   </td>
<td> Black</td>
</tr>
<tr>
<td> GND                  </td>
<td> GND              </td>
<td> White</td>
</tr>
<tr>
<td> TXD                  </td>
<td> RX pin 4         </td>
<td> Gray</td>
</tr>
<tr>
<td> RXD                  </td>
<td> TX pin 3         </td>
<td> Magenta</td>
</tr>
</tbody>
</table>


<p><p/></p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2017-05-04-neo-6m-0-0-001.png"></p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2017-05-04-arduino-uno.png"></p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2017-05-04-arduino-uno-gps.png"></p>

<p>To simplify our testing, I grab sample source code provided by <a href="https://github.com/mikalhart/TinyGPS">TinyGPS</a>. On This sample, I Set the data rate in bits per second (baud) for serial data transmission to 9600.</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;SoftwareSerial.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;TinyGPS.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/<em> This sample code demonstrates the normal use of a TinyGPS object.</span>
</span><span class='line'><span class="cm">   It requires the use of SoftwareSerial, and assumes that you have a</span>
</span><span class='line'><span class="cm">   4800-baud serial GPS device hooked up on pins 4(rx) and 3(tx).</span>
</span><span class='line'><span class="cm"></em>/</span>
</span><span class='line'>
</span><span class='line'><span class="n">TinyGPS</span> <span class="n">gps</span><span class="p">;</span>
</span><span class='line'><span class="n">SoftwareSerial</span> <span class="nf">ss</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">smartdelay</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">ms</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">print_float</span><span class="p">(</span><span class="kt">float</span> <span class="n">val</span><span class="p">,</span> <span class="kt">float</span> <span class="n">invalid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">prec</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">print_int</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">val</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">invalid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">print_date</span><span class="p">(</span><span class="n">TinyGPS</span> <span class="o">&amp;</span><span class="n">gps</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">print_str</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o"><em></span><span class="n">str</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//Serial.begin(115200);</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;Testing TinyGPS library v. &quot;</span><span class="p">);</span> <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">TinyGPS</span><span class="o">::</span><span class="n">library_version</span><span class="p">());</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;by Mikal Hart&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;Sats HDOP Latitude  Longitude  Fix  Date       Time     Date Alt    Course Speed Card  Distance Course Card  Chars Sentences Checksum&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;          (deg)     (deg)      Age                      Age  (m)    &mdash; from GPS &mdash;-  &mdash;- to London  &mdash;-  RX    RX        Fail&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//ss.begin(4800);</span>
</span><span class='line'>  <span class="n">ss</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">flat</span><span class="p">,</span> <span class="n">flon</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">age</span><span class="p">,</span> <span class="n">date</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">chars</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">sentences</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">failed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">LONDON_LAT</span> <span class="o">=</span> <span class="mf">51.508131</span><span class="p">,</span> <span class="n">LONDON_LON</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.128002</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">print_int</span><span class="p">(</span><span class="n">gps</span><span class="p">.</span><span class="n">satellites</span><span class="p">(),</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_SATELLITES</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_int</span><span class="p">(</span><span class="n">gps</span><span class="p">.</span><span class="n">hdop</span><span class="p">(),</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_HDOP</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">gps</span><span class="p">.</span><span class="n">f_get_position</span><span class="p">(</span><span class="o">&amp;</span><span class="n">flat</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">flon</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">age</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_float</span><span class="p">(</span><span class="n">flat</span><span class="p">,</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_F_ANGLE</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_float</span><span class="p">(</span><span class="n">flon</span><span class="p">,</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_F_ANGLE</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_int</span><span class="p">(</span><span class="n">age</span><span class="p">,</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_AGE</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_date</span><span class="p">(</span><span class="n">gps</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_float</span><span class="p">(</span><span class="n">gps</span><span class="p">.</span><span class="n">f_altitude</span><span class="p">(),</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_F_ALTITUDE</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_float</span><span class="p">(</span><span class="n">gps</span><span class="p">.</span><span class="n">f_course</span><span class="p">(),</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_F_ANGLE</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_float</span><span class="p">(</span><span class="n">gps</span><span class="p">.</span><span class="n">f_speed_kmph</span><span class="p">(),</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_F_SPEED</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_str</span><span class="p">(</span><span class="n">gps</span><span class="p">.</span><span class="n">f_course</span><span class="p">()</span> <span class="o">==</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_F_ANGLE</span> <span class="o">?</span> <span class="s">&quot;</em><strong> &quot;</span> <span class="o">:</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">cardinal</span><span class="p">(</span><span class="n">gps</span><span class="p">.</span><span class="n">f_course</span><span class="p">()),</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_int</span><span class="p">(</span><span class="n">flat</span> <span class="o">==</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_F_ANGLE</span> <span class="o">?</span> <span class="mh">0xFFFFFFFF</span> <span class="o">:</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">TinyGPS</span><span class="o">::</span><span class="n">distance_between</span><span class="p">(</span><span class="n">flat</span><span class="p">,</span> <span class="n">flon</span><span class="p">,</span> <span class="n">LONDON_LAT</span><span class="p">,</span> <span class="n">LONDON_LON</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">,</span> <span class="mh">0xFFFFFFFF</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_float</span><span class="p">(</span><span class="n">flat</span> <span class="o">==</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_F_ANGLE</span> <span class="o">?</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="nl">GPS_INVALID_F_ANGLE</span> <span class="p">:</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">course_to</span><span class="p">(</span><span class="n">flat</span><span class="p">,</span> <span class="n">flon</span><span class="p">,</span> <span class="n">LONDON_LAT</span><span class="p">,</span> <span class="n">LONDON_LON</span><span class="p">),</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_F_ANGLE</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_str</span><span class="p">(</span><span class="n">flat</span> <span class="o">==</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_F_ANGLE</span> <span class="o">?</span> <span class="s">&quot;</strong><em> &quot;</span> <span class="o">:</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">cardinal</span><span class="p">(</span><span class="n">TinyGPS</span><span class="o">::</span><span class="n">course_to</span><span class="p">(</span><span class="n">flat</span><span class="p">,</span> <span class="n">flon</span><span class="p">,</span> <span class="n">LONDON_LAT</span><span class="p">,</span> <span class="n">LONDON_LON</span><span class="p">)),</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gps</span><span class="p">.</span><span class="n">stats</span><span class="p">(</span><span class="o">&amp;</span><span class="n">chars</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sentences</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">failed</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_int</span><span class="p">(</span><span class="n">chars</span><span class="p">,</span> <span class="mh">0xFFFFFFFF</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_int</span><span class="p">(</span><span class="n">sentences</span><span class="p">,</span> <span class="mh">0xFFFFFFFF</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_int</span><span class="p">(</span><span class="n">failed</span><span class="p">,</span> <span class="mh">0xFFFFFFFF</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">smartdelay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">smartdelay</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">ms</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">ss</span><span class="p">.</span><span class="n">available</span><span class="p">())</span>
</span><span class='line'>      <span class="n">gps</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">ss</span><span class="p">.</span><span class="n">read</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">millis</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">ms</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">print_float</span><span class="p">(</span><span class="kt">float</span> <span class="n">val</span><span class="p">,</span> <span class="kt">float</span> <span class="n">invalid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">prec</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">==</span> <span class="n">invalid</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">len</span><span class="o">&ndash;</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="sc">&#39;</em>&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="sc">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">prec</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">vi</span> <span class="o">=</span> <span class="n">abs</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flen</span> <span class="o">=</span> <span class="n">prec</span> <span class="o">+</span> <span class="p">(</span><span class="n">val</span> <span class="o">&lt;</span> <span class="mf">0.0</span> <span class="o">?</span> <span class="mi">2</span> <span class="o">:</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// . and -</span>
</span><span class='line'>    <span class="n">flen</span> <span class="o">+=</span> <span class="n">vi</span> <span class="o">&gt;=</span> <span class="mi">1000</span> <span class="o">?</span> <span class="mi">4</span> <span class="o">:</span> <span class="n">vi</span> <span class="o">&gt;=</span> <span class="mi">100</span> <span class="o">?</span> <span class="mi">3</span> <span class="o">:</span> <span class="n">vi</span> <span class="o">&gt;=</span> <span class="mi">10</span> <span class="o">?</span> <span class="mi">2</span> <span class="o">:</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">flen</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="sc">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">smartdelay</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">print_int</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">val</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">invalid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">sz</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">==</span> <span class="n">invalid</span><span class="p">)</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">sz</span><span class="p">,</span> <span class="s">&quot;<strong><strong><strong><em>&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">sz</span><span class="p">,</span> <span class="s">&quot;%ld&quot;</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sz</span><span class="p">[</span><span class="n">len</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">strlen</span><span class="p">(</span><span class="n">sz</span><span class="p">);</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sz</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39; &#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sz</span><span class="p">[</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39; &#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">sz</span><span class="p">);</span>
</span><span class='line'>  <span class="n">smartdelay</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">print_date</span><span class="p">(</span><span class="n">TinyGPS</span> <span class="o">&amp;</span><span class="n">gps</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">year</span><span class="p">;</span>
</span><span class='line'>  <span class="n">byte</span> <span class="n">month</span><span class="p">,</span> <span class="n">day</span><span class="p">,</span> <span class="n">hour</span><span class="p">,</span> <span class="n">minute</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="n">hundredths</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gps</span><span class="p">.</span><span class="n">crack_datetime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">year</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">month</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">day</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hour</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">minute</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">second</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hundredths</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">age</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">==</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_AGE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;</em></strong></strong></strong><strong><em> </em></strong><em>**** &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">sz</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">sz</span><span class="p">,</span> <span class="s">&quot;%02d/%02d/%02d %02d:%02d:%02d &quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">month</span><span class="p">,</span> <span class="n">day</span><span class="p">,</span> <span class="n">year</span><span class="p">,</span> <span class="n">hour</span><span class="p">,</span> <span class="n">minute</span><span class="p">,</span> <span class="n">second</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">sz</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">print_int</span><span class="p">(</span><span class="n">age</span><span class="p">,</span> <span class="n">TinyGPS</span><span class="o">::</span><span class="n">GPS_INVALID_AGE</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">smartdelay</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">print_str</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o"></em></span><span class="n">str</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">slen</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">slen</span> <span class="o">?</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">:</span> <span class="sc">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">smartdelay</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The output of this testing on Serial monitor showed as follow.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2017-05-04-output.png"></p>

<p>If you do not get similar output as above (get <code>*</code> on table output) it means your arduino fails get data from GPS module. Please ensure your GPS led is blinking which indicate it receives data from the GPS satellites.</p>

<p>The other thing that you should ensure is you have the right wiring. RX of the Arduino (pin 4, according to the <code>SoftwareSerial</code> statement) goes to the TX of the GPS. Arduino pin 3 (ss TX) goes to the GPS RX.</p>

<p>To validate the accuracy of GPS output (Latitude, Longitude) showed on Arduino Serial Monitor you can check it on google map.</p>

<h2>References</h2>

<p><ul>
<li><a href="https://www.u-blox.com/sites/default/files/products/documents/NEO-6_DataSheet_(GPS.G6-HW-09005).pdf">NEO-6 u-blox 6 GPS Modules Data Sheet</a></li>
<li><a href="http://www.ayomaonline.com/iot/gy-gps6mv2-neo6mv2-neo-6m-gps-module-with-arduino-usb-ttl/">GY-GPS6MV2 – NEO6MV2 (NEO 6M) GPS MODULE WITH ARDUINO / USB TTL</a></li>
<li><a href="https://arduino.stackexchange.com/questions/24235/arduino-softwareserial-cant-get-data-from-neo-6m-gps-module">Arduino SoftwareSerial - can&rsquo;t get data from NEO 6M-GPS module</a></li>
<ul></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import Existing Git Repository to Another]]></title>
    <link href="http://neutrofoton.github.io/blog/2017/04/17/import-existing-git-repository-to-another/"/>
    <updated>2017-04-17T16:44:53+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2017/04/17/import-existing-git-repository-to-another</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/logo/git.png"></p>

<p>While working with git, we may need to import source code from an existing git repository to our working copy. Merging it and pushing to origin master.
The scenario that I had was :</p>

<p><br/></p>

<ul>
<li> I have a project template that I store on a git repository. Let say the url is <code>http://server/git/template.git</code>
   <img class="center" src="http://neutrofoton.github.io/images/post/2017-04-17-template.png">
</li>
<li>
I have another git repository with url <code>http://server/git/project1.git</code>
   <img class="center" src="http://neutrofoton.github.io/images/post/2017-04-17-project1.png">
</li>
</ul>


<p>What I need from the two repositories are importing all contents (libraries, sources, etc) from <code>template</code> repository into my <code>project1</code> working copy. Since I don&rsquo;t want to coding from zero. To get into what I need, here are the steps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># git clone project1</span>
</span><span class='line'><span class="nv">$ </span>git clone http://server/git/project1.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>project1
</span><span class='line'>
</span><span class='line'><span class="c"># add remote url named REMOTE.TEMPLATE</span>
</span><span class='line'><span class="nv">$ </span>git remote add REMOTE.TEMPLATE http://server/git/template.git
</span><span class='line'>
</span><span class='line'><span class="c"># fetch from REMOTE.TEMPLATE remote url</span>
</span><span class='line'><span class="nv">$ </span>git fetch REMOTE.TEMPLATE
</span><span class='line'>
</span><span class='line'><span class="c"># checkout REMOTE.TEMPLATE/master and create a new branch called TEMPLATE</span>
</span><span class='line'><span class="nv">$ </span>git checkout -b TEMPLATE REMOTE.TEMPLATE/master
</span><span class='line'>
</span><span class='line'><span class="c">#switch back to master branch</span>
</span><span class='line'><span class="nv">$ </span>git checkout master
</span><span class='line'>
</span><span class='line'><span class="c"># merge TEMPLATE brach to master branch</span>
</span><span class='line'><span class="nv">$ </span>git merge TEMPLATE
</span><span class='line'>
</span><span class='line'><span class="c"># commit changes</span>
</span><span class='line'><span class="nv">$ </span>git commit
</span></code></pre></td></tr></table></div></figure>


<p>The next step is checking the merge result on our working copy of master branch.
If what we have been imported already there, now we can remove the remote URL of REMOTE.TEMPLATE
and TEMPLATE branch to get rid of the extra branch before pushing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># remove REMOTE.TEMPLATE remote address</span>
</span><span class='line'><span class="nv">$ </span>git remote rm REMOTE.TEMPLATE
</span><span class='line'>
</span><span class='line'><span class="c"># remove template branch. It is useful to get rid of the extra branch before pushing</span>
</span><span class='line'><span class="nv">$ </span>git branch -d TEMPLATE
</span><span class='line'>
</span><span class='line'><span class="c"># push to remote origin/master</span>
</span><span class='line'><span class="nv">$ </span>git push
</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ol>
<li><a href="http://stackoverflow.com/questions/1683531/how-to-import-existing-git-repository-into-another">http://stackoverflow.com/questions/1683531/how-to-import-existing-git-repository-into-another</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working With Multiple Github Account on a Computer]]></title>
    <link href="http://neutrofoton.github.io/blog/2017/03/26/working-with-multiple-github-account-on-a-computer/"/>
    <updated>2017-03-26T23:47:22+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2017/03/26/working-with-multiple-github-account-on-a-computer</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/logo/git.png">
Source control is one of a basic need for software development, especially when we work on a team. Git is one of popular distributed source control. Working with multiple github account on the same computer need a few tricky way. Let&rsquo;s assume we have cloned the repository from github to local computer. The following ways are the simple ways I got on internet.</p>

<h2>Change Remote URL to HTTPS</h2>

<p>This way is by changing the remote URL to HTTPS with the following format.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote <span class="nb">set</span>-url origin https://USERNAME@github.com/USERNAME/PROJECTNAME.git
</span></code></pre></td></tr></table></div></figure>


<p>Then do normal git operation such as <code>commit</code>, <code>push</code> etc.
To ensure that the commits appear as performed by USERNAME, we can configure the username and email on our working directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config user.name USERNAME
</span><span class='line'><span class="nv">$ </span>git config user.email USERNAME@example.com
</span></code></pre></td></tr></table></div></figure>


<h2>Multiple SSH Key</h2>

<p>The other way is by using multiple SSH key. <a href="https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574">Here</a> is the complete tutorial by <a href="https://twitter.com/jeffrey_way">Jeffrey Way</a></p>

<h2>References</h2>

<ol>
<li><a href="http://stackoverflow.com/questions/3860112/multiple-github-accounts-on-the-same-computer">http://stackoverflow.com/questions/3860112/multiple-github-accounts-on-the-same-computer</a></li>
<li><a href="https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574">https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Set With Custom Comparator]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/12/30/c-plus-plus-set-with-custom-comparator/"/>
    <updated>2016-12-30T09:42:04+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/12/30/c-plus-plus-set-with-custom-comparator</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/logo/cpp.png"></p>

<p><code>std::set</code> is a C++ STL container that store unique elements following a specific order. It is defined in the <code>set</code> header file.
<br/></p>

<p>Benefits and Features of <code>std::set</code>[3]:</p>

<p><ol>
<li>It’s doesn’t allow duplicate elements i.e. it only contains unique elements</li>
<li>
<code>std::set</code> can contain element of any specified type in template argument
</li>
<li>
<code>std::set</code> internally store elements in balanced binary tree
</li>
<li>
 By default <code>std::set</code> uses the operator <code> &lt; </code> for comparing two elements and but if user passes the external sorting criteria i.e. comparator then it uses it instead of default operator <code> &lt; </code>.
</li>
<li>
<code>std::set</code> will keep the inserted elements in sorted order based on the assigned sorting criteria i.e. either by default criteria operator <code> &lt; </code> or by passed comparator (if passed).
</li></p>

<p>In this post the samples only limited to <code>std::set</code> that use custom comparator and store complex object instead of basic data type. The complex object that we will use is reusing class <code>Person</code> on previous post.</p>

<p>Let&rsquo;s create custom class that handles comparation process</p>

<p><figure class='code'><figcaption><span>CustomCompare</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#ifndef CustomCompare_h</span>
</span><span class='line'><span class="cp">#define CustomCompare_h</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;Person.hpp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">CustomCompare</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span><span class="p">()(</span><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">lhs</span> <span class="o">&lt;</span> <span class="n">rhs</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span><span class="p">()(</span><span class="k">const</span> <span class="n">Person</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">Person</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">lhs</span><span class="p">.</span><span class="n">getAge</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">rhs</span><span class="p">.</span><span class="n">getAge</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/<em> CustomCompare_h </em>/</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The following code is an example how to use the comparator class in <code>std:set</code>
<figure class='code'><figcaption><span>sample how to use</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">SampleSetWithCustomCompare</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">set</span><span class="o">&lt;</span><span class="n">Person</span><span class="p">,</span><span class="n">CustomCompare</span><span class="o">&gt;</span> <span class="n">setOfPersons</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setOfPersons</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">Person</span><span class="p">(</span><span class="s">&quot;Person 1&quot;</span><span class="p">,</span> <span class="mi">25</span><span class="p">));</span>
</span><span class='line'>    <span class="n">setOfPersons</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">Person</span><span class="p">(</span><span class="s">&quot;Person 2&quot;</span><span class="p">,</span> <span class="mi">16</span><span class="p">));</span>
</span><span class='line'>    <span class="n">setOfPersons</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">Person</span><span class="p">(</span><span class="s">&quot;Person 3&quot;</span><span class="p">,</span> <span class="mi">28</span><span class="p">));</span>
</span><span class='line'>    <span class="n">setOfPersons</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">Person</span><span class="p">(</span><span class="s">&quot;Person 4&quot;</span><span class="p">,</span> <span class="mi">9</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">set</span><span class="o">&lt;</span><span class="n">Person</span><span class="p">,</span><span class="n">CustomCompare</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">setOfPersons</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span><span class="o">!=</span><span class="n">setOfPersons</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">getName</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; , age : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">getAge</span><span class="p">()</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>References</h2>

<ol>
<li><a href="http://www.cplusplus.com/reference/set/set/">http://www.cplusplus.com/reference/set/set/</a></li>
<li><a href="http://www.wrox.com/WileyCDA/WroxTitle/Professional-C-2nd-Edition.productCd-0470932449.html">http://www.wrox.com/WileyCDA/WroxTitle/Professional-C-2nd-Edition.productCd-0470932449.html</a></li>
<li><a href="http://thispointer.com/stdset-tutorial-part-1-set-usage-details-with-default-sorting-criteria/">http://thispointer.com/stdset-tutorial-part-1-set-usage-details-with-default-sorting-criteria/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Priority Queue With Comparator]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/12/29/c-plus-plus-priority-queue-with-comparator/"/>
    <updated>2016-12-29T14:52:23+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/12/29/c-plus-plus-priority-queue-with-comparator</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/logo/cpp.png"></p>

<p><code>priority_queue</code> is categorized as a STL container adaptor. It is like a queue that keeps its element in sorted order. Instead of a strict FIFO ordering, the element at the head of the queue at any given time is the one with the highest priority.</p>

<p>The template class definition of <code>priority_queue</code> is as follow</p>

<figure class='code'><figcaption><span>template definition</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span> <span class="o">&lt;</span>
</span><span class='line'>   <span class="k">class</span> <span class="nc">Type</span><span class="p">,</span>
</span><span class='line'>   <span class="k">class</span> <span class="nc">Container</span><span class="o">=</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>   <span class="k">class</span> <span class="nc">Compare</span><span class="o">=</span><span class="n">less</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Container</span><span class="o">::</span><span class="n">value_type</span><span class="o">&gt;</span> <span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">priority_queue</span>
</span></code></pre></td></tr></table></div></figure>


<p>A user-provided compare can be supplied to change the ordering, e.g. using <code>std::greater<T></code> would cause the smallest element to appear as the top(). We also can create custom comparator for our need.</p>

<p>Many samples available on net about <code>priority_queue</code> with default compare parameter. In this article let&rsquo;s create samples by specifying the compare parameter template.</p>

<figure class='code'><figcaption><span>priority_queue with std::greater</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//helper function displays sorted data</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">printQueue</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;</span> <span class="n">q</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">q</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">SamplePriorityQueue</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">priority_queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">greater</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">n</span> <span class="p">:</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">})</span>
</span><span class='line'>        <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printQueue</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above uses <code>std::greater</code> as a compare parameter template.</p>

<figure class='code'><figcaption><span>output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5
</span><span class='line'>6
</span><span class='line'>7
</span><span class='line'>8
</span><span class='line'>9
</span></code></pre></td></tr></table></div></figure>


<p>Beside the <code>std::less</code> or <code>std::greater</code>, we can create our custom comparator with lamda or custom class or struct.</p>

<figure class='code'><figcaption><span>lamda as compare parameter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">SamplePriorityQueueWithLamda</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// using lambda to compare elements.</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">compare</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">lhs</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">lhs</span> <span class="o">&lt;</span> <span class="n">rhs</span><span class="p">;</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">priority_queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="k">decltype</span><span class="p">(</span><span class="n">compare</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">q</span><span class="p">(</span><span class="n">compare</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">n</span> <span class="p">:</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">})</span>
</span><span class='line'>        <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">printQueue</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use the custom comparator, we just need to pass it as the third parameter of <code>priority_queue</code> template</p>

<figure class='code'><figcaption><span>custom comparator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">CustomCompare</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span><span class="p">()(</span><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">lhs</span> <span class="o">&lt;</span> <span class="n">rhs</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>sample with custom comparator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">SamplePriorityQueueWithCustomComparator</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">priority_queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">CustomCompare</span> <span class="o">&gt;</span> <span class="n">pq</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printQueue</span><span class="p">(</span><span class="n">pq</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The data stored in <code>priority_queue</code> is not limited to basic data type.
We can store object in it. Let&rsquo;s create a sample of it.
Let&rsquo;s say we have a <code>Person</code> class.</p>

<figure class='code'><figcaption><span>Person.hpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#ifndef Person_hpp</span>
</span><span class='line'><span class="cp">#define Person_hpp</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Person</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Person</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">age</span><span class="p">);</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Person</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">string</span> <span class="n">getName</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">getAge</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">friend</span> <span class="kt">bool</span> <span class="k">operator</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Person</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">Person</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">);</span>
</span><span class='line'>    <span class="k">friend</span> <span class="kt">bool</span> <span class="k">operator</span> <span class="o">&gt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Person</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">Person</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* Person_hpp */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Person.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &quot;Person.hpp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="k">operator</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Person</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">Person</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">lhs</span><span class="p">.</span><span class="n">getAge</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">rhs</span><span class="p">.</span><span class="n">getAge</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="k">operator</span> <span class="o">&gt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Person</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">Person</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">lhs</span><span class="p">.</span><span class="n">getAge</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">rhs</span><span class="p">.</span><span class="n">getAge</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Person</span><span class="o">::</span><span class="n">Person</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Person</span><span class="o">::</span><span class="n">Person</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">age</span><span class="p">)</span><span class="o">:</span><span class="n">name</span><span class="p">(</span><span class="n">name</span><span class="p">),</span> <span class="n">age</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Person</span><span class="o">::~</span><span class="n">Person</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">string</span> <span class="n">Person</span><span class="o">::</span><span class="n">getName</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Person</span><span class="o">::</span><span class="n">getAge</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the <code>Person</code> class, we have friend overloading methods, right angle bracket and left angle bracket. The methods act as comparation operator. The operator overloading is needed if we want to use <code>std::less</code> or <code>std::greater</code>.</p>

<figure class='code'><figcaption><span>sample priority_queue stores object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">SamplePriorityQueueStoreObject</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">personVector</span> <span class="o">=</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Person</span><span class="p">(</span><span class="s">&quot;Person 1&quot;</span><span class="p">,</span> <span class="mi">25</span><span class="p">),</span>
</span><span class='line'>        <span class="n">Person</span><span class="p">(</span><span class="s">&quot;Person 2&quot;</span><span class="p">,</span> <span class="mi">17</span><span class="p">),</span>
</span><span class='line'>        <span class="n">Person</span><span class="p">(</span><span class="s">&quot;Person 3&quot;</span><span class="p">,</span> <span class="mi">35</span><span class="p">),</span>
</span><span class='line'>        <span class="n">Person</span><span class="p">(</span><span class="s">&quot;Person 4&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span>
</span><span class='line'>        <span class="n">Person</span><span class="p">(</span><span class="s">&quot;Person 5&quot;</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;======== Less Priority Queue ======= &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">Person</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">less</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;::</span><span class="n">value_type</span><span class="o">&gt;&gt;</span> <span class="n">pqueue_less</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//fill pqueue_less</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">personVector</span><span class="p">.</span><span class="n">cbegin</span><span class="p">();</span> <span class="n">it</span><span class="o">!=</span><span class="n">personVector</span><span class="p">.</span><span class="n">cend</span><span class="p">();</span> <span class="n">it</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">pqueue_less</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//iterate,display and pop</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">pqueue_less</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">value</span> <span class="o">=</span> <span class="n">pqueue_less</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">.</span><span class="n">getName</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">.</span><span class="n">getAge</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">pqueue_less</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;======== Greater Priority Queue ======= &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">Person</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">greater</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;::</span><span class="n">value_type</span><span class="o">&gt;&gt;</span> <span class="n">pqueue_greater</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//fill pqueue_greater</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">personVector</span><span class="p">.</span><span class="n">cbegin</span><span class="p">();</span> <span class="n">it</span><span class="o">!=</span><span class="n">personVector</span><span class="p">.</span><span class="n">cend</span><span class="p">();</span> <span class="n">it</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">pqueue_greater</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//iterate,display and pop</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">pqueue_greater</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">value</span> <span class="o">=</span> <span class="n">pqueue_greater</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">.</span><span class="n">getName</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">.</span><span class="n">getAge</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">pqueue_greater</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ol>
<li><a href="http://en.cppreference.com/w/cpp/container/priority_queue">http://en.cppreference.com/w/cpp/container/priority_queue</a></li>
<li><a href="https://support.microsoft.com/en-us/kb/837697">https://support.microsoft.com/en-us/kb/837697</a></li>
<li><a href="http://www.wrox.com/WileyCDA/WroxTitle/Professional-C-2nd-Edition.productCd-0470932449.html">http://www.wrox.com/WileyCDA/WroxTitle/Professional-C-2nd-Edition.productCd-0470932449.html</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reset Git Credential on OS X Keychain]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/11/09/reset-git-credential-on-os-x-keychain/"/>
    <updated>2016-11-09T12:40:34+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/11/09/reset-git-credential-on-os-x-keychain</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/logo/git.png">
This post basically just a note for my self. In case I got the same condition in the next, it can help me to remember what I did in the past.</p>

<p>I got a condition which I have just changed my git password. Surely I cannot pull or push since my local credential was not valid anymore. When I run <code>git config &ndash;list</code>, I believe my git password stored on OS X Keychain. The simple way I do was running a command via terminal :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config credential.helper osxkeychain
</span></code></pre></td></tr></table></div></figure>


<p>I was then prompted to input my username and password. By inputing my username and new password everything back to normal.</p>

<p>If you want it to apply globally just append parameter <code> &ndash;global </code> to the command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config --global credential.helper osxkeychain
</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<ol>
<li><a href="http://stackoverflow.com/questions/20195304/how-to-update-password-for-git">http://stackoverflow.com/questions/20195304/how-to-update-password-for-git</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Server Does Not Recognize VirtualBox Adapter]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/10/12/ubuntu-server-does-not-recognize-virtualbox-adapter/"/>
    <updated>2016-10-12T21:25:24+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/10/12/ubuntu-server-does-not-recognize-virtualbox-adapter</id>
    <content type="html"><![CDATA[<p>As we know, VirtualBox provides several adapters that we can add and be used by OS guest.
At the time of writing this post, I have an OS X (host) and Ubuntu Server 16.04.1 LTS (guest). The needs are, I want to be able to remote my Ubuntu from OS X terminal. I also want my Ubuntu guest can connect to internet. I have configured two network adapters for the guest (NAT and host-only).</p>

<p>When I run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ifconfig
</span></code></pre></td></tr></table></div></figure>


<p>The first/default adapter (NAT) <code>enp0s3</code> is recognized without any problems by the guest. But not the second one (host-only). To make the second adapter visible, I have to run  a command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo dhclient
</span><span class='line'><span class="nv">$ </span>ifconfig
</span></code></pre></td></tr></table></div></figure>


<p>Now I got both adapters <code>enp0s3</code> (NAT) and <code>enp0s8</code> (host-only) visible on terminal. And now I can ping and run ssh from host (OS X) to guest (Ubuntu server).</p>

<p>In order to make it permanent, we need to edit <code>/etc/network/interfaces</code> with the following lines</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># The second network interface</span>
</span><span class='line'>auto enp0s8
</span><span class='line'>iface enp0s8 inet dhcp
</span></code></pre></td></tr></table></div></figure>


<p>Then restart the network service by running</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo /etc/init.d/networking restart
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s my note for now and thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono Multiple Application on a Virtual Host]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/09/19/mono-multiple-application-on-a-virtual-host/"/>
    <updated>2016-09-19T22:06:13+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/09/19/mono-multiple-application-on-a-virtual-host</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/logo/mono.png">
On my previous post I wrote how to configure application virtual host. We can have multiple application in a virtual host like multiple application in a web site on IIS. To do that, the steps are the same as I did on my previous post. Let&rsquo;s say we have a scenario, having a site config as the sample on previous article, an application port 99, default document root <code>/var/www/vhosts/defaultsite/root</code>. The detail virtual host config as follow</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="err">*:99</span><span class="nt">&gt;</span>
</span><span class='line'>    ServerAdmin admin@test.com
</span><span class='line'>    ServerName  neutro.local
</span><span class='line'>    ServerAlias neutrofoton.com *.neutrofoton.com
</span><span class='line'>
</span><span class='line'>    MonoServerPath neutro.local &quot;/usr/bin/mod-mono-server4&quot;
</span><span class='line'>    MonoDebug neutro.local true
</span><span class='line'>    MonoSetEnv neutro.local MONO_IOMAP=all
</span><span class='line'>    MonoApplications neutro.local &quot;/:/var/www/vhosts/defaultsite/root&quot;
</span><span class='line'>
</span><span class='line'>    MonoAutoApplication disabled
</span><span class='line'>    AddHandler  mono    .aspx .ascx .asax .ashx .config .cs .asmx .axd
</span><span class='line'>
</span><span class='line'>    DocumentRoot    /var/www/vhosts/defaultsite/root
</span><span class='line'>    DirectoryIndex  Default.aspx index.aspx index.html
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Location</span> <span class="err">&quot;/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      Allow from all
</span><span class='line'>      Order allow,deny
</span><span class='line'>    MonoSetServerAlias neutro.local
</span><span class='line'>      SetHandler mono
</span><span class='line'>      SetOutputFilter DEFLATE
</span><span class='line'>      SetEnvIfNoCase Request_URI &quot;\.(?:gif|jpe?g|png)$&quot; no-gzip dont-vary
</span><span class='line'>    <span class="nt">&lt;/Location&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;IfModule</span> <span class="err">mod_deflate.c</span><span class="nt">&gt;</span>
</span><span class='line'>      AddOutputFilterByType DEFLATE text/html text/plain text/xml text/javascript
</span><span class='line'>    <span class="nt">&lt;/IfModule&gt;</span>
</span><span class='line'>
</span><span class='line'>    LogLevel    debug
</span><span class='line'>
</span><span class='line'>    ErrorLog ${APACHE_LOG_DIR}/error.log
</span><span class='line'>    CustomLog ${APACHE_LOG_DIR}/access.log combined
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The steps to enable site config is the same as privious post. To make virtual host have multiple applications, we have to modify the site config file as follow. In this sample, we are going to add 2 applications to this virtual host</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="err">*:99</span><span class="nt">&gt;</span>
</span><span class='line'>    ServerAdmin admin@test.com
</span><span class='line'>    ServerName  neutro.local
</span><span class='line'>    ServerAlias neutrofoton.com *.neutrofoton.com
</span><span class='line'>
</span><span class='line'>    MonoServerPath neutro.local &quot;/usr/bin/mod-mono-server4&quot;
</span><span class='line'>    MonoDebug neutro.local true
</span><span class='line'>    MonoSetEnv neutro.local MONO_IOMAP=all
</span><span class='line'>    MonoApplications neutro.local &quot;/:/var/www/vhosts/defaultsite/root&quot;
</span><span class='line'>
</span><span class='line'>    MonoAutoApplication disabled
</span><span class='line'>    AddHandler  mono    .aspx .ascx .asax .ashx .config .cs .asmx .axd
</span><span class='line'>
</span><span class='line'>    DocumentRoot    /var/www/vhosts/defaultsite/root
</span><span class='line'>    DirectoryIndex  Default.aspx index.aspx index.html
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Location</span> <span class="err">&quot;/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      Allow from all
</span><span class='line'>      Order allow,deny
</span><span class='line'>    MonoSetServerAlias neutro.local
</span><span class='line'>      SetHandler mono
</span><span class='line'>      SetOutputFilter DEFLATE
</span><span class='line'>      SetEnvIfNoCase Request_URI &quot;\.(?:gif|jpe?g|png)$&quot; no-gzip dont-vary
</span><span class='line'>    <span class="nt">&lt;/Location&gt;</span>
</span><span class='line'>
</span><span class='line'>    Alias   /project1  &quot;/home/neutro/Workspace/dotnet/project1&quot;
</span><span class='line'>    MonoApplications project1 &quot;/project1:/home/neutro/Workspace/dotnet/project1&quot;
</span><span class='line'>    MonoServerPath project1 &quot;/usr/bin/mod-mono-server4&quot;
</span><span class='line'>    <span class="nt">&lt;Location</span> <span class="err">&quot;/project1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      Allow from all
</span><span class='line'>      Order allow,deny
</span><span class='line'>      MonoSetServerAlias project1
</span><span class='line'>      SetHandler mono
</span><span class='line'>      SetOutputFilter DEFLATE
</span><span class='line'>      SetEnvIfNoCase Request_URI &quot;\.(?:gif|jpe?g|png)$&quot; no-gzip dont-vary
</span><span class='line'>      Require all granted
</span><span class='line'>    <span class="nt">&lt;/Location&gt;</span>
</span><span class='line'>
</span><span class='line'>    Alias   /project2  &quot;/home/neutro/Workspace/dotnet/project2&quot;
</span><span class='line'>    MonoApplications project2 &quot;/project2:/home/neutro/Workspace/dotnet/project2&quot;
</span><span class='line'>    MonoServerPath project2 &quot;/usr/bin/mod-mono-server4&quot;
</span><span class='line'>    <span class="nt">&lt;Location</span> <span class="err">&quot;/project2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      Allow from all
</span><span class='line'>      Order allow,deny
</span><span class='line'>      MonoSetServerAlias project2
</span><span class='line'>      SetHandler mono
</span><span class='line'>      SetOutputFilter DEFLATE
</span><span class='line'>      SetEnvIfNoCase Request_URI &quot;\.(?:gif|jpe?g|png)$&quot; no-gzip dont-vary
</span><span class='line'>      Require all granted
</span><span class='line'>    <span class="nt">&lt;/Location&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;IfModule</span> <span class="err">mod_deflate.c</span><span class="nt">&gt;</span>
</span><span class='line'>      AddOutputFilterByType DEFLATE text/html text/plain text/xml text/javascript
</span><span class='line'>    <span class="nt">&lt;/IfModule&gt;</span>
</span><span class='line'>
</span><span class='line'>    LogLevel    debug
</span><span class='line'>
</span><span class='line'>    ErrorLog ${APACHE_LOG_DIR}/error.log
</span><span class='line'>    CustomLog ${APACHE_LOG_DIR}/access.log combined
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the new virtual host configuration we have:</p>

<ol>
<li><code>/project1</code>, with physical application&rsquo;s files in <code>/home/neutro/Workspace/dotnet/project1</code></li>
<li><code>/project2</code>, with physical application&rsquo;s files in <code>/home/neutro/Workspace/dotnet/project2</code></li>
</ol>


<p>Let&rsquo;s assume we have a simple <code>index.aspx</code> file in <code>/home/neutro/Workspace/dotnet/project1</code> and <code>/home/neutro/Workspace/dotnet/project2</code></p>

<p>We need to give access to both folders and theirs file contents</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find project1 -type d -exec chmod <span class="m">755</span> <span class="o">{}</span> <span class="se">\;</span>
</span><span class='line'><span class="nv">$ </span>find project1 -type f -exec chmod <span class="m">644</span> <span class="o">{}</span> <span class="se">\;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>find project2 -type d -exec chmod <span class="m">755</span> <span class="o">{}</span> <span class="se">\;</span>
</span><span class='line'><span class="nv">$ </span>find project2 -type f -exec chmod <span class="m">644</span> <span class="o">{}</span> <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After modifying the config file and give access to the application directories, we need to register the applications in <code>/etc/mono-server4/debian.webapp</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;apps&gt;</span>
</span><span class='line'>   <span class="nt">&lt;web-application&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>project1<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;vpath&gt;</span>/project1<span class="nt">&lt;/vpath&gt;</span>
</span><span class='line'>        <span class="nt">&lt;path&gt;</span>/home/neutro/Workspace/dotnet/project1<span class="nt">&lt;/path&gt;</span>
</span><span class='line'>        <span class="nt">&lt;vhost&gt;</span>neutro.local<span class="nt">&lt;/vhost&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/web-application&gt;</span>
</span><span class='line'>    <span class="nt">&lt;web-application&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>project2<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;vpath&gt;</span>/project2<span class="nt">&lt;/vpath&gt;</span>
</span><span class='line'>        <span class="nt">&lt;path&gt;</span>/home/neutro/Workspace/dotnet/project2<span class="nt">&lt;/path&gt;</span>
</span><span class='line'>        <span class="nt">&lt;vhost&gt;</span>neutro.local<span class="nt">&lt;/vhost&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/web-application&gt;</span>
</span><span class='line'><span class="nt">&lt;/apps&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final step is restart apache, and now we should be able to open in browser <a href="http://localhost:99/project1">http://localhost:99/project1</a> or <a href="http://localhost:99/project2.">http://localhost:99/project2.</a></p>

<h2>References</h2>

<ol>
<li><a href="http://stackoverflow.com/questions/19279286/fail-to-start-a-mono-site-with-apache2-404-error-with-mod-mono">http://stackoverflow.com/questions/19279286/fail-to-start-a-mono-site-with-apache2-404-error-with-mod-mono</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mono Mod_mono Apache2 on Ubuntu]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/09/18/mono-mod-mono-apache2-on-ubuntu/"/>
    <updated>2016-09-18T08:34:23+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/09/18/mono-mod-mono-apache2-on-ubuntu</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/logo/mono.png">
I used to write a post about install and configure Mono on OS X Mountain Lion. On this post I want to summary what I did the similar things on Ubuntu.</p>

<p>The details environment I use :</p>

<ol>
<li>Ubuntu 14.04 LTS</li>
<li>Mono JIT compiler version 4.4.2</li>
<li>Apache 2.4.7</li>
</ol>


<h2>Install Mono, Apache 2, Mod Mono</h2>

<p>To install Mono, the first step is add package repository to our system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;deb http://download.mono-project.com/repo/debian wheezy main&quot;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/mono-xamarin.list
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span></code></pre></td></tr></table></div></figure>


<p>To enable mod_mono installation on Ubuntu 13.10 or later, and Debian 8.0 and later (and their derivatives), we need to add a second repository to our system, in addition to the generic Debian/Ubuntu repository above (if you don’t use sudo, be sure to switch to root):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;deb http://download.mono-project.com/repo/debian wheezy-apache24-compat main&quot;</span> <span class="p">|</span> sudo tee -a /etc/apt/sources.list.d/mono-xamarin.list
</span></code></pre></td></tr></table></div></figure>


<p>Then run package update to update and a package upgrade to upgrade existing packages to the latest available.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get upgrade
</span></code></pre></td></tr></table></div></figure>


<p>To install mono, run the following command</p>

<figure class='code'><figcaption><span>install mono</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install mono-complete
</span></code></pre></td></tr></table></div></figure>


<p>If we do not have Apache 2 on our system, we need to install it first. Or we can check the existing version <code>apache2 -v</code></p>

<figure class='code'><figcaption><span>install apache2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install apache2
</span></code></pre></td></tr></table></div></figure>


<p>To be able to host ASP.NET application on apache, we need to install <code>mod_mono</code>. <code>mod_mono</code> is a module for the Apache HTTP Server that allows us to host ASP.NET pages and other assemblies on multiple platforms by using Mono.</p>

<p>To install Mod Mono and its dependencies run the following command</p>

<figure class='code'><figcaption><span>install mod_mono</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get update <span class="o">&amp;&amp;</span> sudo apt-get install libapache2-mod-mono
</span><span class='line'><span class="nv">$ </span>apt-get install mono-apache-server4
</span></code></pre></td></tr></table></div></figure>


<p>Before going through the next step, the things than we can verify are :</p>

<ol>
<li><p>Ensuring Apache 2 running well at least by checking its version or start stop its service.</p>

<pre><code class="` bash apache version"> $ apache2 -v
</code></pre>

<pre><code class="` bash start apache"> $ service apache2 start
</code></pre>

<pre><code class="` bash stop apache"> $ service apache2 stop
</code></pre></li>
<li><p>Checking mono version</p>

<pre><code class="bash mono version">$ mono --version
</code></pre></li>
<li>Ensuring we have <code>/usr/bin/mod-mono-server4</code></li>
</ol>


<h2>Configuring Application Virtual Host</h2>

<p>To configure virtual host application, the steps are</p>

<ol>
<li><p>Create a directory where the application physical files reside.
In this sample I put my  application files in <code>/var/www/hellodotnet</code></p>

<p>We needed to grant permissions to the login user so that the user could copy or create files to the <code>hellodotnet</code> directory.  For our purposes we made the current user the owner of the directory</p>

<pre><code class="` bash application directory"> $ chown -R -v your_user_name /var/www/
</code></pre></li>
<li><p>Lets create a simple <code>/var/www/hellodotnet/index.aspx</code> file.</p>

<pre><code class="` html index.aspx"> &lt;center&gt;mod_mono is working:&lt;%=System.DateTime.Now.ToString()%&gt;&lt;/center&gt;
</code></pre></li>
<li><p>Create a site configuration <code>/etc/apache2/sites-available/hellodotnet.conf</code></p>

<pre><code class="` xml site configuration">    &lt;VirtualHost *:81&gt;
       ServerName hellodotnet
       ServerAdmin hello@test-apache-config.com
       DocumentRoot /var/www/hellodotnet
       MonoServerPath hellodotnet "/usr/bin/mod-mono-server4"
       MonoDebug hellodotnet true
       MonoSetEnv hellodotnet MONO_IOMAP=all
       MonoApplications hellodotnet "/:/var/www/hellodotnet"

       ErrorLog ${APACHE_LOG_DIR}/error.log
       CustomLog ${APACHE_LOG_DIR}/access.log combined

       AddHandler  mono    .aspx .ascx .asax .ashx .config .cs .asmx .axd
       &lt;Location "/"&gt;
         Allow from all
         Order allow,deny
         MonoSetServerAlias hellodotnet
         SetHandler mono
         SetOutputFilter DEFLATE
         SetEnvIfNoCase Request_URI "\.(?:gif|jpe?g|png)$" no-gzip dont-vary
       &lt;/Location&gt;
       &lt;IfModule mod_deflate.c&gt;
         AddOutputFilterByType DEFLATE text/html text/plain text/xml text/javascript
       &lt;/IfModule&gt;
     &lt;/VirtualHost&gt;
</code></pre>

<p>In this site I use port 81 instead of default 80.</p></li>
<li><p>Since we use port 81, we need to register port 81 in <code>/etc/apache2/ports.conf</code> by simply add the following code</p>

<pre><code class="` bash"> Listen 81
</code></pre></li>
<li><p>Enabling the site by running the following command from terminal</p>

<pre><code class="` bash"> $ sudo a2ensite hellodotnet.conf
</code></pre></li>
<li>Restart apache</li>
<li>Hit from browser : <a href="http://localhost:81">http://localhost:81</a>
We should have the page displayed current date time.</li>
</ol>


<h2>Tips</h2>

<ol>
<li><p>If we get the page not displayed, we can see the message on the page displayed, HTML error code, or any clue on apache logs located in <code>/var/log/apache2</code></p></li>
<li><p>If we get message access denied cannot access bin, simply change permission of the application site.</p>

<pre><code class="` bash"> $ find hellodotnet -type d -exec chmod 755 {} \;
 $ find hellodotnet -type f -exec chmod 644 {} \;
</code></pre></li>
<li><p>If getting message could not find <code>/etc/mono/registry</code>, simply create the directory.</p>

<pre><code class="` bash"> $ sudo mkdir /etc/mono/registry
</code></pre></li>
<li><p>If getting <code>System.UnauthorizedAccessException</code> access to the path <code>/etc/mono/registry</code>, give access to it as its need, for example</p>

<pre><code class="`` bash">  $ chmod uog+rw /etc/mono/registry
</code></pre></li>
</ol>


<h2>References</h2>

<ol>
<li><a href="http://www.mono-project.com/docs/getting-started/install/linux/">http://www.mono-project.com/docs/getting-started/install/linux/</a></li>
<li><a href="http://stackoverflow.com/questions/34290004/how-to-install-configure-mod-mono-on-ubuntu-14-04-3-lts">http://stackoverflow.com/questions/34290004/how-to-install-configure-mod-mono-on-ubuntu-14-04-3-lts</a></li>
<li><a href="http://www.bloomspire.com/blog/2015/3/9/how-to-host-aspnet-applications-on-linux-p3">http://www.bloomspire.com/blog/2015/3/9/how-to-host-aspnet-applications-on-linux-p3</a></li>
<li><a href="http://superuser.com/questions/882594/permission-denied-because-search-permissions-are-missing-on-a-component-of-the-p">http://superuser.com/questions/882594/permission-denied-because-search-permissions-are-missing-on-a-component-of-the-p</a></li>
<li><a href="https://www.codementor.io/tips/7134438372/access-to-the-path-etc-mono-registry-is-denied">https://www.codementor.io/tips/7134438372/access-to-the-path-etc-mono-registry-is-denied</a></li>
<li><a href="https://retkomma.wordpress.com/2011/10/01/registry-settings-in-mono-on-linux/">https://retkomma.wordpress.com/2011/10/01/registry-settings-in-mono-on-linux/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBox Share Host Folder Ubuntu Guest]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/09/17/virtualbox-share-host-folder-ubuntu-guest/"/>
    <updated>2016-09-17T10:41:13+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/09/17/virtualbox-share-host-folder-ubuntu-guest</id>
    <content type="html"><![CDATA[<p><a href="https://www.virtualbox.org/">VM VirtualBox</a> is one of free popular <a href="https://en.wikipedia.org/wiki/Hypervisor">hypervisor</a> for x86 computer from Oracle. I use it as part of my development environment, since occasionally I need several different Operating Systems for development and software testing  or deployment testing. When we work with VirtualBox we often need to share folder between host and guest operating system.</p>

<p>Before sharing folder, ensure we have installed Guest Addition that shipped with VirtualBox. To do that :</p>

<ol>
<li>Go to  Device menu > Insert Guest CD Addition Images.</li>
<li>If it automatically mounting and has popup dialog, just hit run otherwise we may have to manually mounting it.</li>
</ol>


<p> I usually restart my OS guest after installing this VirtualBox Guest Addition.</p>

<p>The steps are :</p>

<ul>
<li>Go to Devices menu > Shared Folders > Shared Folder Settings</li>
<li>Select folder path of Host to be shared to Guest OS</li>
<li><p>Checked Make Permanent option if we want to make it permanent</p>

<blockquote><p>On my sample, I shared folder from OS X Host /Volumes/MacintoshHDData/share</p></blockquote>

<p> Till this step is enough for Windows guest. On Ubuntu guest, it need additional steps to make the shared folder accessible in guest.</p></li>
<li><p>When we shared a Host&rsquo;s folder on Ubuntu guest, VirtualBox should create a folder on <code>/Media</code> just like the shared folder name with <code>sf_</code> prefix. In my case <code>/Media/sf_share</code>. If the folder does not exist, open terminal, create directory <code>/Media/sf_share</code> and give folder name</p>

<pre><code>mkdir /Media/sf_share
</code></pre></li>
<li><p>VirtualBox with Ubuntu operating system guest, it added a group called <code>vboxsf</code>. Before we can access the shared folder we have to be a member of the group.</p>

<pre><code class="bash">sudo add user [username] vboxsf
</code></pre>

<p> To verify what groups are username belongs to,</p>

<pre><code class="bash">id [username]
</code></pre></li>
<li><p>Mount the shared folder</p>

<pre><code class="bash">sudo mount -t vboxsf share /media/sf_share
</code></pre></li>
</ul>


<p>Now we should be able to the shared folder via Nautilus (File Manager). To make it automatic mounting, ensure we checked option automatic mounting on shared folder setting dialog.</p>

<h2>References</h2>

<ol>
<li><a href="http://askubuntu.com/questions/456400/why-cant-i-access-a-shared-folder-from-within-my-virtualbox-machine">http://askubuntu.com/questions/456400/why-cant-i-access-a-shared-folder-from-within-my-virtualbox-machine</a></li>
<li><a href="http://www.howtogeek.com/187703/how-to-access-folders-on-your-host-machine-from-an-ubuntu-virtual-machine-in-virtualbox/">http://www.howtogeek.com/187703/how-to-access-folders-on-your-host-machine-from-an-ubuntu-virtual-machine-in-virtualbox/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lambda in C++]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/05/11/lambda-in-c-plus-plus/"/>
    <updated>2016-05-11T23:15:18+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/05/11/lambda-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/logo/lambda.png">
C++11 adds a new feature called lambda expressions. This allows us to write anonymous functions inline, removing the need to write a separate function or to write a function object, and makes code easier to understand.
For those who are familiar with C# lambda expression, C++ lambda expression is similar. But lambda in C++ has slightly different syntax.</p>

<figure class='code'><figcaption><span>C++11 Lambda Syntax</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[capture_block](parameters) mutable exception_specification -&gt; return_type {body}
</span></code></pre></td></tr></table></div></figure>


<ol>
<li> <strong><code>capture_block</code></strong> is a comma-separated list of zero or more captures, optionally beginning with a capture-default. Capture list can be passed as follows (see below for the detailed description):
<ol>
<li><code>[a,&b]</code> where a is captured by value and b is captured by reference.</li>
<li><code>[this]</code> captures the this pointer by value</li>
<li><code>[&]</code> captures all automatic variables odr-used in the body of the lambda by reference</li>
<li><code>[=]</code> captures all automatic variables odr-used in the body of the lambda by value</li>
<li><code>[x]</code> captures only x by value and nothing else.</li>
<li><code>[]</code> captures nothing</li>
</ol>
</li>
<li>
<strong><code>parameters</code></strong> is (optional) list of parameters for the lambda expression.
</li>
<li>
<strong><code>mutable</code></strong> is (optional) if variables from the enclosing scope are captured by value, a copy of those variables will become available in the body of the lambda expression. Those copies are marked as const by default, meaning the lambda body cannot change the value of those copies. If the lambda expression is marked as mutable, those copies are not const and the body can modify those local copies.
</li>
<li>
<strong><code>exception_specification</code></strong> is (optional) and can be used to specify which exceptions the body of the lambda expression can throw.
</li>
<li>
<strong><code>return_type</code></strong> is Return type. If not present it's implied by the function return statements (or void if it doesn't return any value)
</li>
</ol>




<h3>Lambda and Direct Invoke</h3>


<p>The following snipped code is an example of lambda expression.</p>

<figure class='code'><figcaption><span>example lambda and directly invoked</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">string</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[](</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">string</span> <span class="p">{</span><span class="k">return</span> <span class="s">&quot;Hi &quot;</span> <span class="o">+</span> <span class="n">str</span><span class="p">;}(</span><span class="s">&quot;neutro&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The lambda expression above shows that it has a <code>const string&amp;</code> parameter and return a <code>string</code> type. To execute the lambda is by placing round brackets <code>()</code> and put object that will be passed to inside it. The <code>&ldquo;neutro&rdquo;</code> literal string will substitute <code>str</code> parameter. The output of the above code is :</p>

<figure class='code'><figcaption><span>output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Hi neutro
</span></code></pre></td></tr></table></div></figure>




<h3>Lambda as Variable</h3>


<p>Pointer to a lambda expression can be stored and executed through the function pointer. C++ provides <code>std::function</code> which is a STL template class that provides a very convenient wrapper to a simple function, to a functor or to a lambda expression. We can also use the C++11 <code>auto</code> keyword to make it easier.</p>

<p>To make it clear the following code contains couples of various lambda expressions and store them in variables of type <code>auto</code> or its equivalent in <code>std::function</code> STL template class.</p>

<figure class='code'><figcaption><span>lambda as variable</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">auto</span> <span class="n">lambda1</span> <span class="o">=</span> <span class="p">[]</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span><span class="s">&quot;Hello lambda without parameter 1&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'><span class="n">lambda1</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">auto</span> <span class="n">lambda2</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span><span class="s">&quot;Hello lambda without parameter 2&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'><span class="n">lambda2</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//auto lambda3 = [](void) -&gt; void { cout &lt;&lt;&quot;Hello lambda without parameter 2&quot; &lt;&lt; endl; };</span>
</span><span class='line'><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">()</span><span class="o">&gt;</span> <span class="n">lambda3</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">void</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span><span class="s">&quot;Hello lambda without parameter 2&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'><span class="n">lambda3</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//auto lambda4 = [](const string&amp; str) -&gt; string {return &quot;Hello from &quot; + str;};</span>
</span><span class='line'><span class="n">function</span><span class="o">&lt;</span><span class="n">string</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">lambda4</span> <span class="o">=</span> <span class="p">[](</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">string</span> <span class="p">{</span><span class="k">return</span> <span class="s">&quot;Hello from &quot;</span> <span class="o">+</span> <span class="n">str</span><span class="p">;};</span>
</span><span class='line'>
</span><span class='line'><span class="n">string</span> <span class="n">result</span> <span class="o">=</span> <span class="n">lambda4</span><span class="p">(</span><span class="s">&quot;neutro&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The snipped code above shows how lambda expressions stored in variable of auto type or theirs equivalent in <code>std::function</code> type and how to invoke the lambda. <a href="https://oopscenities.net/2012/02/24/c11-stdfunction-and-stdbind/">Here</a> is a good article about <code>std::function</code>.</p>

<h3>Lambda Capture Block</h3>


<p>Lambda Capture Block basically describes how we want to capture variables from the enclosing scope. Capturing a variable means that the variable becomes available inside the body of the lambda. The detail variant of capture block has been described on previous section. The following code shows various scenario how to play with capture block.</p>

<figure class='code'><figcaption><span>lambda capture block</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">variableA</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">variableB</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">variableC</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Init Values : &quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;variableA : &quot;</span><span class="o">&lt;&lt;</span><span class="n">variableA</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;variableB : &quot;</span><span class="o">&lt;&lt;</span><span class="n">variableB</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;variableC : &quot;</span><span class="o">&lt;&lt;</span><span class="n">variableC</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="c1">//--------------------------------------</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;---## lamda 1 ##---&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">lambda1</span> <span class="o">=</span> <span class="p">[</span><span class="o">=</span><span class="p">](</span><span class="kt">int</span> <span class="n">param</span><span class="p">)</span><span class="o">-&gt;</span> <span class="kt">int</span>     <span class="c1">//==&gt; [=] lambda has default access to variable is by value</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">param</span> <span class="o">=</span> <span class="n">param</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;param inside lambda1 : &quot;</span><span class="o">&lt;&lt;</span><span class="n">param</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">param</span><span class="p">;</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">lambda1</span><span class="p">(</span><span class="n">variableA</span><span class="p">);</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;After lamda1, variableA : &quot;</span> <span class="o">&lt;&lt;</span><span class="n">variableA</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//--------------------------------------------</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;---## lamda 2 ##---&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">lambda2</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="kt">int</span> <span class="n">param</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">int</span>      <span class="c1">//==&gt; [&amp;] lambda has default access to variable is by reference</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">param</span> <span class="o">=</span> <span class="n">param</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                <span class="n">variableB</span> <span class="o">=</span> <span class="n">variableB</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;param inside lambda2 : &quot;</span><span class="o">&lt;&lt;</span><span class="n">param</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;variableB inside lambda2 : &quot;</span><span class="o">&lt;&lt;</span><span class="n">variableB</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="n">param</span><span class="p">;</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">lambda2</span><span class="p">(</span><span class="n">variableA</span><span class="p">);</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;After lamda2, variableA : &quot;</span> <span class="o">&lt;&lt;</span><span class="n">variableA</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;After lamda2, variableB : &quot;</span> <span class="o">&lt;&lt;</span><span class="n">variableB</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//-------------------------------------</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;---## lamda 3 ##---&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">lambda3</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="kt">int</span><span class="o">*</span> <span class="n">param</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">int</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">param</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">param</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">variableB</span> <span class="o">=</span> <span class="n">variableB</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;param inside lambda3 : &quot;</span><span class="o">&lt;&lt;*</span><span class="n">param</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;variableB inside lambda3 : &quot;</span><span class="o">&lt;&lt;</span><span class="n">variableB</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="n">param</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">lambda3</span><span class="p">(</span><span class="o">&amp;</span><span class="n">variableA</span><span class="p">);</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;After lamda3, result3 : &quot;</span> <span class="o">&lt;&lt;</span><span class="n">result3</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;After lamda3, variableA : &quot;</span> <span class="o">&lt;&lt;</span><span class="n">variableA</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;After lamda3, variableB : &quot;</span> <span class="o">&lt;&lt;</span><span class="n">variableB</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//--------------------------------</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;---## lamda 4 ##---&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">lambda4</span> <span class="o">=</span> <span class="p">[</span><span class="o">=</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">variableB</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">variableC</span><span class="p">](</span><span class="kt">int</span> <span class="n">param</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">int</span> <span class="c1">//==&gt; [=, &amp;variableB, &amp;variableC] captures by value by default,</span>
</span><span class='line'>                                             <span class="c1">// except variables variableB and variableC, which are captured by reference.</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">param</span> <span class="o">=</span> <span class="p">(</span><span class="n">param</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">variableB</span> <span class="o">=</span> <span class="n">variableB</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">variableC</span> <span class="o">=</span> <span class="n">variableC</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;param inside lambda4 : &quot;</span><span class="o">&lt;&lt;</span><span class="n">param</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;variableB inside lambda4 : &quot;</span><span class="o">&lt;&lt;</span><span class="n">variableB</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;variableC inside lambda4 : &quot;</span><span class="o">&lt;&lt;</span><span class="n">variableC</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">param</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">lambda4</span><span class="p">(</span><span class="n">variableA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;After lamda4, variableA : &quot;</span> <span class="o">&lt;&lt;</span><span class="n">variableA</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;After lamda4, variableB : &quot;</span> <span class="o">&lt;&lt;</span><span class="n">variableB</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;After lamda4, variableC : &quot;</span> <span class="o">&lt;&lt;</span><span class="n">variableC</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//--------------------------------</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;---## lamda 5 ##---&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">lambda5</span> <span class="o">=</span> <span class="p">[</span><span class="n">variableC</span><span class="p">](</span><span class="kt">int</span> <span class="n">param</span><span class="p">)</span> <span class="k">mutable</span> <span class="o">-&gt;</span> <span class="kt">int</span> <span class="c1">//==&gt; [variableC] captures only variableC by value and nothing else.</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">param</span> <span class="o">=</span> <span class="p">(</span><span class="n">param</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">variableC</span> <span class="o">=</span> <span class="n">variableC</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">//should mark as mutable lambda, since Cannot assign to a variable captured by copy in a non-mutable lambda</span>
</span><span class='line'>    <span class="c1">//variableB = variableB * 2; //ERROR : variableB not captured, since only capture specific variable that&#39;s variableC</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">///</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;param inside lambda5 : &quot;</span><span class="o">&lt;&lt;</span><span class="n">param</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;variableC inside lambda5 : &quot;</span><span class="o">&lt;&lt;</span><span class="n">variableC</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">param</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">lambda5</span><span class="p">(</span><span class="n">variableA</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;After lamda5, variableA : &quot;</span> <span class="o">&lt;&lt;</span><span class="n">variableA</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;After lamda5, variableC : &quot;</span> <span class="o">&lt;&lt;</span><span class="n">variableC</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output of the sample code is :</p>

<figure class='code'><figcaption><span>output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Init Values :
</span><span class='line'>variableA : 1
</span><span class='line'>variableB : 1
</span><span class='line'>variableC : 1
</span><span class='line'>
</span><span class='line'>---## lamda 1 ##---
</span><span class='line'>param inside lambda1 : 2
</span><span class='line'>After lamda1, variableA : 1
</span><span class='line'>
</span><span class='line'>---## lamda 2 ##---
</span><span class='line'>param inside lambda2 : 2
</span><span class='line'>variableB inside lambda2 : 2
</span><span class='line'>After lamda2, variableA : 1
</span><span class='line'>After lamda2, variableB : 2
</span><span class='line'>
</span><span class='line'>---## lamda 3 ##---
</span><span class='line'>param inside lambda3 : 2
</span><span class='line'>variableB inside lambda3 : 4
</span><span class='line'>After lamda3, result3 : 2
</span><span class='line'>After lamda3, variableA : 2
</span><span class='line'>After lamda3, variableB : 4
</span><span class='line'>
</span><span class='line'>---## lamda 4 ##---
</span><span class='line'>param inside lambda4 : 4
</span><span class='line'>variableB inside lambda4 : 8
</span><span class='line'>variableC inside lambda4 : 2
</span><span class='line'>After lamda4, variableA : 2
</span><span class='line'>After lamda4, variableB : 8
</span><span class='line'>After lamda4, variableC : 2
</span><span class='line'>
</span><span class='line'>---## lamda 5 ##---
</span><span class='line'>param inside lambda5 : 4
</span><span class='line'>variableC inside lambda5 : 4
</span><span class='line'>After lamda5, variableA : 2
</span><span class='line'>After lamda5, variableC : 2
</span></code></pre></td></tr></table></div></figure>


<p><h4>Reference<h4>
<ol type="1">
<li><a href="http://www.wrox.com/WileyCDA/WroxTitle/Professional-C-2nd-Edition.productCd-0470932449.html">Wrox Professional C++</a></li>
<li><a href="http://en.cppreference.com/w/cpp/language/lambda">http://en.cppreference.com/w/cpp/language/lambda</a></li>
<li><a href="https://oopscenities.net/2012/02/24/c11-stdfunction-and-stdbind/">https://oopscenities.net/2012/02/24/c11-stdfunction-and-stdbind/</a></li>
<li><a href="http://www.drdobbs.com/cpp/lambdas-in-c11/240168241?pgno=1">http://www.drdobbs.com/cpp/lambdas-in-c11/240168241?pgno=1</a></li>
</ol></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Boost (C++ Libraries) on Xcode, Code::Blocks and Visual Studio]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/03/27/configure-boost-c-plus-plus-on-xcode/"/>
    <updated>2016-03-27T20:38:49+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/03/27/configure-boost-c-plus-plus-on-xcode</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/post/2016-03-27-boost.png">
<a href="http://www.boost.org/">Boost</a> is a set of libraries for the C++ programming language that provide support for tasks and structures such as linear algebra, pseudorandom number generation, multithreading, image processing, regular expressions, and unit testing. It contains over eighty individual libraries.<a href="https://en.wikipedia.org/wiki/Boost_(C%2B%2B_libraries)">[2]</a></p>

<p>The other interesting points of <a href="http://www.boost.org/">Boost</a> are :</p>

<ol>
<li>Open source</li>
<li>Cross platform</li>
<li>Complement to STL rather than a replacement</li>
<li>Many of <a href="http://www.boost.org/">Boost</a> developers are on the C++ standard committee</li>
<li>Well documented</li>
<li>Most of the Boost libraries are licensed under the <a href="https://en.wikipedia.org/wiki/Boost_(C%2B%2B_libraries)#License">Boost Software License</a>, designed to allow <a href="http://www.boost.org/">Boost</a> to be used with both free and proprietary software projects</li>
</ol>




<h2>Installation Boost</h2>


<p>Before jumping into steps of configuring <a href="http://www.boost.org/">Boost</a> on various IDE, let&rsquo;s begin with <a href="http://www.boost.org/">Boost</a> installation. To be noted that on this post I run Xcode on OS X, <a href="http://www.codeblocks.org/">Code::Blocks</a>  on Linux (Ubuntu) and Visual Studio on Windows. The detail environments I use are :</p>

<ol>
<li>OS X 10.11.4 El Capitan</li>
<li>Ubuntu 14.04.4 LTS</li>
<li>Xcode Version 7.2</li>
<li>Code::Blocks 13.12, gcc 4.8.4</li>
<li>Visual Studio 2013</li>
<li>Boost 1.60.0</li>
</ol>




<h4>OS X and Linux (Ubuntu)</h4>


<p>There are several ways of <a href="http://www.boost.org/">Boost</a> installation. Instead of build from source code, we can use package manager such as <a href="https://www.macports.org/">MacPorts</a>, <a href="http://brew.sh/">Homebrew</a>, <a href="https://en.wikipedia.org/wiki/Advanced_Packaging_Tool">Advance Package Tool</a>, etc. In this post we will build <a href="http://www.boost.org/">Boost</a> from source code. The installation steps (from source code) on OS X and Ubuntu are the similar. To make it consistent, I use the same installation path for OS X and Ubuntu that is <code>/usr/local/boost_1_60_0</code>. You can use different path if you want. The steps are :</p>

<ol>
<li>Download boost library from <a href="boost.org">Boost website</a></li>
<li>Extract it.</li>
<li>Open terminal, navigate to the extracted directory</li>
<li>Create directory on <code>/usr/local/boost_1_60_0</code>, and ensure IDE has access to the directory. On my case I don't need this step on OS X, but on ubuntu it does.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /usr/local/boost_1_60_0
</span><span class='line'>sudo chmod <span class="m">777</span> -r boost_1_60_0
</span></code></pre></td></tr></table></div></figure>
</li>
<li>
Run command :
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./bootstrap.sh --prefix<span class="o">=</span>/usr/local/boost_1_60_0
</span><span class='line'>./b2 install
</span></code></pre></td></tr></table></div></figure>
This last step quite take time. So you can have coffee while waiting for it :)
</li>
</ol>


<p>Once the installation finish, we should have generated directory. They are <code>/usr/local/boost_1_60_0/include</code> contains header files and <code>/usr/local/boost_1_60_0/lib</code> contains libraries.</p>

<h4>Windows</h4>


<p>The <a href="http://www.boost.org/">Boost</a> installation step on Windows is also similar to the installation step on OS X and Ubuntu.
The steps are :</p>

<ol>
<li>Download boost library from <a href="boost.org">Boost website</a></li>
<li>Extract it to C:\\boost_1_60_0 </li>
<li>Open Visual Studio command prompt. I use Visual Studio 2013 x86 Native Tools Command Prompt native tool (I have not test using default Windows Command Prompt)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'>C:\<span class="p">&gt;</span> <span class="n">cd</span> C:\boost_<span class="m">1</span>_<span class="m">60</span>_<span class="m">0</span>
</span><span class='line'>C:\boost_<span class="m">1</span>_<span class="m">60</span>_<span class="m">0</span><span class="p">&gt;</span> <span class="n">bootstrap</span>.bat
</span><span class='line'>C:\boost_<span class="m">1</span>_<span class="m">60</span>_<span class="m">0</span>&gt; .\b<span class="m">2</span>
</span></code></pre></td></tr></table></div></figure>
As on OS X and Ubuntu, the last step quite take time.
</li>
</ol>




<h2>Configure <a href="http://www.boost.org/">Boost</a> on IDE(s)</h2>


<p>Before create C++ projects on various IDE, let&rsquo;s create a simple C++ hello world code that use Boost libraries. To simplify the test, I grab sample code from <a href="http://stackoverflow.com/questions/999120/c-hello-world-boost-tee-example-program">here</a></p>

<figure class='code'><figcaption><span>Hello World</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;boost/iostreams/tee.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/iostreams/stream.hpp&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="o">::</span><span class="n">iostreams</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">tee_device</span><span class="o">&lt;</span><span class="n">ostream</span><span class="p">,</span> <span class="n">ofstream</span><span class="o">&gt;</span> <span class="n">TeeDevice</span><span class="p">;</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">stream</span><span class="o">&lt;</span><span class="n">TeeDevice</span><span class="o">&gt;</span> <span class="n">TeeStream</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ofstream</span> <span class="n">ofs</span><span class="p">(</span><span class="s">&quot;/Users/neutro/Workspace/cpp/sample.txt&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TeeDevice</span> <span class="n">my_tee</span><span class="p">(</span><span class="n">cout</span><span class="p">,</span> <span class="n">ofs</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TeeStream</span> <span class="n">my_split</span><span class="p">(</span><span class="n">my_tee</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">my_split</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">my_split</span><span class="p">.</span><span class="n">flush</span><span class="p">();</span>
</span><span class='line'>    <span class="n">my_split</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The snipped code above just print text and write it to a text file. We just want to ensure the IDE&rsquo;s compiler can compile and build the code that includes <a href="http://www.boost.org/">Boost</a> libraries.</p>

<ul>
  <li>
    <h4>Xcode</h4>
    To include Boost libraries on Xcode project :
    <ol>
    <li>Select Xcode project > Build Setting</li>
    <li>Add <code>/usr/local/boost_1_60_0/include/</code> to the Header Search Paths</li>
    <li>Add <code>/usr/local/boost_1_60_0/lib/</code> to the Library Search Paths</li>
    </ol>

    <img class="center" src="http://neutrofoton.github.io/images/post/2016-03-27-xcode.png">

  </li>
  <li>
    <h4>Code::Blocks</h4>
    To include Boost libraries on Code::Blocks project :
    <ol>
    <li>Right Click on Code::Blocks project > Build Option</li>
    <li>
    Select Compiler tab, add <code>/usr/local/boost_1_60_0/include/</code>
    <img class="center" src="http://neutrofoton.github.io/images/post/2016-03-27-codeblocks1.png">
    </li>
    <li>
    Select Linker tab, add <code>/usr/local/boost_1_60_0/lib/</code>
    <img class="center" src="http://neutrofoton.github.io/images/post/2016-03-27-codeblocks2.png">
    </li>
    </ol>
  </li>
  <li>
    <h4>Visual Studio</h4>
    To include Boost libraries on Visual C++ project :
    <ol>
    <li>Right Click on VC++ project > Properties</li>
    <li>Select VC++ Directories on the left pane</li>
    <li>Add <code>C:\boost_1_60_0</code> on Include Directories item</li>
    <li>Add <code>C:\boost_1_60_0\stage\lib</code> on Include Directories item</li>
    <li>Click OK to close the dialog</li>
    </ol>
    <img class="center" src="http://neutrofoton.github.io/images/post/2016-03-27-vs.png">
  </li>
</ul>


<p>The last is rebuild the above code on selected IDE. We should not got any errors once the IDE can detect the <a href="http://www.boost.org/">Boost</a> directory path.</p>

<p>The sample of this article can be downloaded <a href="https://github.com/neutrofoton/SimpleBoost">here</a></p>

<p><h4>Reference<h4>
<ol type="1">
<li>
<a href="http://www.boost.org/">http://www.boost.org/</a>
</li>
<li>
<a href="https://en.wikipedia.org/wiki/Boost_(C%2B%2B_libraries)">Wikipedia</a>
</li>
</ol></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GroovyDynamicElementReader Is Missing Import Spring Framework Source to Eclipse STS]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/03/12/groovydynamicelementreader-is-missing-import-spring-framework-source-to-eclipse-sts/"/>
    <updated>2016-03-12T15:08:34+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/03/12/groovydynamicelementreader-is-missing-import-spring-framework-source-to-eclipse-sts</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/logo/spring.png">
Sometime for some reasons when dealing with open source technology we have interest to download the full source code of the frameworks we use. Either for customization, extending them or just for having a look to have more knowledge how exactly they work.</p>

<p><a href="https://spring.io/">Spring</a> is a popular framework in Java world. It&rsquo;s one of my favorite framework in Java. At the time of this blog post, I have just grabbed the source of it from <a href="https://github.com/spring-projects/spring-framework">github repository</a>. The source code is fantastic. Nice coding style, project structure, build tool and of course its documentations. While following the guidance to build and import to <a href="https://spring.io/tools">Spring Tool Suite</a>, I got an error on <code>spring-beans-groovy</code> project in <code>GroovyBeanDefinitionReader.java</code>. Navigating to the errors, STS seems try to find a class <code>GroovyDynamicElementReader</code> but not found.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-12-pic01.png"></p>

<p> Honestly I have no any experience with groovy before. When I try to drill through <code>spring-beans-groovy/src/main/groovy/org/springframework/beans/factory/groovy</code>, finally get a clue <code>GroovyDynamicElementReader.groovy</code>.</p>

<p>Installing <a href="https://github.com/groovy/groovy-eclipse/wiki">Groovy Eclipse</a> seems solve the problem.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-12-pic02.png"></p>

<p>In case you have the same problem as what I got, just ensure you have <a href="https://github.com/groovy/groovy-eclipse/wiki">Groovy Eclipse</a> on your eclipse base IDE.</p>

<h3>Reference</h3>


<ol>
<li>https://github.com/groovy/groovy-eclipse/wiki</li>
<li>http://blog.csdn.net/zlx510tsde/article/details/46241675</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Math in Web]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/03/09/math-in-web/"/>
    <updated>2016-03-09T21:41:47+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/03/09/math-in-web</id>
    <content type="html"><![CDATA[<p>There are several frameworks that can be used to display math equation on web page. Usually math equestion written in <a href="https://en.wikipedia.org/wiki/LaTeX">LaTeX</a> format. <a href="https://en.wikipedia.org/wiki/LaTeX">LaTeX</a> is used for the communication and publication of scientific documents in many fields, including mathematics, physics, computer science, statistics etc.</p>

<p><a href="https://www.mathjax.org/">MathJax</a> and <a href="https://khan.github.io/KaTeX/">KaTeX</a> are two popular javascript frameworks that can render LaTeX expression to beautiful math equation in browser.</p>

<p>The following are examples math LaTeX expression rendered with <a href="https://khan.github.io/KaTeX/">KaTeX</a>.
To use <a href="https://khan.github.io/KaTeX/">KaTeX</a> we just need to include <code>katex.min.css</code> and <code>katex.min.js</code></p>

<figure class='code'><figcaption><span>KaTeX</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;katex&quot;</span> <span class="na">id=</span><span class="s">&quot;eq1&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;katex&quot;</span> <span class="na">id=</span><span class="s">&quot;eq2&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;katex&quot;</span> <span class="na">id=</span><span class="s">&quot;eq3&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;katex&quot;</span> <span class="na">id=</span><span class="s">&quot;eq4&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;katex&quot;</span> <span class="na">id=</span><span class="s">&quot;eq5&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;katex&quot;</span> <span class="na">id=</span><span class="s">&quot;eq6&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;katex&quot;</span> <span class="na">id=</span><span class="s">&quot;eq7&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>KaTeX sample</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">katex</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;c = \\pm\\sqrt{a^2 + b^2}&quot;</span><span class="p">,</span> <span class="nx">eq1</span><span class="p">);</span>
</span><span class='line'><span class="nx">katex</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;f(a,b,c) = (a^2+b^2+c^2)^3&quot;</span><span class="p">,</span> <span class="nx">eq2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">katex</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;\\int u \\frac{dv}{dx}\\,dx=uv-\\int \\frac{du}{dx}v\\,dx&quot;</span><span class="p">,</span> <span class="nx">eq3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">katex</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;f(x) = \\int_{-\\infty}^\\infty \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}&quot;</span><span class="p">,</span> <span class="nx">eq4</span><span class="p">);</span>
</span><span class='line'><span class="nx">katex</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;\\oint \\vec{F} \\cdot d\\vec{s}=0&quot;</span><span class="p">,</span> <span class="nx">eq5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">katex</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)&quot;</span><span class="p">,</span> <span class="nx">eq6</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"/></p>

<script src="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.js"></script>




<div>
<p><span class="katex" id="eq1"></span></p>
<p><span class="katex" id="eq2"></span></p>
<p><span class="katex" id="eq3"></span></p>
<p><span class="katex" id="eq4"></span></p>
<p><span class="katex" id="eq5"></span></p>
<p><span class="katex" id="eq6"></span></p>
<p><span class="katex" id="eq7"></span></p>
</div>




<script>

    katex.render("c = \\pm\\sqrt{a^2 + b^2}", eq1);
    katex.render("f(a,b,c) = (a^2+b^2+c^2)^3", eq2);

    katex.render("\\int u \\frac{dv}{dx}\\,dx=uv-\\int \\frac{du}{dx}v\\,dx", eq3);

    katex.render("f(x) = \\int_{-\\infty}^\\infty \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}", eq4);
    katex.render("\\oint \\vec{F} \\cdot d\\vec{s}=0", eq5);

    katex.render("\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)", eq6);
</script>


<p>The comparison between <a href="https://www.mathjax.org/">MathJax</a> and <a href="https://khan.github.io/KaTeX/">KaTeX</a> can be found <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">here</a>. At the time of writing this blog post, I got <a href="https://khan.github.io/KaTeX/">KaTeX</a> is faster than <a href="https://www.mathjax.org/">MathJax</a>. But <a href="https://khan.github.io/KaTeX/">KaTeX</a> can not render a few expressions that <a href="https://www.mathjax.org/">MathJax</a> can.</p>

<p>The comparison results could be changed in the next. Since both of them are actively developed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create iOS Ipa for In-House Distribution]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/03/08/create-ios-ipa-for-in-house-distribution/"/>
    <updated>2016-03-08T23:10:44+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/03/08/create-ios-ipa-for-in-house-distribution</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/logo/ios.png"></p>

<p>Couple of month ago in the era of iphone 6, the company I work for was officially migrate official mobile device from BlackBerry to iphone 6. By the time of migration, development team also got initiative request from users to create an app for android. On the other hand, we also want to anticipate another request for ios platform. To simplify the porting to another platform, we use <a href="https://en.wikipedia.org/wiki/HTML5">HTML5</a>, <a href="http://www.telerik.com/kendo-ui"/>Kendo UI</a> and <a href="https://cordova.apache.org/">Apache Cordova</a> to build the app. The app just consumes data from REST services. The other requirement is the app will not be published to App Store. We have internal mobile device management (MDM) called <a href="https://www.mobileiron.com/"/>MobileIron</a>.</p>

<p>In this post, I will not write about how to build the app with Apache Cordova, I just want to focus on how to create ipa distribution package for in house enterprise distribution. The steps should be the same for app that is created with native. I also will not discuss about how to deploy to MDM.</p>

<p>The first requirement is we have to be a member of <a href="https://developer.apple.com/programs/enterprise/">iOS Developer Enterprise Program</a> which costs $299. The steps how to register is clearly explained in apple developer site.</p>

<p>At the time of write this post, my development environment :</p>

<ol type="1">
<li> OS X El Capitan (10.11.3)</li>
<li>Xcode (7.2)</li>
<li>iphone 6 (iOS 9.2)</li>
</ol>


<p>Before we start create ipa package, ensure our code runs well as expected on iphone simulator.</p>

<p>The steps of creating ipa package for distribution basically similar to deploying to real device for development as explained on <a href="http://neutrofoton.github.io/blog/2016/03/08/deploying-ios-app-to-real-device/">my previous post</a>.
In this post, I will only capture the things that are difference between them.</p>

<h2>Certificate</h2>


<p>While creating certificate preparation in <a href="https://developer.apple.com/account/ios/certificate/create">Apple Developer</a> portal, showed its slightly difference from <a href="http://neutrofoton.github.io/blog/2016/03/08/deploying-ios-app-to-real-device/">my previous post</a>
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-09-pic01.png"></p>

<p>In this case, I choose <code>In-House and Ad Hoc </code> distribution option instead of <code>iOS App Development</code>, since we plan to create ipa package for In House distribution. If we notice upon the above screenshot, in the <code>Production</code> section has option for <code>In-House and Ad Hoc </code> distribution. Meanwhile on <a href="http://neutrofoton.github.io/blog/2016/03/08/deploying-ios-app-to-real-device/">my previous post</a> has <code>App Store and Ad Hoc</code>. The difference because of the apple id I used on this post is enrolled as an <a href="https://developer.apple.com/programs/enterprise/">iOS Developer Enterprise Program</a>, and on <a href="http://neutrofoton.github.io/blog/2016/03/08/deploying-ios-app-to-real-device/">my previous post</a> uses Individual Apple Developer Program. The detail difference between them and other developer license schema can found <a href="https://developer.apple.com/support/compare-memberships/">here</a>.</p>

<p>The rest of preparing certificate installation for production is the same as <a href="http://neutrofoton.github.io/blog/2016/03/08/deploying-ios-app-to-real-device/">certificate installation for development</a>.</p>

<h2>App IDs</h2>


<p>The step of registering app <code>Bundle ID</code> is the same as <a href="http://neutrofoton.github.io/blog/2016/03/08/deploying-ios-app-to-real-device/">the previous post</a>. If we already registered for development, we should not do it again.</p>

<h2>Provisioning Profiles</h2>


<p>Creating provisioning also similar to the creation Provisioning for Development. Except at the wizard option we need to choose one of in the <code>Distribution</code> group instead of <code>Development</code> group. In this sample I select <code>In House</code>, since the ipa package we created will be deployed via MDM.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-09-pic02.png"></p>

<p>The next step is opening Xcode and add apple id via Xcode <code>Proferences > Accounts</code> as I did on <a href="http://neutrofoton.github.io/blog/2016/03/08/deploying-ios-app-to-real-device/">previous post</a>.
Now we should get the similar picture as follow.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-09-pic03.png"></p>

<p>Ensure <code>distribution profile</code> already downloaded. If not we can click download button on the list above of picture.</p>

<p>The next thing is opening iOS project with Xcode and ensuring we select <code>Distribution Profile</code> we installed on <code>Code signing</code> section group both on <code>Project</code> and <code>Target</code>.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-09-pic04.png">
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-09-pic05.png"></p>

<p>The next step is select <code>Product</code> menu > <code>Archive</code>, then follow the wizard.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-09-pic06.png">
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-09-pic07.png">
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-09-pic08.png">
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-09-pic09.png">
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-09-pic10.png"></p>

<p>When the wizard finish, by default Xcode will create ipa package for us on desktop.</p>

<p>That&rsquo;s all my share and thanks for reading :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying iOS App to Real Device]]></title>
    <link href="http://neutrofoton.github.io/blog/2016/03/08/deploying-ios-app-to-real-device/"/>
    <updated>2016-03-08T12:35:31+07:00</updated>
    <id>http://neutrofoton.github.io/blog/2016/03/08/deploying-ios-app-to-real-device</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://neutrofoton.github.io/images/logo/ios.png">
While developing ios app, sometime we don&rsquo;t just testing run the app on ios simulator we also need to test the app on real device though.</p>

<p><p/>
The are couple of things that we need to prepare to make our app be able to run on real devices.</p>

<p><h2>Certificate</h2>
Development certificate basically tells us that we are apple developers. To be it, our apple id has to be enrolled as an apple developer. Information about apple developer enrollment can be found at <a href="https://developer.apple.com/programs/enroll/">Apple Developer site</a>.</p>

<p>Once our apple id enrolled as an apple developer, there are couple of steps for preparing development certificate. App need to be signed to be able to deployed to real devices. To do that:</p>

<p><ol type="1"></p>

<p><li>Go to <code>Launchpad</code> or <code>Spotlight Search</code>, type <code>Keychain Access</code> then open the app.
</li></p>

<p><li>At top menu, click <code>Keychain Access</code> > <code>Certificate Assistance</code> > <code>Request a Certificate from a Certificate Authority</code></p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic01.png"></p>

<p>Fill the <code>Email</code> and <code>Common Name</code>. The email should be <code>apple id email</code> then select <code>save to disk</code> and checked <code>Let me specify key pair information</code>. When we click continue, we should get save dialog</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic02.png"></p>

<p>Select Key Size <code>2048 bits</code> and <code>RSA</code> algorithm, click continue then done.
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic03.png"></p>

<p>The certificate request that we create just saved to disk (desktop in my case).</p>

<p></li></p>

<p><li>
Open <a href="https://developer.apple.com/membercenter/index.action">apple developer portal</a>, login using apple id that already enrolled as apple developer.
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic04.png"></p>

<p>click <code>Certificates, Identifiers and Profiles</code></p>

<p></li>
<li>
Select <code>Sertificates</code> group > <code>All</code>
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic05.png"></p>

<p>On the right pane, select <code>add (+)</code> button, select type of certificate that we want to create. At this post we will create for development only. Not for production such as for deploy our app in app store nor internal store (in-house) like mobile device management.
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic06.png"></p>

<p>If everything already done on this page, scroll down > click <code>continue</code></p>

<p>We may notice a information message that we have to ensure on our OS X development machine keychain installed <code>
Worldwide Developer Relations Certificate Authority</code></p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic07.png"></p>

<p></li>
<li>
Follow the wizard, till we&rsquo;re asked to upload our certificate request that we already created on previous step.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic08.png"></p>

<p></li>
<li>
After completed the wizard, we should be able to download the generated certificate and ready to install on development machine.
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic09.png"></p>

<p></li>
<li>
Download the <code>development certificate</code> > double click. The certificate should be installed on our <code>Keychain Access</code>
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic10.png"></p>

<p><code>
NOTE :
Please ignore the distribution certificate on my screenshot. It just another certificate for distribution which is out of scope of this post.
</code>
</li>
</ol></p>

<p><h2>Devices</h2>
This part informs to the xcode that the device is belongs to me. So let me run my app on it. To register our devices, select <code>Devices</code> on the apple developer portal as we did for certificate section above.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic11.png"></p>

<p>Click <code>add (+)</code>
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic12.png"></p>

<p>Enter <code>Name</code> and <code>UUID</code>. To get <code>UUID</code>, plug idevice to computer, itune will display it. If itune display <code>Serial Number</code> or <code>ECID</code> or <code>Product Type</code>,  click the label till <code>UUID</code> displayed. Just copy it and paste in the <code>UUID</code> text box above.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic13.png"></p>

<p>Follow the wizard till finish. We should be able to get our idevices listed on the device list.
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic14.png"></p>

<p><h2>App IDs</h2>
On Apple developer portal mentioned that an <code>App ID</code> is a string that defines both a keychain identity and a set of apps you are developing. Its primary use is as part of a provisioning profile, it specifies which apps are authorized by the profile to be signed and launched.</p>

<p>To register <code>App ID</code>, click <code>Add (+)</code>. Fill <code>Name</code> and <code>Bundle ID</code>.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic15.png"></p>

<p>In this sample, my application <code>Name</code> is <code>HelloWorld</code> and <code>Bundle ID</code> is <code>com.neutrofoton.helloworld</code></p>

<p>Click continue till the wizard dialog finished.
We can get list all of <code>App IDs</code> that we registered by clicking  the <code>App IDs</code> on the left menu panel</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic16.png"></p>

<p><h2>Provisioning Profiles</h2>
On Apple Developer portal Provisioning Profiles defined that it allows us to install apps onto our iOS devices. A provisioning profile includes signing certificates, device identifiers, and an App ID. Development provisioning profiles are used to build and install versions of our app during the development cycle, while distribution provisioning profiles are used to submit our apps to the App Store and distribute them to beta testers.</p>

<p>To start create provisioning, click <code>add (+)</code> select <code>iOS App Development</code>. In this case I will create provisioning for test. For distribution we select on distribution group option as our need.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic17.png"></p>

<p>Follow the wizard by selecting <code>App ID</code>, <code>Devices</code>, and <code>Certificates</code> that will be applied to the <code>Provisioning Profile</code></p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic18.png">
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic19.png">
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic20.png">
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic21.png">
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic22.png"></p>

<p>Now open <code>Xcode > Preferences </code> select <code>Accounts</code> tab. Add apple id that we use for login to apple developer portal.</p>

<p>Select the apple id on the left pane > click <code>View Details</code> button.
We should get the similar picture as below.</p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic23.png"></p>

<p>If the profiles are not downloaded yet, we can click <code>Download</code> button that make Xcode do for us.</p>

<p>To test provisioning we created, let&rsquo;s create simple application. At the time of write this post, my development environment :
<ol type="1">
<li> OS X El Capitan (10.11.3)</li>
<li>Xcode (7.2)</li>
<li>iphone 4s iOS 9.1</li>
</ol></p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic24.png">
<img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic25.png"></p>

<p>Ensure we have the same <code>Bundle Identifier</code> as we registered on <code>Provisioning Profile</code>. At this sample app, I just create a simple lable <code>Hello World Application</code> on storyboard.</p>

<p>Now run the application by selecting <code>Device</code> instead of <code>Simulator</code>. We may get the following message while running on real device, just click <code>Allow</code></p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic26.png"></p>

<p><img class="center" src="http://neutrofoton.github.io/images/post/2016-03-08-pic27.png"></p>

<p>The above picture shows that the Hello World app can be run on real device.</p>
]]></content>
  </entry>
  
</feed>
